
L151_EarControl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ffc  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f4  0800a138  0800a138  0001a138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a32c  0800a32c  00020180  2**0
                  CONTENTS
  4 .ARM          00000008  0800a32c  0800a32c  0001a32c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a334  0800a334  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a334  0800a334  0001a334  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a338  0800a338  0001a338  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  0800a33c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001528  20000180  0800a4bc  00020180  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200016a8  0800a4bc  000216a8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011101  00000000  00000000  000201a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003924  00000000  00000000  000312aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dc0  00000000  00000000  00034bd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bf8  00000000  00000000  00035990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017d85  00000000  00000000  00036588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014bb9  00000000  00000000  0004e30d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007f7dd  00000000  00000000  00062ec6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e26a3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034a8  00000000  00000000  000e26f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000180 	.word	0x20000180
 8000158:	00000000 	.word	0x00000000
 800015c:	0800a120 	.word	0x0800a120

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000184 	.word	0x20000184
 8000178:	0800a120 	.word	0x0800a120

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295
 800018c:	f04f 30ff 	movne.w	r0, #4294967295
 8000190:	f000 b976 	b.w	8000480 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9e08      	ldr	r6, [sp, #32]
 80001b2:	460d      	mov	r5, r1
 80001b4:	4604      	mov	r4, r0
 80001b6:	4688      	mov	r8, r1
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	d14d      	bne.n	8000258 <__udivmoddi4+0xac>
 80001bc:	428a      	cmp	r2, r1
 80001be:	4694      	mov	ip, r2
 80001c0:	d968      	bls.n	8000294 <__udivmoddi4+0xe8>
 80001c2:	fab2 f282 	clz	r2, r2
 80001c6:	b152      	cbz	r2, 80001de <__udivmoddi4+0x32>
 80001c8:	fa01 f302 	lsl.w	r3, r1, r2
 80001cc:	f1c2 0120 	rsb	r1, r2, #32
 80001d0:	fa20 f101 	lsr.w	r1, r0, r1
 80001d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80001d8:	ea41 0803 	orr.w	r8, r1, r3
 80001dc:	4094      	lsls	r4, r2
 80001de:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80001e2:	fbb8 f7f1 	udiv	r7, r8, r1
 80001e6:	fa1f fe8c 	uxth.w	lr, ip
 80001ea:	fb01 8817 	mls	r8, r1, r7, r8
 80001ee:	fb07 f00e 	mul.w	r0, r7, lr
 80001f2:	0c23      	lsrs	r3, r4, #16
 80001f4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80001f8:	4298      	cmp	r0, r3
 80001fa:	d90a      	bls.n	8000212 <__udivmoddi4+0x66>
 80001fc:	eb1c 0303 	adds.w	r3, ip, r3
 8000200:	f107 35ff 	add.w	r5, r7, #4294967295
 8000204:	f080 811e 	bcs.w	8000444 <__udivmoddi4+0x298>
 8000208:	4298      	cmp	r0, r3
 800020a:	f240 811b 	bls.w	8000444 <__udivmoddi4+0x298>
 800020e:	3f02      	subs	r7, #2
 8000210:	4463      	add	r3, ip
 8000212:	1a1b      	subs	r3, r3, r0
 8000214:	fbb3 f0f1 	udiv	r0, r3, r1
 8000218:	fb01 3310 	mls	r3, r1, r0, r3
 800021c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000220:	b2a4      	uxth	r4, r4
 8000222:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000226:	45a6      	cmp	lr, r4
 8000228:	d90a      	bls.n	8000240 <__udivmoddi4+0x94>
 800022a:	eb1c 0404 	adds.w	r4, ip, r4
 800022e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000232:	f080 8109 	bcs.w	8000448 <__udivmoddi4+0x29c>
 8000236:	45a6      	cmp	lr, r4
 8000238:	f240 8106 	bls.w	8000448 <__udivmoddi4+0x29c>
 800023c:	4464      	add	r4, ip
 800023e:	3802      	subs	r0, #2
 8000240:	2100      	movs	r1, #0
 8000242:	eba4 040e 	sub.w	r4, r4, lr
 8000246:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800024a:	b11e      	cbz	r6, 8000254 <__udivmoddi4+0xa8>
 800024c:	2300      	movs	r3, #0
 800024e:	40d4      	lsrs	r4, r2
 8000250:	e9c6 4300 	strd	r4, r3, [r6]
 8000254:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000258:	428b      	cmp	r3, r1
 800025a:	d908      	bls.n	800026e <__udivmoddi4+0xc2>
 800025c:	2e00      	cmp	r6, #0
 800025e:	f000 80ee 	beq.w	800043e <__udivmoddi4+0x292>
 8000262:	2100      	movs	r1, #0
 8000264:	e9c6 0500 	strd	r0, r5, [r6]
 8000268:	4608      	mov	r0, r1
 800026a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800026e:	fab3 f183 	clz	r1, r3
 8000272:	2900      	cmp	r1, #0
 8000274:	d14a      	bne.n	800030c <__udivmoddi4+0x160>
 8000276:	42ab      	cmp	r3, r5
 8000278:	d302      	bcc.n	8000280 <__udivmoddi4+0xd4>
 800027a:	4282      	cmp	r2, r0
 800027c:	f200 80fc 	bhi.w	8000478 <__udivmoddi4+0x2cc>
 8000280:	1a84      	subs	r4, r0, r2
 8000282:	eb65 0303 	sbc.w	r3, r5, r3
 8000286:	2001      	movs	r0, #1
 8000288:	4698      	mov	r8, r3
 800028a:	2e00      	cmp	r6, #0
 800028c:	d0e2      	beq.n	8000254 <__udivmoddi4+0xa8>
 800028e:	e9c6 4800 	strd	r4, r8, [r6]
 8000292:	e7df      	b.n	8000254 <__udivmoddi4+0xa8>
 8000294:	b902      	cbnz	r2, 8000298 <__udivmoddi4+0xec>
 8000296:	deff      	udf	#255	; 0xff
 8000298:	fab2 f282 	clz	r2, r2
 800029c:	2a00      	cmp	r2, #0
 800029e:	f040 8091 	bne.w	80003c4 <__udivmoddi4+0x218>
 80002a2:	eba1 000c 	sub.w	r0, r1, ip
 80002a6:	2101      	movs	r1, #1
 80002a8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ac:	fa1f fe8c 	uxth.w	lr, ip
 80002b0:	fbb0 f3f7 	udiv	r3, r0, r7
 80002b4:	fb07 0013 	mls	r0, r7, r3, r0
 80002b8:	0c25      	lsrs	r5, r4, #16
 80002ba:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80002be:	fb0e f003 	mul.w	r0, lr, r3
 80002c2:	42a8      	cmp	r0, r5
 80002c4:	d908      	bls.n	80002d8 <__udivmoddi4+0x12c>
 80002c6:	eb1c 0505 	adds.w	r5, ip, r5
 80002ca:	f103 38ff 	add.w	r8, r3, #4294967295
 80002ce:	d202      	bcs.n	80002d6 <__udivmoddi4+0x12a>
 80002d0:	42a8      	cmp	r0, r5
 80002d2:	f200 80ce 	bhi.w	8000472 <__udivmoddi4+0x2c6>
 80002d6:	4643      	mov	r3, r8
 80002d8:	1a2d      	subs	r5, r5, r0
 80002da:	fbb5 f0f7 	udiv	r0, r5, r7
 80002de:	fb07 5510 	mls	r5, r7, r0, r5
 80002e2:	fb0e fe00 	mul.w	lr, lr, r0
 80002e6:	b2a4      	uxth	r4, r4
 80002e8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002ec:	45a6      	cmp	lr, r4
 80002ee:	d908      	bls.n	8000302 <__udivmoddi4+0x156>
 80002f0:	eb1c 0404 	adds.w	r4, ip, r4
 80002f4:	f100 35ff 	add.w	r5, r0, #4294967295
 80002f8:	d202      	bcs.n	8000300 <__udivmoddi4+0x154>
 80002fa:	45a6      	cmp	lr, r4
 80002fc:	f200 80b6 	bhi.w	800046c <__udivmoddi4+0x2c0>
 8000300:	4628      	mov	r0, r5
 8000302:	eba4 040e 	sub.w	r4, r4, lr
 8000306:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800030a:	e79e      	b.n	800024a <__udivmoddi4+0x9e>
 800030c:	f1c1 0720 	rsb	r7, r1, #32
 8000310:	408b      	lsls	r3, r1
 8000312:	fa22 fc07 	lsr.w	ip, r2, r7
 8000316:	ea4c 0c03 	orr.w	ip, ip, r3
 800031a:	fa25 fa07 	lsr.w	sl, r5, r7
 800031e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000322:	fbba f8f9 	udiv	r8, sl, r9
 8000326:	fa20 f307 	lsr.w	r3, r0, r7
 800032a:	fb09 aa18 	mls	sl, r9, r8, sl
 800032e:	408d      	lsls	r5, r1
 8000330:	fa1f fe8c 	uxth.w	lr, ip
 8000334:	431d      	orrs	r5, r3
 8000336:	fa00 f301 	lsl.w	r3, r0, r1
 800033a:	fb08 f00e 	mul.w	r0, r8, lr
 800033e:	0c2c      	lsrs	r4, r5, #16
 8000340:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000344:	42a0      	cmp	r0, r4
 8000346:	fa02 f201 	lsl.w	r2, r2, r1
 800034a:	d90b      	bls.n	8000364 <__udivmoddi4+0x1b8>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f108 3aff 	add.w	sl, r8, #4294967295
 8000354:	f080 8088 	bcs.w	8000468 <__udivmoddi4+0x2bc>
 8000358:	42a0      	cmp	r0, r4
 800035a:	f240 8085 	bls.w	8000468 <__udivmoddi4+0x2bc>
 800035e:	f1a8 0802 	sub.w	r8, r8, #2
 8000362:	4464      	add	r4, ip
 8000364:	1a24      	subs	r4, r4, r0
 8000366:	fbb4 f0f9 	udiv	r0, r4, r9
 800036a:	fb09 4410 	mls	r4, r9, r0, r4
 800036e:	fb00 fe0e 	mul.w	lr, r0, lr
 8000372:	b2ad      	uxth	r5, r5
 8000374:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x1e2>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 35ff 	add.w	r5, r0, #4294967295
 8000384:	d26c      	bcs.n	8000460 <__udivmoddi4+0x2b4>
 8000386:	45a6      	cmp	lr, r4
 8000388:	d96a      	bls.n	8000460 <__udivmoddi4+0x2b4>
 800038a:	3802      	subs	r0, #2
 800038c:	4464      	add	r4, ip
 800038e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000392:	fba0 9502 	umull	r9, r5, r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	42ac      	cmp	r4, r5
 800039c:	46c8      	mov	r8, r9
 800039e:	46ae      	mov	lr, r5
 80003a0:	d356      	bcc.n	8000450 <__udivmoddi4+0x2a4>
 80003a2:	d053      	beq.n	800044c <__udivmoddi4+0x2a0>
 80003a4:	2e00      	cmp	r6, #0
 80003a6:	d069      	beq.n	800047c <__udivmoddi4+0x2d0>
 80003a8:	ebb3 0208 	subs.w	r2, r3, r8
 80003ac:	eb64 040e 	sbc.w	r4, r4, lr
 80003b0:	fa22 f301 	lsr.w	r3, r2, r1
 80003b4:	fa04 f707 	lsl.w	r7, r4, r7
 80003b8:	431f      	orrs	r7, r3
 80003ba:	40cc      	lsrs	r4, r1
 80003bc:	e9c6 7400 	strd	r7, r4, [r6]
 80003c0:	2100      	movs	r1, #0
 80003c2:	e747      	b.n	8000254 <__udivmoddi4+0xa8>
 80003c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003c8:	f1c2 0120 	rsb	r1, r2, #32
 80003cc:	fa25 f301 	lsr.w	r3, r5, r1
 80003d0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d4:	fa20 f101 	lsr.w	r1, r0, r1
 80003d8:	4095      	lsls	r5, r2
 80003da:	430d      	orrs	r5, r1
 80003dc:	fbb3 f1f7 	udiv	r1, r3, r7
 80003e0:	fb07 3311 	mls	r3, r7, r1, r3
 80003e4:	fa1f fe8c 	uxth.w	lr, ip
 80003e8:	0c28      	lsrs	r0, r5, #16
 80003ea:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ee:	fb01 f30e 	mul.w	r3, r1, lr
 80003f2:	4283      	cmp	r3, r0
 80003f4:	fa04 f402 	lsl.w	r4, r4, r2
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x260>
 80003fa:	eb1c 0000 	adds.w	r0, ip, r0
 80003fe:	f101 38ff 	add.w	r8, r1, #4294967295
 8000402:	d22f      	bcs.n	8000464 <__udivmoddi4+0x2b8>
 8000404:	4283      	cmp	r3, r0
 8000406:	d92d      	bls.n	8000464 <__udivmoddi4+0x2b8>
 8000408:	3902      	subs	r1, #2
 800040a:	4460      	add	r0, ip
 800040c:	1ac0      	subs	r0, r0, r3
 800040e:	fbb0 f3f7 	udiv	r3, r0, r7
 8000412:	fb07 0013 	mls	r0, r7, r3, r0
 8000416:	b2ad      	uxth	r5, r5
 8000418:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800041c:	fb03 f00e 	mul.w	r0, r3, lr
 8000420:	42a8      	cmp	r0, r5
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x28a>
 8000424:	eb1c 0505 	adds.w	r5, ip, r5
 8000428:	f103 38ff 	add.w	r8, r3, #4294967295
 800042c:	d216      	bcs.n	800045c <__udivmoddi4+0x2b0>
 800042e:	42a8      	cmp	r0, r5
 8000430:	d914      	bls.n	800045c <__udivmoddi4+0x2b0>
 8000432:	3b02      	subs	r3, #2
 8000434:	4465      	add	r5, ip
 8000436:	1a28      	subs	r0, r5, r0
 8000438:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800043c:	e738      	b.n	80002b0 <__udivmoddi4+0x104>
 800043e:	4631      	mov	r1, r6
 8000440:	4630      	mov	r0, r6
 8000442:	e707      	b.n	8000254 <__udivmoddi4+0xa8>
 8000444:	462f      	mov	r7, r5
 8000446:	e6e4      	b.n	8000212 <__udivmoddi4+0x66>
 8000448:	4618      	mov	r0, r3
 800044a:	e6f9      	b.n	8000240 <__udivmoddi4+0x94>
 800044c:	454b      	cmp	r3, r9
 800044e:	d2a9      	bcs.n	80003a4 <__udivmoddi4+0x1f8>
 8000450:	ebb9 0802 	subs.w	r8, r9, r2
 8000454:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000458:	3801      	subs	r0, #1
 800045a:	e7a3      	b.n	80003a4 <__udivmoddi4+0x1f8>
 800045c:	4643      	mov	r3, r8
 800045e:	e7ea      	b.n	8000436 <__udivmoddi4+0x28a>
 8000460:	4628      	mov	r0, r5
 8000462:	e794      	b.n	800038e <__udivmoddi4+0x1e2>
 8000464:	4641      	mov	r1, r8
 8000466:	e7d1      	b.n	800040c <__udivmoddi4+0x260>
 8000468:	46d0      	mov	r8, sl
 800046a:	e77b      	b.n	8000364 <__udivmoddi4+0x1b8>
 800046c:	4464      	add	r4, ip
 800046e:	3802      	subs	r0, #2
 8000470:	e747      	b.n	8000302 <__udivmoddi4+0x156>
 8000472:	3b02      	subs	r3, #2
 8000474:	4465      	add	r5, ip
 8000476:	e72f      	b.n	80002d8 <__udivmoddi4+0x12c>
 8000478:	4608      	mov	r0, r1
 800047a:	e706      	b.n	800028a <__udivmoddi4+0xde>
 800047c:	4631      	mov	r1, r6
 800047e:	e6e9      	b.n	8000254 <__udivmoddi4+0xa8>

08000480 <__aeabi_idiv0>:
 8000480:	4770      	bx	lr
 8000482:	bf00      	nop

08000484 <MX_ADC_Init>:
ADC_HandleTypeDef hadc;
DMA_HandleTypeDef hdma_adc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b084      	sub	sp, #16
 8000488:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800048a:	1d3b      	adds	r3, r7, #4
 800048c:	2200      	movs	r2, #0
 800048e:	601a      	str	r2, [r3, #0]
 8000490:	605a      	str	r2, [r3, #4]
 8000492:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000494:	4b81      	ldr	r3, [pc, #516]	; (800069c <MX_ADC_Init+0x218>)
 8000496:	4a82      	ldr	r2, [pc, #520]	; (80006a0 <MX_ADC_Init+0x21c>)
 8000498:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800049a:	4b80      	ldr	r3, [pc, #512]	; (800069c <MX_ADC_Init+0x218>)
 800049c:	2200      	movs	r2, #0
 800049e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80004a0:	4b7e      	ldr	r3, [pc, #504]	; (800069c <MX_ADC_Init+0x218>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80004a6:	4b7d      	ldr	r3, [pc, #500]	; (800069c <MX_ADC_Init+0x218>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80004ac:	4b7b      	ldr	r3, [pc, #492]	; (800069c <MX_ADC_Init+0x218>)
 80004ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80004b2:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80004b4:	4b79      	ldr	r3, [pc, #484]	; (800069c <MX_ADC_Init+0x218>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 80004ba:	4b78      	ldr	r3, [pc, #480]	; (800069c <MX_ADC_Init+0x218>)
 80004bc:	2200      	movs	r2, #0
 80004be:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 80004c0:	4b76      	ldr	r3, [pc, #472]	; (800069c <MX_ADC_Init+0x218>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	61da      	str	r2, [r3, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 80004c6:	4b75      	ldr	r3, [pc, #468]	; (800069c <MX_ADC_Init+0x218>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	621a      	str	r2, [r3, #32]
  hadc.Init.ContinuousConvMode = ENABLE;
 80004cc:	4b73      	ldr	r3, [pc, #460]	; (800069c <MX_ADC_Init+0x218>)
 80004ce:	2201      	movs	r2, #1
 80004d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc.Init.NbrOfConversion = 14;
 80004d4:	4b71      	ldr	r3, [pc, #452]	; (800069c <MX_ADC_Init+0x218>)
 80004d6:	220e      	movs	r2, #14
 80004d8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80004da:	4b70      	ldr	r3, [pc, #448]	; (800069c <MX_ADC_Init+0x218>)
 80004dc:	2200      	movs	r2, #0
 80004de:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80004e2:	4b6e      	ldr	r3, [pc, #440]	; (800069c <MX_ADC_Init+0x218>)
 80004e4:	2210      	movs	r2, #16
 80004e6:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80004e8:	4b6c      	ldr	r3, [pc, #432]	; (800069c <MX_ADC_Init+0x218>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.DMAContinuousRequests = ENABLE;
 80004ee:	4b6b      	ldr	r3, [pc, #428]	; (800069c <MX_ADC_Init+0x218>)
 80004f0:	2201      	movs	r2, #1
 80004f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80004f6:	4869      	ldr	r0, [pc, #420]	; (800069c <MX_ADC_Init+0x218>)
 80004f8:	f000 fbbe 	bl	8000c78 <HAL_ADC_Init>
 80004fc:	4603      	mov	r3, r0
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d001      	beq.n	8000506 <MX_ADC_Init+0x82>
  {
    Error_Handler();
 8000502:	f000 fa89 	bl	8000a18 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000506:	2300      	movs	r3, #0
 8000508:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800050a:	2301      	movs	r3, #1
 800050c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_384CYCLES;
 800050e:	2307      	movs	r3, #7
 8000510:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000512:	1d3b      	adds	r3, r7, #4
 8000514:	4619      	mov	r1, r3
 8000516:	4861      	ldr	r0, [pc, #388]	; (800069c <MX_ADC_Init+0x218>)
 8000518:	f000 ff5c 	bl	80013d4 <HAL_ADC_ConfigChannel>
 800051c:	4603      	mov	r3, r0
 800051e:	2b00      	cmp	r3, #0
 8000520:	d001      	beq.n	8000526 <MX_ADC_Init+0xa2>
  {
    Error_Handler();
 8000522:	f000 fa79 	bl	8000a18 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000526:	2301      	movs	r3, #1
 8000528:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800052a:	2302      	movs	r3, #2
 800052c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800052e:	1d3b      	adds	r3, r7, #4
 8000530:	4619      	mov	r1, r3
 8000532:	485a      	ldr	r0, [pc, #360]	; (800069c <MX_ADC_Init+0x218>)
 8000534:	f000 ff4e 	bl	80013d4 <HAL_ADC_ConfigChannel>
 8000538:	4603      	mov	r3, r0
 800053a:	2b00      	cmp	r3, #0
 800053c:	d001      	beq.n	8000542 <MX_ADC_Init+0xbe>
  {
    Error_Handler();
 800053e:	f000 fa6b 	bl	8000a18 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000542:	2302      	movs	r3, #2
 8000544:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000546:	2303      	movs	r3, #3
 8000548:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800054a:	1d3b      	adds	r3, r7, #4
 800054c:	4619      	mov	r1, r3
 800054e:	4853      	ldr	r0, [pc, #332]	; (800069c <MX_ADC_Init+0x218>)
 8000550:	f000 ff40 	bl	80013d4 <HAL_ADC_ConfigChannel>
 8000554:	4603      	mov	r3, r0
 8000556:	2b00      	cmp	r3, #0
 8000558:	d001      	beq.n	800055e <MX_ADC_Init+0xda>
  {
    Error_Handler();
 800055a:	f000 fa5d 	bl	8000a18 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800055e:	2303      	movs	r3, #3
 8000560:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000562:	2304      	movs	r3, #4
 8000564:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000566:	1d3b      	adds	r3, r7, #4
 8000568:	4619      	mov	r1, r3
 800056a:	484c      	ldr	r0, [pc, #304]	; (800069c <MX_ADC_Init+0x218>)
 800056c:	f000 ff32 	bl	80013d4 <HAL_ADC_ConfigChannel>
 8000570:	4603      	mov	r3, r0
 8000572:	2b00      	cmp	r3, #0
 8000574:	d001      	beq.n	800057a <MX_ADC_Init+0xf6>
  {
    Error_Handler();
 8000576:	f000 fa4f 	bl	8000a18 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800057a:	2306      	movs	r3, #6
 800057c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800057e:	2305      	movs	r3, #5
 8000580:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000582:	1d3b      	adds	r3, r7, #4
 8000584:	4619      	mov	r1, r3
 8000586:	4845      	ldr	r0, [pc, #276]	; (800069c <MX_ADC_Init+0x218>)
 8000588:	f000 ff24 	bl	80013d4 <HAL_ADC_ConfigChannel>
 800058c:	4603      	mov	r3, r0
 800058e:	2b00      	cmp	r3, #0
 8000590:	d001      	beq.n	8000596 <MX_ADC_Init+0x112>
  {
    Error_Handler();
 8000592:	f000 fa41 	bl	8000a18 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000596:	2307      	movs	r3, #7
 8000598:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800059a:	2306      	movs	r3, #6
 800059c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800059e:	1d3b      	adds	r3, r7, #4
 80005a0:	4619      	mov	r1, r3
 80005a2:	483e      	ldr	r0, [pc, #248]	; (800069c <MX_ADC_Init+0x218>)
 80005a4:	f000 ff16 	bl	80013d4 <HAL_ADC_ConfigChannel>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d001      	beq.n	80005b2 <MX_ADC_Init+0x12e>
  {
    Error_Handler();
 80005ae:	f000 fa33 	bl	8000a18 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80005b2:	2308      	movs	r3, #8
 80005b4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80005b6:	2307      	movs	r3, #7
 80005b8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80005ba:	1d3b      	adds	r3, r7, #4
 80005bc:	4619      	mov	r1, r3
 80005be:	4837      	ldr	r0, [pc, #220]	; (800069c <MX_ADC_Init+0x218>)
 80005c0:	f000 ff08 	bl	80013d4 <HAL_ADC_ConfigChannel>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <MX_ADC_Init+0x14a>
  {
    Error_Handler();
 80005ca:	f000 fa25 	bl	8000a18 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80005ce:	2309      	movs	r3, #9
 80005d0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 80005d2:	2308      	movs	r3, #8
 80005d4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80005d6:	1d3b      	adds	r3, r7, #4
 80005d8:	4619      	mov	r1, r3
 80005da:	4830      	ldr	r0, [pc, #192]	; (800069c <MX_ADC_Init+0x218>)
 80005dc:	f000 fefa 	bl	80013d4 <HAL_ADC_ConfigChannel>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d001      	beq.n	80005ea <MX_ADC_Init+0x166>
  {
    Error_Handler();
 80005e6:	f000 fa17 	bl	8000a18 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_18;
 80005ea:	2312      	movs	r3, #18
 80005ec:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 80005ee:	2309      	movs	r3, #9
 80005f0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80005f2:	1d3b      	adds	r3, r7, #4
 80005f4:	4619      	mov	r1, r3
 80005f6:	4829      	ldr	r0, [pc, #164]	; (800069c <MX_ADC_Init+0x218>)
 80005f8:	f000 feec 	bl	80013d4 <HAL_ADC_ConfigChannel>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <MX_ADC_Init+0x182>
  {
    Error_Handler();
 8000602:	f000 fa09 	bl	8000a18 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_19;
 8000606:	2313      	movs	r3, #19
 8000608:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 800060a:	230a      	movs	r3, #10
 800060c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800060e:	1d3b      	adds	r3, r7, #4
 8000610:	4619      	mov	r1, r3
 8000612:	4822      	ldr	r0, [pc, #136]	; (800069c <MX_ADC_Init+0x218>)
 8000614:	f000 fede 	bl	80013d4 <HAL_ADC_ConfigChannel>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <MX_ADC_Init+0x19e>
  {
    Error_Handler();
 800061e:	f000 f9fb 	bl	8000a18 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_20;
 8000622:	2314      	movs	r3, #20
 8000624:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 8000626:	230b      	movs	r3, #11
 8000628:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800062a:	1d3b      	adds	r3, r7, #4
 800062c:	4619      	mov	r1, r3
 800062e:	481b      	ldr	r0, [pc, #108]	; (800069c <MX_ADC_Init+0x218>)
 8000630:	f000 fed0 	bl	80013d4 <HAL_ADC_ConfigChannel>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <MX_ADC_Init+0x1ba>
  {
    Error_Handler();
 800063a:	f000 f9ed 	bl	8000a18 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_21;
 800063e:	2315      	movs	r3, #21
 8000640:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_12;
 8000642:	230c      	movs	r3, #12
 8000644:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000646:	1d3b      	adds	r3, r7, #4
 8000648:	4619      	mov	r1, r3
 800064a:	4814      	ldr	r0, [pc, #80]	; (800069c <MX_ADC_Init+0x218>)
 800064c:	f000 fec2 	bl	80013d4 <HAL_ADC_ConfigChannel>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <MX_ADC_Init+0x1d6>
  {
    Error_Handler();
 8000656:	f000 f9df 	bl	8000a18 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800065a:	2310      	movs	r3, #16
 800065c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_13;
 800065e:	230d      	movs	r3, #13
 8000660:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000662:	1d3b      	adds	r3, r7, #4
 8000664:	4619      	mov	r1, r3
 8000666:	480d      	ldr	r0, [pc, #52]	; (800069c <MX_ADC_Init+0x218>)
 8000668:	f000 feb4 	bl	80013d4 <HAL_ADC_ConfigChannel>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <MX_ADC_Init+0x1f2>
  {
    Error_Handler();
 8000672:	f000 f9d1 	bl	8000a18 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8000676:	2311      	movs	r3, #17
 8000678:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_14;
 800067a:	230e      	movs	r3, #14
 800067c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800067e:	1d3b      	adds	r3, r7, #4
 8000680:	4619      	mov	r1, r3
 8000682:	4806      	ldr	r0, [pc, #24]	; (800069c <MX_ADC_Init+0x218>)
 8000684:	f000 fea6 	bl	80013d4 <HAL_ADC_ConfigChannel>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <MX_ADC_Init+0x20e>
  {
    Error_Handler();
 800068e:	f000 f9c3 	bl	8000a18 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000692:	bf00      	nop
 8000694:	3710      	adds	r7, #16
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	2000019c 	.word	0x2000019c
 80006a0:	40012400 	.word	0x40012400

080006a4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b08a      	sub	sp, #40	; 0x28
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ac:	f107 0314 	add.w	r3, r7, #20
 80006b0:	2200      	movs	r2, #0
 80006b2:	601a      	str	r2, [r3, #0]
 80006b4:	605a      	str	r2, [r3, #4]
 80006b6:	609a      	str	r2, [r3, #8]
 80006b8:	60da      	str	r2, [r3, #12]
 80006ba:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a35      	ldr	r2, [pc, #212]	; (8000798 <HAL_ADC_MspInit+0xf4>)
 80006c2:	4293      	cmp	r3, r2
 80006c4:	d164      	bne.n	8000790 <HAL_ADC_MspInit+0xec>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80006c6:	4b35      	ldr	r3, [pc, #212]	; (800079c <HAL_ADC_MspInit+0xf8>)
 80006c8:	6a1b      	ldr	r3, [r3, #32]
 80006ca:	4a34      	ldr	r2, [pc, #208]	; (800079c <HAL_ADC_MspInit+0xf8>)
 80006cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80006d0:	6213      	str	r3, [r2, #32]
 80006d2:	4b32      	ldr	r3, [pc, #200]	; (800079c <HAL_ADC_MspInit+0xf8>)
 80006d4:	6a1b      	ldr	r3, [r3, #32]
 80006d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80006da:	613b      	str	r3, [r7, #16]
 80006dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006de:	4b2f      	ldr	r3, [pc, #188]	; (800079c <HAL_ADC_MspInit+0xf8>)
 80006e0:	69db      	ldr	r3, [r3, #28]
 80006e2:	4a2e      	ldr	r2, [pc, #184]	; (800079c <HAL_ADC_MspInit+0xf8>)
 80006e4:	f043 0301 	orr.w	r3, r3, #1
 80006e8:	61d3      	str	r3, [r2, #28]
 80006ea:	4b2c      	ldr	r3, [pc, #176]	; (800079c <HAL_ADC_MspInit+0xf8>)
 80006ec:	69db      	ldr	r3, [r3, #28]
 80006ee:	f003 0301 	and.w	r3, r3, #1
 80006f2:	60fb      	str	r3, [r7, #12]
 80006f4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006f6:	4b29      	ldr	r3, [pc, #164]	; (800079c <HAL_ADC_MspInit+0xf8>)
 80006f8:	69db      	ldr	r3, [r3, #28]
 80006fa:	4a28      	ldr	r2, [pc, #160]	; (800079c <HAL_ADC_MspInit+0xf8>)
 80006fc:	f043 0302 	orr.w	r3, r3, #2
 8000700:	61d3      	str	r3, [r2, #28]
 8000702:	4b26      	ldr	r3, [pc, #152]	; (800079c <HAL_ADC_MspInit+0xf8>)
 8000704:	69db      	ldr	r3, [r3, #28]
 8000706:	f003 0302 	and.w	r3, r3, #2
 800070a:	60bb      	str	r3, [r7, #8]
 800070c:	68bb      	ldr	r3, [r7, #8]
    PB12     ------> ADC_IN18
    PB13     ------> ADC_IN19
    PB14     ------> ADC_IN20
    PB15     ------> ADC_IN21
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800070e:	23cf      	movs	r3, #207	; 0xcf
 8000710:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000712:	2303      	movs	r3, #3
 8000714:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000716:	2300      	movs	r3, #0
 8000718:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800071a:	f107 0314 	add.w	r3, r7, #20
 800071e:	4619      	mov	r1, r3
 8000720:	481f      	ldr	r0, [pc, #124]	; (80007a0 <HAL_ADC_MspInit+0xfc>)
 8000722:	f001 ff13 	bl	800254c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_12|GPIO_PIN_13
 8000726:	f24f 0303 	movw	r3, #61443	; 0xf003
 800072a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800072c:	2303      	movs	r3, #3
 800072e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000730:	2300      	movs	r3, #0
 8000732:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000734:	f107 0314 	add.w	r3, r7, #20
 8000738:	4619      	mov	r1, r3
 800073a:	481a      	ldr	r0, [pc, #104]	; (80007a4 <HAL_ADC_MspInit+0x100>)
 800073c:	f001 ff06 	bl	800254c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8000740:	4b19      	ldr	r3, [pc, #100]	; (80007a8 <HAL_ADC_MspInit+0x104>)
 8000742:	4a1a      	ldr	r2, [pc, #104]	; (80007ac <HAL_ADC_MspInit+0x108>)
 8000744:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000746:	4b18      	ldr	r3, [pc, #96]	; (80007a8 <HAL_ADC_MspInit+0x104>)
 8000748:	2200      	movs	r2, #0
 800074a:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 800074c:	4b16      	ldr	r3, [pc, #88]	; (80007a8 <HAL_ADC_MspInit+0x104>)
 800074e:	2200      	movs	r2, #0
 8000750:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8000752:	4b15      	ldr	r3, [pc, #84]	; (80007a8 <HAL_ADC_MspInit+0x104>)
 8000754:	2280      	movs	r2, #128	; 0x80
 8000756:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000758:	4b13      	ldr	r3, [pc, #76]	; (80007a8 <HAL_ADC_MspInit+0x104>)
 800075a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800075e:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000760:	4b11      	ldr	r3, [pc, #68]	; (80007a8 <HAL_ADC_MspInit+0x104>)
 8000762:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000766:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_NORMAL;
 8000768:	4b0f      	ldr	r3, [pc, #60]	; (80007a8 <HAL_ADC_MspInit+0x104>)
 800076a:	2200      	movs	r2, #0
 800076c:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 800076e:	4b0e      	ldr	r3, [pc, #56]	; (80007a8 <HAL_ADC_MspInit+0x104>)
 8000770:	2200      	movs	r2, #0
 8000772:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8000774:	480c      	ldr	r0, [pc, #48]	; (80007a8 <HAL_ADC_MspInit+0x104>)
 8000776:	f001 fc61 	bl	800203c <HAL_DMA_Init>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <HAL_ADC_MspInit+0xe0>
    {
      Error_Handler();
 8000780:	f000 f94a 	bl	8000a18 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc);
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	4a08      	ldr	r2, [pc, #32]	; (80007a8 <HAL_ADC_MspInit+0x104>)
 8000788:	645a      	str	r2, [r3, #68]	; 0x44
 800078a:	4a07      	ldr	r2, [pc, #28]	; (80007a8 <HAL_ADC_MspInit+0x104>)
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000790:	bf00      	nop
 8000792:	3728      	adds	r7, #40	; 0x28
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	40012400 	.word	0x40012400
 800079c:	40023800 	.word	0x40023800
 80007a0:	40020000 	.word	0x40020000
 80007a4:	40020400 	.word	0x40020400
 80007a8:	200001f0 	.word	0x200001f0
 80007ac:	40026008 	.word	0x40026008

080007b0 <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80007b6:	463b      	mov	r3, r7
 80007b8:	2200      	movs	r2, #0
 80007ba:	601a      	str	r2, [r3, #0]
 80007bc:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80007be:	4b14      	ldr	r3, [pc, #80]	; (8000810 <MX_DAC_Init+0x60>)
 80007c0:	4a14      	ldr	r2, [pc, #80]	; (8000814 <MX_DAC_Init+0x64>)
 80007c2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80007c4:	4812      	ldr	r0, [pc, #72]	; (8000810 <MX_DAC_Init+0x60>)
 80007c6:	f001 fac3 	bl	8001d50 <HAL_DAC_Init>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80007d0:	f000 f922 	bl	8000a18 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80007d4:	2300      	movs	r3, #0
 80007d6:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80007d8:	2300      	movs	r3, #0
 80007da:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80007dc:	463b      	mov	r3, r7
 80007de:	2200      	movs	r2, #0
 80007e0:	4619      	mov	r1, r3
 80007e2:	480b      	ldr	r0, [pc, #44]	; (8000810 <MX_DAC_Init+0x60>)
 80007e4:	f001 fb94 	bl	8001f10 <HAL_DAC_ConfigChannel>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80007ee:	f000 f913 	bl	8000a18 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80007f2:	463b      	mov	r3, r7
 80007f4:	2210      	movs	r2, #16
 80007f6:	4619      	mov	r1, r3
 80007f8:	4805      	ldr	r0, [pc, #20]	; (8000810 <MX_DAC_Init+0x60>)
 80007fa:	f001 fb89 	bl	8001f10 <HAL_DAC_ConfigChannel>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <MX_DAC_Init+0x58>
  {
    Error_Handler();
 8000804:	f000 f908 	bl	8000a18 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000808:	bf00      	nop
 800080a:	3708      	adds	r7, #8
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	20000234 	.word	0x20000234
 8000814:	40007400 	.word	0x40007400

08000818 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b08a      	sub	sp, #40	; 0x28
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000820:	f107 0314 	add.w	r3, r7, #20
 8000824:	2200      	movs	r2, #0
 8000826:	601a      	str	r2, [r3, #0]
 8000828:	605a      	str	r2, [r3, #4]
 800082a:	609a      	str	r2, [r3, #8]
 800082c:	60da      	str	r2, [r3, #12]
 800082e:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	4a15      	ldr	r2, [pc, #84]	; (800088c <HAL_DAC_MspInit+0x74>)
 8000836:	4293      	cmp	r3, r2
 8000838:	d123      	bne.n	8000882 <HAL_DAC_MspInit+0x6a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800083a:	4b15      	ldr	r3, [pc, #84]	; (8000890 <HAL_DAC_MspInit+0x78>)
 800083c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800083e:	4a14      	ldr	r2, [pc, #80]	; (8000890 <HAL_DAC_MspInit+0x78>)
 8000840:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000844:	6253      	str	r3, [r2, #36]	; 0x24
 8000846:	4b12      	ldr	r3, [pc, #72]	; (8000890 <HAL_DAC_MspInit+0x78>)
 8000848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800084a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800084e:	613b      	str	r3, [r7, #16]
 8000850:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000852:	4b0f      	ldr	r3, [pc, #60]	; (8000890 <HAL_DAC_MspInit+0x78>)
 8000854:	69db      	ldr	r3, [r3, #28]
 8000856:	4a0e      	ldr	r2, [pc, #56]	; (8000890 <HAL_DAC_MspInit+0x78>)
 8000858:	f043 0301 	orr.w	r3, r3, #1
 800085c:	61d3      	str	r3, [r2, #28]
 800085e:	4b0c      	ldr	r3, [pc, #48]	; (8000890 <HAL_DAC_MspInit+0x78>)
 8000860:	69db      	ldr	r3, [r3, #28]
 8000862:	f003 0301 	and.w	r3, r3, #1
 8000866:	60fb      	str	r3, [r7, #12]
 8000868:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800086a:	2330      	movs	r3, #48	; 0x30
 800086c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800086e:	2303      	movs	r3, #3
 8000870:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000872:	2300      	movs	r3, #0
 8000874:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000876:	f107 0314 	add.w	r3, r7, #20
 800087a:	4619      	mov	r1, r3
 800087c:	4805      	ldr	r0, [pc, #20]	; (8000894 <HAL_DAC_MspInit+0x7c>)
 800087e:	f001 fe65 	bl	800254c <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 8000882:	bf00      	nop
 8000884:	3728      	adds	r7, #40	; 0x28
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	40007400 	.word	0x40007400
 8000890:	40023800 	.word	0x40023800
 8000894:	40020000 	.word	0x40020000

08000898 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800089e:	4b0c      	ldr	r3, [pc, #48]	; (80008d0 <MX_DMA_Init+0x38>)
 80008a0:	69db      	ldr	r3, [r3, #28]
 80008a2:	4a0b      	ldr	r2, [pc, #44]	; (80008d0 <MX_DMA_Init+0x38>)
 80008a4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80008a8:	61d3      	str	r3, [r2, #28]
 80008aa:	4b09      	ldr	r3, [pc, #36]	; (80008d0 <MX_DMA_Init+0x38>)
 80008ac:	69db      	ldr	r3, [r3, #28]
 80008ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80008b2:	607b      	str	r3, [r7, #4]
 80008b4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80008b6:	2200      	movs	r2, #0
 80008b8:	2100      	movs	r1, #0
 80008ba:	200b      	movs	r0, #11
 80008bc:	f001 f9f8 	bl	8001cb0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80008c0:	200b      	movs	r0, #11
 80008c2:	f001 fa21 	bl	8001d08 <HAL_NVIC_EnableIRQ>

}
 80008c6:	bf00      	nop
 80008c8:	3708      	adds	r7, #8
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	40023800 	.word	0x40023800

080008d4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b088      	sub	sp, #32
 80008d8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008da:	f107 030c 	add.w	r3, r7, #12
 80008de:	2200      	movs	r2, #0
 80008e0:	601a      	str	r2, [r3, #0]
 80008e2:	605a      	str	r2, [r3, #4]
 80008e4:	609a      	str	r2, [r3, #8]
 80008e6:	60da      	str	r2, [r3, #12]
 80008e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ea:	4b17      	ldr	r3, [pc, #92]	; (8000948 <MX_GPIO_Init+0x74>)
 80008ec:	69db      	ldr	r3, [r3, #28]
 80008ee:	4a16      	ldr	r2, [pc, #88]	; (8000948 <MX_GPIO_Init+0x74>)
 80008f0:	f043 0301 	orr.w	r3, r3, #1
 80008f4:	61d3      	str	r3, [r2, #28]
 80008f6:	4b14      	ldr	r3, [pc, #80]	; (8000948 <MX_GPIO_Init+0x74>)
 80008f8:	69db      	ldr	r3, [r3, #28]
 80008fa:	f003 0301 	and.w	r3, r3, #1
 80008fe:	60bb      	str	r3, [r7, #8]
 8000900:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000902:	4b11      	ldr	r3, [pc, #68]	; (8000948 <MX_GPIO_Init+0x74>)
 8000904:	69db      	ldr	r3, [r3, #28]
 8000906:	4a10      	ldr	r2, [pc, #64]	; (8000948 <MX_GPIO_Init+0x74>)
 8000908:	f043 0302 	orr.w	r3, r3, #2
 800090c:	61d3      	str	r3, [r2, #28]
 800090e:	4b0e      	ldr	r3, [pc, #56]	; (8000948 <MX_GPIO_Init+0x74>)
 8000910:	69db      	ldr	r3, [r3, #28]
 8000912:	f003 0302 	and.w	r3, r3, #2
 8000916:	607b      	str	r3, [r7, #4]
 8000918:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, L4_Pin|L3_Pin|L2_Pin|L1_Pin, GPIO_PIN_RESET);
 800091a:	2200      	movs	r2, #0
 800091c:	21f0      	movs	r1, #240	; 0xf0
 800091e:	480b      	ldr	r0, [pc, #44]	; (800094c <MX_GPIO_Init+0x78>)
 8000920:	f002 f860 	bl	80029e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = L4_Pin|L3_Pin|L2_Pin|L1_Pin;
 8000924:	23f0      	movs	r3, #240	; 0xf0
 8000926:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000928:	2301      	movs	r3, #1
 800092a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	2300      	movs	r3, #0
 800092e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000930:	2300      	movs	r3, #0
 8000932:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000934:	f107 030c 	add.w	r3, r7, #12
 8000938:	4619      	mov	r1, r3
 800093a:	4804      	ldr	r0, [pc, #16]	; (800094c <MX_GPIO_Init+0x78>)
 800093c:	f001 fe06 	bl	800254c <HAL_GPIO_Init>

}
 8000940:	bf00      	nop
 8000942:	3720      	adds	r7, #32
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	40023800 	.word	0x40023800
 800094c:	40020400 	.word	0x40020400

08000950 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000954:	f000 f8ff 	bl	8000b56 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000958:	f000 f810 	bl	800097c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  MX_DMA_Init();
 800095c:	f7ff ff9c 	bl	8000898 <MX_DMA_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000960:	f7ff ffb8 	bl	80008d4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000964:	f7ff ff98 	bl	8000898 <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 8000968:	f008 fb14 	bl	8008f94 <MX_USB_DEVICE_Init>
  MX_DAC_Init();
 800096c:	f7ff ff20 	bl	80007b0 <MX_DAC_Init>
  MX_ADC_Init();
 8000970:	f7ff fd88 	bl	8000484 <MX_ADC_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  kernel_main();
 8000974:	f009 f9dc 	bl	8009d30 <kernel_main>
 8000978:	e7fc      	b.n	8000974 <main+0x24>
	...

0800097c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b092      	sub	sp, #72	; 0x48
 8000980:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000982:	f107 0314 	add.w	r3, r7, #20
 8000986:	2234      	movs	r2, #52	; 0x34
 8000988:	2100      	movs	r1, #0
 800098a:	4618      	mov	r0, r3
 800098c:	f009 fbc0 	bl	800a110 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000990:	463b      	mov	r3, r7
 8000992:	2200      	movs	r2, #0
 8000994:	601a      	str	r2, [r3, #0]
 8000996:	605a      	str	r2, [r3, #4]
 8000998:	609a      	str	r2, [r3, #8]
 800099a:	60da      	str	r2, [r3, #12]
 800099c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800099e:	4b1d      	ldr	r3, [pc, #116]	; (8000a14 <SystemClock_Config+0x98>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 80009a6:	4a1b      	ldr	r2, [pc, #108]	; (8000a14 <SystemClock_Config+0x98>)
 80009a8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80009ac:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009ae:	2302      	movs	r3, #2
 80009b0:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009b2:	2301      	movs	r3, #1
 80009b4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009b6:	2310      	movs	r3, #16
 80009b8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009ba:	2302      	movs	r3, #2
 80009bc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009be:	2300      	movs	r3, #0
 80009c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80009c2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80009c6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 80009c8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80009cc:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009ce:	f107 0314 	add.w	r3, r7, #20
 80009d2:	4618      	mov	r0, r3
 80009d4:	f003 fd1e 	bl	8004414 <HAL_RCC_OscConfig>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80009de:	f000 f81b 	bl	8000a18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009e2:	230f      	movs	r3, #15
 80009e4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009e6:	2303      	movs	r3, #3
 80009e8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009ea:	2300      	movs	r3, #0
 80009ec:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009ee:	2300      	movs	r3, #0
 80009f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009f2:	2300      	movs	r3, #0
 80009f4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80009f6:	463b      	mov	r3, r7
 80009f8:	2101      	movs	r1, #1
 80009fa:	4618      	mov	r0, r3
 80009fc:	f004 f98a 	bl	8004d14 <HAL_RCC_ClockConfig>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000a06:	f000 f807 	bl	8000a18 <Error_Handler>
  }
}
 8000a0a:	bf00      	nop
 8000a0c:	3748      	adds	r7, #72	; 0x48
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	40007000 	.word	0x40007000

08000a18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a1c:	b672      	cpsid	i
}
 8000a1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a20:	e7fe      	b.n	8000a20 <Error_Handler+0x8>

08000a22 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8000a22:	b480      	push	{r7}
 8000a24:	b083      	sub	sp, #12
 8000a26:	af00      	add	r7, sp, #0
 8000a28:	6078      	str	r0, [r7, #4]
 8000a2a:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8000a2c:	bf00      	nop
 8000a2e:	370c      	adds	r7, #12
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bc80      	pop	{r7}
 8000a34:	4770      	bx	lr
	...

08000a38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b085      	sub	sp, #20
 8000a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8000a3e:	4b14      	ldr	r3, [pc, #80]	; (8000a90 <HAL_MspInit+0x58>)
 8000a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a42:	4a13      	ldr	r2, [pc, #76]	; (8000a90 <HAL_MspInit+0x58>)
 8000a44:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a48:	6253      	str	r3, [r2, #36]	; 0x24
 8000a4a:	4b11      	ldr	r3, [pc, #68]	; (8000a90 <HAL_MspInit+0x58>)
 8000a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a4e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000a52:	60fb      	str	r3, [r7, #12]
 8000a54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a56:	4b0e      	ldr	r3, [pc, #56]	; (8000a90 <HAL_MspInit+0x58>)
 8000a58:	6a1b      	ldr	r3, [r3, #32]
 8000a5a:	4a0d      	ldr	r2, [pc, #52]	; (8000a90 <HAL_MspInit+0x58>)
 8000a5c:	f043 0301 	orr.w	r3, r3, #1
 8000a60:	6213      	str	r3, [r2, #32]
 8000a62:	4b0b      	ldr	r3, [pc, #44]	; (8000a90 <HAL_MspInit+0x58>)
 8000a64:	6a1b      	ldr	r3, [r3, #32]
 8000a66:	f003 0301 	and.w	r3, r3, #1
 8000a6a:	60bb      	str	r3, [r7, #8]
 8000a6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a6e:	4b08      	ldr	r3, [pc, #32]	; (8000a90 <HAL_MspInit+0x58>)
 8000a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a72:	4a07      	ldr	r2, [pc, #28]	; (8000a90 <HAL_MspInit+0x58>)
 8000a74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a78:	6253      	str	r3, [r2, #36]	; 0x24
 8000a7a:	4b05      	ldr	r3, [pc, #20]	; (8000a90 <HAL_MspInit+0x58>)
 8000a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a82:	607b      	str	r3, [r7, #4]
 8000a84:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a86:	bf00      	nop
 8000a88:	3714      	adds	r7, #20
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bc80      	pop	{r7}
 8000a8e:	4770      	bx	lr
 8000a90:	40023800 	.word	0x40023800

08000a94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a98:	e7fe      	b.n	8000a98 <NMI_Handler+0x4>

08000a9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a9a:	b480      	push	{r7}
 8000a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a9e:	e7fe      	b.n	8000a9e <HardFault_Handler+0x4>

08000aa0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aa4:	e7fe      	b.n	8000aa4 <MemManage_Handler+0x4>

08000aa6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aa6:	b480      	push	{r7}
 8000aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aaa:	e7fe      	b.n	8000aaa <BusFault_Handler+0x4>

08000aac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ab0:	e7fe      	b.n	8000ab0 <UsageFault_Handler+0x4>

08000ab2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ab2:	b480      	push	{r7}
 8000ab4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ab6:	bf00      	nop
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bc80      	pop	{r7}
 8000abc:	4770      	bx	lr

08000abe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000abe:	b480      	push	{r7}
 8000ac0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ac2:	bf00      	nop
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bc80      	pop	{r7}
 8000ac8:	4770      	bx	lr

08000aca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000aca:	b580      	push	{r7, lr}
 8000acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ace:	f000 f895 	bl	8000bfc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ad2:	bf00      	nop
 8000ad4:	bd80      	pop	{r7, pc}
	...

08000ad8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8000adc:	4802      	ldr	r0, [pc, #8]	; (8000ae8 <DMA1_Channel1_IRQHandler+0x10>)
 8000ade:	f001 fc56 	bl	800238e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000ae2:	bf00      	nop
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	200001f0 	.word	0x200001f0

08000aec <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt.
  */
void USB_LP_IRQHandler(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000af0:	4802      	ldr	r0, [pc, #8]	; (8000afc <USB_LP_IRQHandler+0x10>)
 8000af2:	f002 f8af 	bl	8002c54 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8000af6:	bf00      	nop
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	20000ebc 	.word	0x20000ebc

08000b00 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b04:	bf00      	nop
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bc80      	pop	{r7}
 8000b0a:	4770      	bx	lr

08000b0c <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b0c:	f7ff fff8 	bl	8000b00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b10:	480b      	ldr	r0, [pc, #44]	; (8000b40 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000b12:	490c      	ldr	r1, [pc, #48]	; (8000b44 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000b14:	4a0c      	ldr	r2, [pc, #48]	; (8000b48 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000b16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b18:	e002      	b.n	8000b20 <LoopCopyDataInit>

08000b1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b1e:	3304      	adds	r3, #4

08000b20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b24:	d3f9      	bcc.n	8000b1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b26:	4a09      	ldr	r2, [pc, #36]	; (8000b4c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000b28:	4c09      	ldr	r4, [pc, #36]	; (8000b50 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b2c:	e001      	b.n	8000b32 <LoopFillZerobss>

08000b2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b30:	3204      	adds	r2, #4

08000b32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b34:	d3fb      	bcc.n	8000b2e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b36:	f009 fac7 	bl	800a0c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b3a:	f7ff ff09 	bl	8000950 <main>
  bx lr
 8000b3e:	4770      	bx	lr
  ldr r0, =_sdata
 8000b40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b44:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 8000b48:	0800a33c 	.word	0x0800a33c
  ldr r2, =_sbss
 8000b4c:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 8000b50:	200016a8 	.word	0x200016a8

08000b54 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b54:	e7fe      	b.n	8000b54 <ADC1_IRQHandler>

08000b56 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b56:	b580      	push	{r7, lr}
 8000b58:	b082      	sub	sp, #8
 8000b5a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b60:	2003      	movs	r0, #3
 8000b62:	f001 f885 	bl	8001c70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b66:	200f      	movs	r0, #15
 8000b68:	f000 f80e 	bl	8000b88 <HAL_InitTick>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d002      	beq.n	8000b78 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b72:	2301      	movs	r3, #1
 8000b74:	71fb      	strb	r3, [r7, #7]
 8000b76:	e001      	b.n	8000b7c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b78:	f7ff ff5e 	bl	8000a38 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b7c:	79fb      	ldrb	r3, [r7, #7]
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	3708      	adds	r7, #8
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
	...

08000b88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b084      	sub	sp, #16
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b90:	2300      	movs	r3, #0
 8000b92:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000b94:	4b16      	ldr	r3, [pc, #88]	; (8000bf0 <HAL_InitTick+0x68>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d022      	beq.n	8000be2 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000b9c:	4b15      	ldr	r3, [pc, #84]	; (8000bf4 <HAL_InitTick+0x6c>)
 8000b9e:	681a      	ldr	r2, [r3, #0]
 8000ba0:	4b13      	ldr	r3, [pc, #76]	; (8000bf0 <HAL_InitTick+0x68>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000ba8:	fbb1 f3f3 	udiv	r3, r1, r3
 8000bac:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f001 f8c1 	bl	8001d38 <HAL_SYSTICK_Config>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d10f      	bne.n	8000bdc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	2b0f      	cmp	r3, #15
 8000bc0:	d809      	bhi.n	8000bd6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	6879      	ldr	r1, [r7, #4]
 8000bc6:	f04f 30ff 	mov.w	r0, #4294967295
 8000bca:	f001 f871 	bl	8001cb0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bce:	4a0a      	ldr	r2, [pc, #40]	; (8000bf8 <HAL_InitTick+0x70>)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	6013      	str	r3, [r2, #0]
 8000bd4:	e007      	b.n	8000be6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	73fb      	strb	r3, [r7, #15]
 8000bda:	e004      	b.n	8000be6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	73fb      	strb	r3, [r7, #15]
 8000be0:	e001      	b.n	8000be6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000be2:	2301      	movs	r3, #1
 8000be4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000be6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000be8:	4618      	mov	r0, r3
 8000bea:	3710      	adds	r7, #16
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	20000008 	.word	0x20000008
 8000bf4:	20000000 	.word	0x20000000
 8000bf8:	20000004 	.word	0x20000004

08000bfc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c00:	4b05      	ldr	r3, [pc, #20]	; (8000c18 <HAL_IncTick+0x1c>)
 8000c02:	681a      	ldr	r2, [r3, #0]
 8000c04:	4b05      	ldr	r3, [pc, #20]	; (8000c1c <HAL_IncTick+0x20>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4413      	add	r3, r2
 8000c0a:	4a03      	ldr	r2, [pc, #12]	; (8000c18 <HAL_IncTick+0x1c>)
 8000c0c:	6013      	str	r3, [r2, #0]
}
 8000c0e:	bf00      	nop
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bc80      	pop	{r7}
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	20000248 	.word	0x20000248
 8000c1c:	20000008 	.word	0x20000008

08000c20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  return uwTick;
 8000c24:	4b02      	ldr	r3, [pc, #8]	; (8000c30 <HAL_GetTick+0x10>)
 8000c26:	681b      	ldr	r3, [r3, #0]
}
 8000c28:	4618      	mov	r0, r3
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bc80      	pop	{r7}
 8000c2e:	4770      	bx	lr
 8000c30:	20000248 	.word	0x20000248

08000c34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b084      	sub	sp, #16
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c3c:	f7ff fff0 	bl	8000c20 <HAL_GetTick>
 8000c40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c4c:	d004      	beq.n	8000c58 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c4e:	4b09      	ldr	r3, [pc, #36]	; (8000c74 <HAL_Delay+0x40>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	68fa      	ldr	r2, [r7, #12]
 8000c54:	4413      	add	r3, r2
 8000c56:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c58:	bf00      	nop
 8000c5a:	f7ff ffe1 	bl	8000c20 <HAL_GetTick>
 8000c5e:	4602      	mov	r2, r0
 8000c60:	68bb      	ldr	r3, [r7, #8]
 8000c62:	1ad3      	subs	r3, r2, r3
 8000c64:	68fa      	ldr	r2, [r7, #12]
 8000c66:	429a      	cmp	r2, r3
 8000c68:	d8f7      	bhi.n	8000c5a <HAL_Delay+0x26>
  {
  }
}
 8000c6a:	bf00      	nop
 8000c6c:	bf00      	nop
 8000c6e:	3710      	adds	r7, #16
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	20000008 	.word	0x20000008

08000c78 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b08e      	sub	sp, #56	; 0x38
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c80:	2300      	movs	r3, #0
 8000c82:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t tmp_cr1 = 0;
 8000c86:	2300      	movs	r3, #0
 8000c88:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tmp_cr2 = 0;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d101      	bne.n	8000c98 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000c94:	2301      	movs	r3, #1
 8000c96:	e28a      	b.n	80011ae <HAL_ADC_Init+0x536>
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a92      	ldr	r2, [pc, #584]	; (8000ee8 <HAL_ADC_Init+0x270>)
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	d004      	beq.n	8000cac <HAL_ADC_Init+0x34>
 8000ca2:	f240 11b3 	movw	r1, #435	; 0x1b3
 8000ca6:	4891      	ldr	r0, [pc, #580]	; (8000eec <HAL_ADC_Init+0x274>)
 8000ca8:	f7ff febb 	bl	8000a22 <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d00e      	beq.n	8000cd2 <HAL_ADC_Init+0x5a>
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	685b      	ldr	r3, [r3, #4]
 8000cb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000cbc:	d009      	beq.n	8000cd2 <HAL_ADC_Init+0x5a>
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	685b      	ldr	r3, [r3, #4]
 8000cc2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000cc6:	d004      	beq.n	8000cd2 <HAL_ADC_Init+0x5a>
 8000cc8:	f44f 71da 	mov.w	r1, #436	; 0x1b4
 8000ccc:	4887      	ldr	r0, [pc, #540]	; (8000eec <HAL_ADC_Init+0x274>)
 8000cce:	f7ff fea8 	bl	8000a22 <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	689b      	ldr	r3, [r3, #8]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d013      	beq.n	8000d02 <HAL_ADC_Init+0x8a>
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	689b      	ldr	r3, [r3, #8]
 8000cde:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ce2:	d00e      	beq.n	8000d02 <HAL_ADC_Init+0x8a>
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	689b      	ldr	r3, [r3, #8]
 8000ce8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000cec:	d009      	beq.n	8000d02 <HAL_ADC_Init+0x8a>
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	689b      	ldr	r3, [r3, #8]
 8000cf2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8000cf6:	d004      	beq.n	8000d02 <HAL_ADC_Init+0x8a>
 8000cf8:	f240 11b5 	movw	r1, #437	; 0x1b5
 8000cfc:	487b      	ldr	r0, [pc, #492]	; (8000eec <HAL_ADC_Init+0x274>)
 8000cfe:	f7ff fe90 	bl	8000a22 <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign)); 
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	68db      	ldr	r3, [r3, #12]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d009      	beq.n	8000d1e <HAL_ADC_Init+0xa6>
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	68db      	ldr	r3, [r3, #12]
 8000d0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000d12:	d004      	beq.n	8000d1e <HAL_ADC_Init+0xa6>
 8000d14:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 8000d18:	4874      	ldr	r0, [pc, #464]	; (8000eec <HAL_ADC_Init+0x274>)
 8000d1a:	f7ff fe82 	bl	8000a22 <assert_failed>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	691b      	ldr	r3, [r3, #16]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d009      	beq.n	8000d3a <HAL_ADC_Init+0xc2>
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	691b      	ldr	r3, [r3, #16]
 8000d2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000d2e:	d004      	beq.n	8000d3a <HAL_ADC_Init+0xc2>
 8000d30:	f240 11b7 	movw	r1, #439	; 0x1b7
 8000d34:	486d      	ldr	r0, [pc, #436]	; (8000eec <HAL_ADC_Init+0x274>)
 8000d36:	f7ff fe74 	bl	8000a22 <assert_failed>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	695b      	ldr	r3, [r3, #20]
 8000d3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d42:	d008      	beq.n	8000d56 <HAL_ADC_Init+0xde>
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	695b      	ldr	r3, [r3, #20]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d004      	beq.n	8000d56 <HAL_ADC_Init+0xde>
 8000d4c:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 8000d50:	4866      	ldr	r0, [pc, #408]	; (8000eec <HAL_ADC_Init+0x274>)
 8000d52:	f7ff fe66 	bl	8000a22 <assert_failed>
  assert_param(IS_ADC_AUTOWAIT(hadc->Init.LowPowerAutoWait));
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	699b      	ldr	r3, [r3, #24]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d020      	beq.n	8000da0 <HAL_ADC_Init+0x128>
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	699b      	ldr	r3, [r3, #24]
 8000d62:	2b10      	cmp	r3, #16
 8000d64:	d01c      	beq.n	8000da0 <HAL_ADC_Init+0x128>
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	699b      	ldr	r3, [r3, #24]
 8000d6a:	2b20      	cmp	r3, #32
 8000d6c:	d018      	beq.n	8000da0 <HAL_ADC_Init+0x128>
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	699b      	ldr	r3, [r3, #24]
 8000d72:	2b30      	cmp	r3, #48	; 0x30
 8000d74:	d014      	beq.n	8000da0 <HAL_ADC_Init+0x128>
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	699b      	ldr	r3, [r3, #24]
 8000d7a:	2b40      	cmp	r3, #64	; 0x40
 8000d7c:	d010      	beq.n	8000da0 <HAL_ADC_Init+0x128>
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	699b      	ldr	r3, [r3, #24]
 8000d82:	2b50      	cmp	r3, #80	; 0x50
 8000d84:	d00c      	beq.n	8000da0 <HAL_ADC_Init+0x128>
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	699b      	ldr	r3, [r3, #24]
 8000d8a:	2b60      	cmp	r3, #96	; 0x60
 8000d8c:	d008      	beq.n	8000da0 <HAL_ADC_Init+0x128>
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	699b      	ldr	r3, [r3, #24]
 8000d92:	2b70      	cmp	r3, #112	; 0x70
 8000d94:	d004      	beq.n	8000da0 <HAL_ADC_Init+0x128>
 8000d96:	f240 11b9 	movw	r1, #441	; 0x1b9
 8000d9a:	4854      	ldr	r0, [pc, #336]	; (8000eec <HAL_ADC_Init+0x274>)
 8000d9c:	f7ff fe41 	bl	8000a22 <assert_failed>
  assert_param(IS_ADC_AUTOPOWEROFF(hadc->Init.LowPowerAutoPowerOff));
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	69db      	ldr	r3, [r3, #28]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d013      	beq.n	8000dd0 <HAL_ADC_Init+0x158>
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	69db      	ldr	r3, [r3, #28]
 8000dac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000db0:	d00e      	beq.n	8000dd0 <HAL_ADC_Init+0x158>
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	69db      	ldr	r3, [r3, #28]
 8000db6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000dba:	d009      	beq.n	8000dd0 <HAL_ADC_Init+0x158>
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	69db      	ldr	r3, [r3, #28]
 8000dc0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8000dc4:	d004      	beq.n	8000dd0 <HAL_ADC_Init+0x158>
 8000dc6:	f44f 71dd 	mov.w	r1, #442	; 0x1ba
 8000dca:	4848      	ldr	r0, [pc, #288]	; (8000eec <HAL_ADC_Init+0x274>)
 8000dcc:	f7ff fe29 	bl	8000a22 <assert_failed>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	6a1b      	ldr	r3, [r3, #32]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d004      	beq.n	8000de2 <HAL_ADC_Init+0x16a>
 8000dd8:	f240 11bb 	movw	r1, #443	; 0x1bb
 8000ddc:	4843      	ldr	r0, [pc, #268]	; (8000eec <HAL_ADC_Init+0x274>)
 8000dde:	f7ff fe20 	bl	8000a22 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d009      	beq.n	8000e00 <HAL_ADC_Init+0x188>
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000df2:	2b01      	cmp	r3, #1
 8000df4:	d004      	beq.n	8000e00 <HAL_ADC_Init+0x188>
 8000df6:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 8000dfa:	483c      	ldr	r0, [pc, #240]	; (8000eec <HAL_ADC_Init+0x274>)
 8000dfc:	f7ff fe11 	bl	8000a22 <assert_failed>
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e04:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000e08:	d03e      	beq.n	8000e88 <HAL_ADC_Init+0x210>
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e0e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8000e12:	d039      	beq.n	8000e88 <HAL_ADC_Init+0x210>
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e18:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8000e1c:	d034      	beq.n	8000e88 <HAL_ADC_Init+0x210>
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e22:	f1b3 6fe0 	cmp.w	r3, #117440512	; 0x7000000
 8000e26:	d02f      	beq.n	8000e88 <HAL_ADC_Init+0x210>
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e2c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8000e30:	d02a      	beq.n	8000e88 <HAL_ADC_Init+0x210>
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e36:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8000e3a:	d025      	beq.n	8000e88 <HAL_ADC_Init+0x210>
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e40:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8000e44:	d020      	beq.n	8000e88 <HAL_ADC_Init+0x210>
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e4a:	f1b3 6f10 	cmp.w	r3, #150994944	; 0x9000000
 8000e4e:	d01b      	beq.n	8000e88 <HAL_ADC_Init+0x210>
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e54:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 8000e58:	d016      	beq.n	8000e88 <HAL_ADC_Init+0x210>
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d012      	beq.n	8000e88 <HAL_ADC_Init+0x210>
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e66:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e6a:	d00d      	beq.n	8000e88 <HAL_ADC_Init+0x210>
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e70:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8000e74:	d008      	beq.n	8000e88 <HAL_ADC_Init+0x210>
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e7a:	2b10      	cmp	r3, #16
 8000e7c:	d004      	beq.n	8000e88 <HAL_ADC_Init+0x210>
 8000e7e:	f240 11bd 	movw	r1, #445	; 0x1bd
 8000e82:	481a      	ldr	r0, [pc, #104]	; (8000eec <HAL_ADC_Init+0x274>)
 8000e84:	f7ff fdcd 	bl	8000a22 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d009      	beq.n	8000ea6 <HAL_ADC_Init+0x22e>
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000e98:	2b01      	cmp	r3, #1
 8000e9a:	d004      	beq.n	8000ea6 <HAL_ADC_Init+0x22e>
 8000e9c:	f44f 71df 	mov.w	r1, #446	; 0x1be
 8000ea0:	4812      	ldr	r0, [pc, #72]	; (8000eec <HAL_ADC_Init+0x274>)
 8000ea2:	f7ff fdbe 	bl	8000a22 <assert_failed>
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	691b      	ldr	r3, [r3, #16]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d032      	beq.n	8000f14 <HAL_ADC_Init+0x29c>
  {
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d003      	beq.n	8000ebe <HAL_ADC_Init+0x246>
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eba:	2b1b      	cmp	r3, #27
 8000ebc:	d904      	bls.n	8000ec8 <HAL_ADC_Init+0x250>
 8000ebe:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 8000ec2:	480a      	ldr	r0, [pc, #40]	; (8000eec <HAL_ADC_Init+0x274>)
 8000ec4:	f7ff fdad 	bl	8000a22 <assert_failed>
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d00e      	beq.n	8000ef0 <HAL_ADC_Init+0x278>
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8000ed8:	2b01      	cmp	r3, #1
 8000eda:	d009      	beq.n	8000ef0 <HAL_ADC_Init+0x278>
 8000edc:	f240 11c3 	movw	r1, #451	; 0x1c3
 8000ee0:	4802      	ldr	r0, [pc, #8]	; (8000eec <HAL_ADC_Init+0x274>)
 8000ee2:	f7ff fd9e 	bl	8000a22 <assert_failed>
 8000ee6:	e003      	b.n	8000ef0 <HAL_ADC_Init+0x278>
 8000ee8:	40012400 	.word	0x40012400
 8000eec:	0800a138 	.word	0x0800a138
    if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d00c      	beq.n	8000f14 <HAL_ADC_Init+0x29c>
    {
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d003      	beq.n	8000f0a <HAL_ADC_Init+0x292>
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f06:	2b08      	cmp	r3, #8
 8000f08:	d904      	bls.n	8000f14 <HAL_ADC_Init+0x29c>
 8000f0a:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 8000f0e:	4896      	ldr	r0, [pc, #600]	; (8001168 <HAL_ADC_Init+0x4f0>)
 8000f10:	f7ff fd87 	bl	8000a22 <assert_failed>
    }
  }
      
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f18:	2b10      	cmp	r3, #16
 8000f1a:	d017      	beq.n	8000f4c <HAL_ADC_Init+0x2d4>
  {
    assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d013      	beq.n	8000f4c <HAL_ADC_Init+0x2d4>
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f28:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000f2c:	d00e      	beq.n	8000f4c <HAL_ADC_Init+0x2d4>
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f32:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000f36:	d009      	beq.n	8000f4c <HAL_ADC_Init+0x2d4>
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f3c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8000f40:	d004      	beq.n	8000f4c <HAL_ADC_Init+0x2d4>
 8000f42:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
 8000f46:	4888      	ldr	r0, [pc, #544]	; (8001168 <HAL_ADC_Init+0x4f0>)
 8000f48:	f7ff fd6b 	bl	8000a22 <assert_failed>
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d115      	bne.n	8000f80 <HAL_ADC_Init+0x308>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2200      	movs	r2, #0
 8000f58:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f62:	4b82      	ldr	r3, [pc, #520]	; (800116c <HAL_ADC_Init+0x4f4>)
 8000f64:	6a1b      	ldr	r3, [r3, #32]
 8000f66:	4a81      	ldr	r2, [pc, #516]	; (800116c <HAL_ADC_Init+0x4f4>)
 8000f68:	f043 0301 	orr.w	r3, r3, #1
 8000f6c:	6213      	str	r3, [r2, #32]
 8000f6e:	4b7f      	ldr	r3, [pc, #508]	; (800116c <HAL_ADC_Init+0x4f4>)
 8000f70:	6a1b      	ldr	r3, [r3, #32]
 8000f72:	f003 0301 	and.w	r3, r3, #1
 8000f76:	60bb      	str	r3, [r7, #8]
 8000f78:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f7a:	6878      	ldr	r0, [r7, #4]
 8000f7c:	f7ff fb92 	bl	80006a4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f84:	f003 0310 	and.w	r3, r3, #16
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	f040 810b 	bne.w	80011a4 <HAL_ADC_Init+0x52c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f92:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000f96:	f023 0302 	bic.w	r3, r3, #2
 8000f9a:	f043 0202 	orr.w	r2, r3, #2
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 8000fa2:	4b73      	ldr	r3, [pc, #460]	; (8001170 <HAL_ADC_Init+0x4f8>)
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	4970      	ldr	r1, [pc, #448]	; (8001170 <HAL_ADC_Init+0x4f8>)
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8000fbc:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fca:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fcc:	6a3b      	ldr	r3, [r7, #32]
 8000fce:	fa93 f3a3 	rbit	r3, r3
 8000fd2:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000fd4:	69fb      	ldr	r3, [r7, #28]
 8000fd6:	fab3 f383 	clz	r3, r3
 8000fda:	b2db      	uxtb	r3, r3
 8000fdc:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 8000fe0:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000fe6:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000fee:	4619      	mov	r1, r3
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ff6:	fa93 f3a3 	rbit	r3, r3
 8000ffa:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8000ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ffe:	fab3 f383 	clz	r3, r3
 8001002:	b2db      	uxtb	r3, r3
 8001004:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 8001008:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 800100a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800100c:	4313      	orrs	r3, r2
 800100e:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001014:	2b10      	cmp	r3, #16
 8001016:	d007      	beq.n	8001028 <HAL_ADC_Init+0x3b0>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
                  hadc->Init.ExternalTrigConvEdge );
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8001020:	4313      	orrs	r3, r2
 8001022:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001024:	4313      	orrs	r3, r2
 8001026:	62fb      	str	r3, [r7, #44]	; 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001032:	2b40      	cmp	r3, #64	; 0x40
 8001034:	d04f      	beq.n	80010d6 <HAL_ADC_Init+0x45e>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	699b      	ldr	r3, [r3, #24]
 800103a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800103c:	4313      	orrs	r3, r2
 800103e:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8001048:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 800104a:	687a      	ldr	r2, [r7, #4]
 800104c:	6912      	ldr	r2, [r2, #16]
 800104e:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8001052:	d003      	beq.n	800105c <HAL_ADC_Init+0x3e4>
 8001054:	687a      	ldr	r2, [r7, #4]
 8001056:	6912      	ldr	r2, [r2, #16]
 8001058:	2a01      	cmp	r2, #1
 800105a:	d102      	bne.n	8001062 <HAL_ADC_Init+0x3ea>
 800105c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001060:	e000      	b.n	8001064 <HAL_ADC_Init+0x3ec>
 8001062:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 8001064:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8001066:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001068:	4313      	orrs	r3, r2
 800106a:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001072:	2b01      	cmp	r3, #1
 8001074:	d125      	bne.n	80010c2 <HAL_ADC_Init+0x44a>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800107c:	2b00      	cmp	r3, #0
 800107e:	d114      	bne.n	80010aa <HAL_ADC_Init+0x432>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001084:	3b01      	subs	r3, #1
 8001086:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 800108a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800108c:	69ba      	ldr	r2, [r7, #24]
 800108e:	fa92 f2a2 	rbit	r2, r2
 8001092:	617a      	str	r2, [r7, #20]
  return result;
 8001094:	697a      	ldr	r2, [r7, #20]
 8001096:	fab2 f282 	clz	r2, r2
 800109a:	b2d2      	uxtb	r2, r2
 800109c:	4093      	lsls	r3, r2
 800109e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80010a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80010a4:	4313      	orrs	r3, r2
 80010a6:	633b      	str	r3, [r7, #48]	; 0x30
 80010a8:	e00b      	b.n	80010c2 <HAL_ADC_Init+0x44a>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ae:	f043 0220 	orr.w	r2, r3, #32
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	64da      	str	r2, [r3, #76]	; 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80010ba:	f043 0201 	orr.w	r2, r3, #1
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	651a      	str	r2, [r3, #80]	; 0x50
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	685a      	ldr	r2, [r3, #4]
 80010c8:	4b2a      	ldr	r3, [pc, #168]	; (8001174 <HAL_ADC_Init+0x4fc>)
 80010ca:	4013      	ands	r3, r2
 80010cc:	687a      	ldr	r2, [r7, #4]
 80010ce:	6812      	ldr	r2, [r2, #0]
 80010d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80010d2:	430b      	orrs	r3, r1
 80010d4:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	689a      	ldr	r2, [r3, #8]
 80010dc:	4b26      	ldr	r3, [pc, #152]	; (8001178 <HAL_ADC_Init+0x500>)
 80010de:	4013      	ands	r3, r2
 80010e0:	687a      	ldr	r2, [r7, #4]
 80010e2:	6812      	ldr	r2, [r2, #0]
 80010e4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80010e6:	430b      	orrs	r3, r1
 80010e8:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	691b      	ldr	r3, [r3, #16]
 80010ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80010f2:	d003      	beq.n	80010fc <HAL_ADC_Init+0x484>
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	691b      	ldr	r3, [r3, #16]
 80010f8:	2b01      	cmp	r3, #1
 80010fa:	d119      	bne.n	8001130 <HAL_ADC_Init+0x4b8>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001102:	f023 71f8 	bic.w	r1, r3, #32505856	; 0x1f00000
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800110a:	3b01      	subs	r3, #1
 800110c:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 8001110:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001112:	693a      	ldr	r2, [r7, #16]
 8001114:	fa92 f2a2 	rbit	r2, r2
 8001118:	60fa      	str	r2, [r7, #12]
  return result;
 800111a:	68fa      	ldr	r2, [r7, #12]
 800111c:	fab2 f282 	clz	r2, r2
 8001120:	b2d2      	uxtb	r2, r2
 8001122:	fa03 f202 	lsl.w	r2, r3, r2
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	430a      	orrs	r2, r1
 800112c:	631a      	str	r2, [r3, #48]	; 0x30
 800112e:	e007      	b.n	8001140 <HAL_ADC_Init+0x4c8>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f022 72f8 	bic.w	r2, r2, #32505856	; 0x1f00000
 800113e:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	689a      	ldr	r2, [r3, #8]
 8001146:	4b0d      	ldr	r3, [pc, #52]	; (800117c <HAL_ADC_Init+0x504>)
 8001148:	4013      	ands	r3, r2
 800114a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800114c:	429a      	cmp	r2, r3
 800114e:	d117      	bne.n	8001180 <HAL_ADC_Init+0x508>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2200      	movs	r2, #0
 8001154:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800115a:	f023 0303 	bic.w	r3, r3, #3
 800115e:	f043 0201 	orr.w	r2, r3, #1
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	64da      	str	r2, [r3, #76]	; 0x4c
 8001166:	e020      	b.n	80011aa <HAL_ADC_Init+0x532>
 8001168:	0800a138 	.word	0x0800a138
 800116c:	40023800 	.word	0x40023800
 8001170:	40012700 	.word	0x40012700
 8001174:	fcfc16ff 	.word	0xfcfc16ff
 8001178:	c0fff18d 	.word	0xc0fff18d
 800117c:	bf80fffe 	.word	0xbf80fffe
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001184:	f023 0312 	bic.w	r3, r3, #18
 8001188:	f043 0210 	orr.w	r2, r3, #16
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	64da      	str	r2, [r3, #76]	; 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001194:	f043 0201 	orr.w	r2, r3, #1
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	651a      	str	r2, [r3, #80]	; 0x50
      
      tmp_hal_status = HAL_ERROR;
 800119c:	2301      	movs	r3, #1
 800119e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80011a2:	e002      	b.n	80011aa <HAL_ADC_Init+0x532>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80011a4:	2301      	movs	r3, #1
 80011a6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 80011aa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3738      	adds	r7, #56	; 0x38
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop

080011b8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b086      	sub	sp, #24
 80011bc:	af00      	add	r7, sp, #0
 80011be:	60f8      	str	r0, [r7, #12]
 80011c0:	60b9      	str	r1, [r7, #8]
 80011c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011c4:	2300      	movs	r3, #0
 80011c6:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a43      	ldr	r2, [pc, #268]	; (80012dc <HAL_ADC_Start_DMA+0x124>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d004      	beq.n	80011dc <HAL_ADC_Start_DMA+0x24>
 80011d2:	f240 51de 	movw	r1, #1502	; 0x5de
 80011d6:	4842      	ldr	r0, [pc, #264]	; (80012e0 <HAL_ADC_Start_DMA+0x128>)
 80011d8:	f7ff fc23 	bl	8000a22 <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80011e2:	2b01      	cmp	r3, #1
 80011e4:	d101      	bne.n	80011ea <HAL_ADC_Start_DMA+0x32>
 80011e6:	2302      	movs	r3, #2
 80011e8:	e074      	b.n	80012d4 <HAL_ADC_Start_DMA+0x11c>
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	2201      	movs	r2, #1
 80011ee:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80011f2:	68f8      	ldr	r0, [r7, #12]
 80011f4:	f000 fb56 	bl	80018a4 <ADC_Enable>
 80011f8:	4603      	mov	r3, r0
 80011fa:	75fb      	strb	r3, [r7, #23]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80011fc:	7dfb      	ldrb	r3, [r7, #23]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d167      	bne.n	80012d2 <HAL_ADC_Start_DMA+0x11a>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001206:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800120a:	f023 0301 	bic.w	r3, r3, #1
 800120e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	64da      	str	r2, [r3, #76]	; 0x4c
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001220:	2b00      	cmp	r3, #0
 8001222:	d007      	beq.n	8001234 <HAL_ADC_Start_DMA+0x7c>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001228:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800122c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001238:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800123c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001240:	d106      	bne.n	8001250 <HAL_ADC_Start_DMA+0x98>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001246:	f023 0206 	bic.w	r2, r3, #6
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	651a      	str	r2, [r3, #80]	; 0x50
 800124e:	e002      	b.n	8001256 <HAL_ADC_Start_DMA+0x9e>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	2200      	movs	r2, #0
 8001254:	651a      	str	r2, [r3, #80]	; 0x50
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	2200      	movs	r2, #0
 800125a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001262:	4a20      	ldr	r2, [pc, #128]	; (80012e4 <HAL_ADC_Start_DMA+0x12c>)
 8001264:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800126a:	4a1f      	ldr	r2, [pc, #124]	; (80012e8 <HAL_ADC_Start_DMA+0x130>)
 800126c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001272:	4a1e      	ldr	r2, [pc, #120]	; (80012ec <HAL_ADC_Start_DMA+0x134>)
 8001274:	631a      	str	r2, [r3, #48]	; 0x30
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800127e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	685a      	ldr	r2, [r3, #4]
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800128e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	689a      	ldr	r2, [r3, #8]
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800129e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	6c58      	ldr	r0, [r3, #68]	; 0x44
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	3358      	adds	r3, #88	; 0x58
 80012aa:	4619      	mov	r1, r3
 80012ac:	68ba      	ldr	r2, [r7, #8]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	f000 ffc2 	bl	8002238 <HAL_DMA_Start_IT>
    /* If software start has been selected, conversion starts immediately.    */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	689b      	ldr	r3, [r3, #8]
 80012ba:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d107      	bne.n	80012d2 <HAL_ADC_Start_DMA+0x11a>
    {
      /* Start ADC conversion on regular group */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_SWSTART);
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	689a      	ldr	r2, [r3, #8]
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80012d0:	609a      	str	r2, [r3, #8]
    }
  }
  
  /* Return function status */
  return tmp_hal_status;
 80012d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	3718      	adds	r7, #24
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	40012400 	.word	0x40012400
 80012e0:	0800a138 	.word	0x0800a138
 80012e4:	080019df 	.word	0x080019df
 80012e8:	08001a87 	.word	0x08001a87
 80012ec:	08001aa3 	.word	0x08001aa3

080012f0 <HAL_ADC_Stop_DMA>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b084      	sub	sp, #16
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012f8:	2300      	movs	r3, #0
 80012fa:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a29      	ldr	r2, [pc, #164]	; (80013a8 <HAL_ADC_Stop_DMA+0xb8>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d004      	beq.n	8001310 <HAL_ADC_Stop_DMA+0x20>
 8001306:	f240 6142 	movw	r1, #1602	; 0x642
 800130a:	4828      	ldr	r0, [pc, #160]	; (80013ac <HAL_ADC_Stop_DMA+0xbc>)
 800130c:	f7ff fb89 	bl	8000a22 <assert_failed>
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001316:	2b01      	cmp	r3, #1
 8001318:	d101      	bne.n	800131e <HAL_ADC_Stop_DMA+0x2e>
 800131a:	2302      	movs	r3, #2
 800131c:	e03f      	b.n	800139e <HAL_ADC_Stop_DMA+0xae>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2201      	movs	r2, #1
 8001322:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001326:	6878      	ldr	r0, [r7, #4]
 8001328:	f000 fb18 	bl	800195c <ADC_ConversionStop_Disable>
 800132c:	4603      	mov	r3, r0
 800132e:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001330:	7bfb      	ldrb	r3, [r7, #15]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d12e      	bne.n	8001394 <HAL_ADC_Stop_DMA+0xa4>
  {
    /* Disable ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	689a      	ldr	r2, [r3, #8]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001344:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800134a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800134e:	b2db      	uxtb	r3, r3
 8001350:	2b02      	cmp	r3, #2
 8001352:	d10d      	bne.n	8001370 <HAL_ADC_Stop_DMA+0x80>
    {
      HAL_DMA_Abort(hadc->DMA_Handle);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001358:	4618      	mov	r0, r3
 800135a:	f000 ffdb 	bl	8002314 <HAL_DMA_Abort>
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 800135e:	7bfb      	ldrb	r3, [r7, #15]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d005      	beq.n	8001370 <HAL_ADC_Stop_DMA+0x80>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001368:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	64da      	str	r2, [r3, #76]	; 0x4c
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001374:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001378:	f023 0301 	bic.w	r3, r3, #1
 800137c:	f043 0201 	orr.w	r2, r3, #1
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	64da      	str	r2, [r3, #76]	; 0x4c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	685a      	ldr	r2, [r3, #4]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8001392:	605a      	str	r2, [r3, #4]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2200      	movs	r2, #0
 8001398:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 800139c:	7bfb      	ldrb	r3, [r7, #15]
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3710      	adds	r7, #16
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	40012400 	.word	0x40012400
 80013ac:	0800a138 	.word	0x0800a138

080013b0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80013b8:	bf00      	nop
 80013ba:	370c      	adds	r7, #12
 80013bc:	46bd      	mov	sp, r7
 80013be:	bc80      	pop	{r7}
 80013c0:	4770      	bx	lr

080013c2 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80013c2:	b480      	push	{r7}
 80013c4:	b083      	sub	sp, #12
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80013ca:	bf00      	nop
 80013cc:	370c      	adds	r7, #12
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bc80      	pop	{r7}
 80013d2:	4770      	bx	lr

080013d4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b084      	sub	sp, #16
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
 80013dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013de:	2300      	movs	r3, #0
 80013e0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 80013e2:	2300      	movs	r3, #0
 80013e4:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a75      	ldr	r2, [pc, #468]	; (80015c0 <HAL_ADC_ConfigChannel+0x1ec>)
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d004      	beq.n	80013fa <HAL_ADC_ConfigChannel+0x26>
 80013f0:	f240 719c 	movw	r1, #1948	; 0x79c
 80013f4:	4873      	ldr	r0, [pc, #460]	; (80015c4 <HAL_ADC_ConfigChannel+0x1f0>)
 80013f6:	f7ff fb14 	bl	8000a22 <assert_failed>
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d06c      	beq.n	80014dc <HAL_ADC_ConfigChannel+0x108>
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	2b01      	cmp	r3, #1
 8001408:	d068      	beq.n	80014dc <HAL_ADC_ConfigChannel+0x108>
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	2b02      	cmp	r3, #2
 8001410:	d064      	beq.n	80014dc <HAL_ADC_ConfigChannel+0x108>
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	2b03      	cmp	r3, #3
 8001418:	d060      	beq.n	80014dc <HAL_ADC_ConfigChannel+0x108>
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	2b04      	cmp	r3, #4
 8001420:	d05c      	beq.n	80014dc <HAL_ADC_ConfigChannel+0x108>
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	2b05      	cmp	r3, #5
 8001428:	d058      	beq.n	80014dc <HAL_ADC_ConfigChannel+0x108>
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	2b06      	cmp	r3, #6
 8001430:	d054      	beq.n	80014dc <HAL_ADC_ConfigChannel+0x108>
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	2b07      	cmp	r3, #7
 8001438:	d050      	beq.n	80014dc <HAL_ADC_ConfigChannel+0x108>
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	2b08      	cmp	r3, #8
 8001440:	d04c      	beq.n	80014dc <HAL_ADC_ConfigChannel+0x108>
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	2b09      	cmp	r3, #9
 8001448:	d048      	beq.n	80014dc <HAL_ADC_ConfigChannel+0x108>
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	2b0a      	cmp	r3, #10
 8001450:	d044      	beq.n	80014dc <HAL_ADC_ConfigChannel+0x108>
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	2b0b      	cmp	r3, #11
 8001458:	d040      	beq.n	80014dc <HAL_ADC_ConfigChannel+0x108>
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	2b0c      	cmp	r3, #12
 8001460:	d03c      	beq.n	80014dc <HAL_ADC_ConfigChannel+0x108>
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	2b0d      	cmp	r3, #13
 8001468:	d038      	beq.n	80014dc <HAL_ADC_ConfigChannel+0x108>
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	2b0e      	cmp	r3, #14
 8001470:	d034      	beq.n	80014dc <HAL_ADC_ConfigChannel+0x108>
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	2b0f      	cmp	r3, #15
 8001478:	d030      	beq.n	80014dc <HAL_ADC_ConfigChannel+0x108>
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	2b10      	cmp	r3, #16
 8001480:	d02c      	beq.n	80014dc <HAL_ADC_ConfigChannel+0x108>
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	2b11      	cmp	r3, #17
 8001488:	d028      	beq.n	80014dc <HAL_ADC_ConfigChannel+0x108>
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	2b12      	cmp	r3, #18
 8001490:	d024      	beq.n	80014dc <HAL_ADC_ConfigChannel+0x108>
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	2b13      	cmp	r3, #19
 8001498:	d020      	beq.n	80014dc <HAL_ADC_ConfigChannel+0x108>
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	2b14      	cmp	r3, #20
 80014a0:	d01c      	beq.n	80014dc <HAL_ADC_ConfigChannel+0x108>
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	2b15      	cmp	r3, #21
 80014a8:	d018      	beq.n	80014dc <HAL_ADC_ConfigChannel+0x108>
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	2b16      	cmp	r3, #22
 80014b0:	d014      	beq.n	80014dc <HAL_ADC_ConfigChannel+0x108>
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	2b17      	cmp	r3, #23
 80014b8:	d010      	beq.n	80014dc <HAL_ADC_ConfigChannel+0x108>
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	2b18      	cmp	r3, #24
 80014c0:	d00c      	beq.n	80014dc <HAL_ADC_ConfigChannel+0x108>
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	2b19      	cmp	r3, #25
 80014c8:	d008      	beq.n	80014dc <HAL_ADC_ConfigChannel+0x108>
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	2b1a      	cmp	r3, #26
 80014d0:	d004      	beq.n	80014dc <HAL_ADC_ConfigChannel+0x108>
 80014d2:	f240 719d 	movw	r1, #1949	; 0x79d
 80014d6:	483b      	ldr	r0, [pc, #236]	; (80015c4 <HAL_ADC_ConfigChannel+0x1f0>)
 80014d8:	f7ff faa3 	bl	8000a22 <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	2b01      	cmp	r3, #1
 80014e2:	d071      	beq.n	80015c8 <HAL_ADC_ConfigChannel+0x1f4>
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	2b02      	cmp	r3, #2
 80014ea:	d06d      	beq.n	80015c8 <HAL_ADC_ConfigChannel+0x1f4>
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	2b03      	cmp	r3, #3
 80014f2:	d069      	beq.n	80015c8 <HAL_ADC_ConfigChannel+0x1f4>
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	2b04      	cmp	r3, #4
 80014fa:	d065      	beq.n	80015c8 <HAL_ADC_ConfigChannel+0x1f4>
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	2b05      	cmp	r3, #5
 8001502:	d061      	beq.n	80015c8 <HAL_ADC_ConfigChannel+0x1f4>
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	2b06      	cmp	r3, #6
 800150a:	d05d      	beq.n	80015c8 <HAL_ADC_ConfigChannel+0x1f4>
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	2b07      	cmp	r3, #7
 8001512:	d059      	beq.n	80015c8 <HAL_ADC_ConfigChannel+0x1f4>
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	2b08      	cmp	r3, #8
 800151a:	d055      	beq.n	80015c8 <HAL_ADC_ConfigChannel+0x1f4>
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	2b09      	cmp	r3, #9
 8001522:	d051      	beq.n	80015c8 <HAL_ADC_ConfigChannel+0x1f4>
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	2b0a      	cmp	r3, #10
 800152a:	d04d      	beq.n	80015c8 <HAL_ADC_ConfigChannel+0x1f4>
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	2b0b      	cmp	r3, #11
 8001532:	d049      	beq.n	80015c8 <HAL_ADC_ConfigChannel+0x1f4>
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	2b0c      	cmp	r3, #12
 800153a:	d045      	beq.n	80015c8 <HAL_ADC_ConfigChannel+0x1f4>
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	2b0d      	cmp	r3, #13
 8001542:	d041      	beq.n	80015c8 <HAL_ADC_ConfigChannel+0x1f4>
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	2b0e      	cmp	r3, #14
 800154a:	d03d      	beq.n	80015c8 <HAL_ADC_ConfigChannel+0x1f4>
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	2b0f      	cmp	r3, #15
 8001552:	d039      	beq.n	80015c8 <HAL_ADC_ConfigChannel+0x1f4>
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	2b10      	cmp	r3, #16
 800155a:	d035      	beq.n	80015c8 <HAL_ADC_ConfigChannel+0x1f4>
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	2b11      	cmp	r3, #17
 8001562:	d031      	beq.n	80015c8 <HAL_ADC_ConfigChannel+0x1f4>
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	2b12      	cmp	r3, #18
 800156a:	d02d      	beq.n	80015c8 <HAL_ADC_ConfigChannel+0x1f4>
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	2b13      	cmp	r3, #19
 8001572:	d029      	beq.n	80015c8 <HAL_ADC_ConfigChannel+0x1f4>
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	2b14      	cmp	r3, #20
 800157a:	d025      	beq.n	80015c8 <HAL_ADC_ConfigChannel+0x1f4>
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	2b15      	cmp	r3, #21
 8001582:	d021      	beq.n	80015c8 <HAL_ADC_ConfigChannel+0x1f4>
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	2b16      	cmp	r3, #22
 800158a:	d01d      	beq.n	80015c8 <HAL_ADC_ConfigChannel+0x1f4>
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	2b17      	cmp	r3, #23
 8001592:	d019      	beq.n	80015c8 <HAL_ADC_ConfigChannel+0x1f4>
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	2b18      	cmp	r3, #24
 800159a:	d015      	beq.n	80015c8 <HAL_ADC_ConfigChannel+0x1f4>
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	2b19      	cmp	r3, #25
 80015a2:	d011      	beq.n	80015c8 <HAL_ADC_ConfigChannel+0x1f4>
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	2b1a      	cmp	r3, #26
 80015aa:	d00d      	beq.n	80015c8 <HAL_ADC_ConfigChannel+0x1f4>
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	2b1b      	cmp	r3, #27
 80015b2:	d009      	beq.n	80015c8 <HAL_ADC_ConfigChannel+0x1f4>
 80015b4:	f240 719e 	movw	r1, #1950	; 0x79e
 80015b8:	4802      	ldr	r0, [pc, #8]	; (80015c4 <HAL_ADC_ConfigChannel+0x1f0>)
 80015ba:	f7ff fa32 	bl	8000a22 <assert_failed>
 80015be:	e003      	b.n	80015c8 <HAL_ADC_ConfigChannel+0x1f4>
 80015c0:	40012400 	.word	0x40012400
 80015c4:	0800a138 	.word	0x0800a138
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	689b      	ldr	r3, [r3, #8]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d020      	beq.n	8001612 <HAL_ADC_ConfigChannel+0x23e>
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	2b01      	cmp	r3, #1
 80015d6:	d01c      	beq.n	8001612 <HAL_ADC_ConfigChannel+0x23e>
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	689b      	ldr	r3, [r3, #8]
 80015dc:	2b02      	cmp	r3, #2
 80015de:	d018      	beq.n	8001612 <HAL_ADC_ConfigChannel+0x23e>
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	2b03      	cmp	r3, #3
 80015e6:	d014      	beq.n	8001612 <HAL_ADC_ConfigChannel+0x23e>
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	689b      	ldr	r3, [r3, #8]
 80015ec:	2b04      	cmp	r3, #4
 80015ee:	d010      	beq.n	8001612 <HAL_ADC_ConfigChannel+0x23e>
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	689b      	ldr	r3, [r3, #8]
 80015f4:	2b05      	cmp	r3, #5
 80015f6:	d00c      	beq.n	8001612 <HAL_ADC_ConfigChannel+0x23e>
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	689b      	ldr	r3, [r3, #8]
 80015fc:	2b06      	cmp	r3, #6
 80015fe:	d008      	beq.n	8001612 <HAL_ADC_ConfigChannel+0x23e>
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	2b07      	cmp	r3, #7
 8001606:	d004      	beq.n	8001612 <HAL_ADC_ConfigChannel+0x23e>
 8001608:	f240 719f 	movw	r1, #1951	; 0x79f
 800160c:	48a1      	ldr	r0, [pc, #644]	; (8001894 <HAL_ADC_ConfigChannel+0x4c0>)
 800160e:	f7ff fa08 	bl	8000a22 <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001618:	2b01      	cmp	r3, #1
 800161a:	d101      	bne.n	8001620 <HAL_ADC_ConfigChannel+0x24c>
 800161c:	2302      	movs	r3, #2
 800161e:	e134      	b.n	800188a <HAL_ADC_ConfigChannel+0x4b6>
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2201      	movs	r2, #1
 8001624:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	2b06      	cmp	r3, #6
 800162e:	d81c      	bhi.n	800166a <HAL_ADC_ConfigChannel+0x296>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	685a      	ldr	r2, [r3, #4]
 800163a:	4613      	mov	r3, r2
 800163c:	009b      	lsls	r3, r3, #2
 800163e:	4413      	add	r3, r2
 8001640:	3b05      	subs	r3, #5
 8001642:	221f      	movs	r2, #31
 8001644:	fa02 f303 	lsl.w	r3, r2, r3
 8001648:	43db      	mvns	r3, r3
 800164a:	4019      	ands	r1, r3
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	6818      	ldr	r0, [r3, #0]
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	685a      	ldr	r2, [r3, #4]
 8001654:	4613      	mov	r3, r2
 8001656:	009b      	lsls	r3, r3, #2
 8001658:	4413      	add	r3, r2
 800165a:	3b05      	subs	r3, #5
 800165c:	fa00 f203 	lsl.w	r2, r0, r3
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	430a      	orrs	r2, r1
 8001666:	641a      	str	r2, [r3, #64]	; 0x40
 8001668:	e07e      	b.n	8001768 <HAL_ADC_ConfigChannel+0x394>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	2b0c      	cmp	r3, #12
 8001670:	d81c      	bhi.n	80016ac <HAL_ADC_ConfigChannel+0x2d8>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	685a      	ldr	r2, [r3, #4]
 800167c:	4613      	mov	r3, r2
 800167e:	009b      	lsls	r3, r3, #2
 8001680:	4413      	add	r3, r2
 8001682:	3b23      	subs	r3, #35	; 0x23
 8001684:	221f      	movs	r2, #31
 8001686:	fa02 f303 	lsl.w	r3, r2, r3
 800168a:	43db      	mvns	r3, r3
 800168c:	4019      	ands	r1, r3
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	6818      	ldr	r0, [r3, #0]
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	685a      	ldr	r2, [r3, #4]
 8001696:	4613      	mov	r3, r2
 8001698:	009b      	lsls	r3, r3, #2
 800169a:	4413      	add	r3, r2
 800169c:	3b23      	subs	r3, #35	; 0x23
 800169e:	fa00 f203 	lsl.w	r2, r0, r3
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	430a      	orrs	r2, r1
 80016a8:	63da      	str	r2, [r3, #60]	; 0x3c
 80016aa:	e05d      	b.n	8001768 <HAL_ADC_ConfigChannel+0x394>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	2b12      	cmp	r3, #18
 80016b2:	d81c      	bhi.n	80016ee <HAL_ADC_ConfigChannel+0x31a>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	685a      	ldr	r2, [r3, #4]
 80016be:	4613      	mov	r3, r2
 80016c0:	009b      	lsls	r3, r3, #2
 80016c2:	4413      	add	r3, r2
 80016c4:	3b41      	subs	r3, #65	; 0x41
 80016c6:	221f      	movs	r2, #31
 80016c8:	fa02 f303 	lsl.w	r3, r2, r3
 80016cc:	43db      	mvns	r3, r3
 80016ce:	4019      	ands	r1, r3
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	6818      	ldr	r0, [r3, #0]
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	685a      	ldr	r2, [r3, #4]
 80016d8:	4613      	mov	r3, r2
 80016da:	009b      	lsls	r3, r3, #2
 80016dc:	4413      	add	r3, r2
 80016de:	3b41      	subs	r3, #65	; 0x41
 80016e0:	fa00 f203 	lsl.w	r2, r0, r3
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	430a      	orrs	r2, r1
 80016ea:	639a      	str	r2, [r3, #56]	; 0x38
 80016ec:	e03c      	b.n	8001768 <HAL_ADC_ConfigChannel+0x394>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	2b18      	cmp	r3, #24
 80016f4:	d81c      	bhi.n	8001730 <HAL_ADC_ConfigChannel+0x35c>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	685a      	ldr	r2, [r3, #4]
 8001700:	4613      	mov	r3, r2
 8001702:	009b      	lsls	r3, r3, #2
 8001704:	4413      	add	r3, r2
 8001706:	3b5f      	subs	r3, #95	; 0x5f
 8001708:	221f      	movs	r2, #31
 800170a:	fa02 f303 	lsl.w	r3, r2, r3
 800170e:	43db      	mvns	r3, r3
 8001710:	4019      	ands	r1, r3
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	6818      	ldr	r0, [r3, #0]
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	685a      	ldr	r2, [r3, #4]
 800171a:	4613      	mov	r3, r2
 800171c:	009b      	lsls	r3, r3, #2
 800171e:	4413      	add	r3, r2
 8001720:	3b5f      	subs	r3, #95	; 0x5f
 8001722:	fa00 f203 	lsl.w	r2, r0, r3
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	430a      	orrs	r2, r1
 800172c:	635a      	str	r2, [r3, #52]	; 0x34
 800172e:	e01b      	b.n	8001768 <HAL_ADC_ConfigChannel+0x394>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	685a      	ldr	r2, [r3, #4]
 800173a:	4613      	mov	r3, r2
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	4413      	add	r3, r2
 8001740:	3b7d      	subs	r3, #125	; 0x7d
 8001742:	221f      	movs	r2, #31
 8001744:	fa02 f303 	lsl.w	r3, r2, r3
 8001748:	43db      	mvns	r3, r3
 800174a:	4019      	ands	r1, r3
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	6818      	ldr	r0, [r3, #0]
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	685a      	ldr	r2, [r3, #4]
 8001754:	4613      	mov	r3, r2
 8001756:	009b      	lsls	r3, r3, #2
 8001758:	4413      	add	r3, r2
 800175a:	3b7d      	subs	r3, #125	; 0x7d
 800175c:	fa00 f203 	lsl.w	r2, r0, r3
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	430a      	orrs	r2, r1
 8001766:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	2b09      	cmp	r3, #9
 800176e:	d81a      	bhi.n	80017a6 <HAL_ADC_ConfigChannel+0x3d2>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	6959      	ldr	r1, [r3, #20]
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	4613      	mov	r3, r2
 800177c:	005b      	lsls	r3, r3, #1
 800177e:	4413      	add	r3, r2
 8001780:	2207      	movs	r2, #7
 8001782:	fa02 f303 	lsl.w	r3, r2, r3
 8001786:	43db      	mvns	r3, r3
 8001788:	4019      	ands	r1, r3
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	6898      	ldr	r0, [r3, #8]
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	4613      	mov	r3, r2
 8001794:	005b      	lsls	r3, r3, #1
 8001796:	4413      	add	r3, r2
 8001798:	fa00 f203 	lsl.w	r2, r0, r3
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	430a      	orrs	r2, r1
 80017a2:	615a      	str	r2, [r3, #20]
 80017a4:	e042      	b.n	800182c <HAL_ADC_ConfigChannel+0x458>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	2b13      	cmp	r3, #19
 80017ac:	d81c      	bhi.n	80017e8 <HAL_ADC_ConfigChannel+0x414>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	6919      	ldr	r1, [r3, #16]
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	4613      	mov	r3, r2
 80017ba:	005b      	lsls	r3, r3, #1
 80017bc:	4413      	add	r3, r2
 80017be:	3b1e      	subs	r3, #30
 80017c0:	2207      	movs	r2, #7
 80017c2:	fa02 f303 	lsl.w	r3, r2, r3
 80017c6:	43db      	mvns	r3, r3
 80017c8:	4019      	ands	r1, r3
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	6898      	ldr	r0, [r3, #8]
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	4613      	mov	r3, r2
 80017d4:	005b      	lsls	r3, r3, #1
 80017d6:	4413      	add	r3, r2
 80017d8:	3b1e      	subs	r3, #30
 80017da:	fa00 f203 	lsl.w	r2, r0, r3
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	430a      	orrs	r2, r1
 80017e4:	611a      	str	r2, [r3, #16]
 80017e6:	e021      	b.n	800182c <HAL_ADC_ConfigChannel+0x458>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	2b1a      	cmp	r3, #26
 80017ee:	d81c      	bhi.n	800182a <HAL_ADC_ConfigChannel+0x456>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	68d9      	ldr	r1, [r3, #12]
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	4613      	mov	r3, r2
 80017fc:	005b      	lsls	r3, r3, #1
 80017fe:	4413      	add	r3, r2
 8001800:	3b3c      	subs	r3, #60	; 0x3c
 8001802:	2207      	movs	r2, #7
 8001804:	fa02 f303 	lsl.w	r3, r2, r3
 8001808:	43db      	mvns	r3, r3
 800180a:	4019      	ands	r1, r3
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	6898      	ldr	r0, [r3, #8]
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	4613      	mov	r3, r2
 8001816:	005b      	lsls	r3, r3, #1
 8001818:	4413      	add	r3, r2
 800181a:	3b3c      	subs	r3, #60	; 0x3c
 800181c:	fa00 f203 	lsl.w	r2, r0, r3
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	430a      	orrs	r2, r1
 8001826:	60da      	str	r2, [r3, #12]
 8001828:	e000      	b.n	800182c <HAL_ADC_ConfigChannel+0x458>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 800182a:	bf00      	nop
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	2b10      	cmp	r3, #16
 8001832:	d003      	beq.n	800183c <HAL_ADC_ConfigChannel+0x468>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001838:	2b11      	cmp	r3, #17
 800183a:	d121      	bne.n	8001880 <HAL_ADC_ConfigChannel+0x4ac>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 800183c:	4b16      	ldr	r3, [pc, #88]	; (8001898 <HAL_ADC_ConfigChannel+0x4c4>)
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001844:	2b00      	cmp	r3, #0
 8001846:	d11b      	bne.n	8001880 <HAL_ADC_ConfigChannel+0x4ac>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 8001848:	4b13      	ldr	r3, [pc, #76]	; (8001898 <HAL_ADC_ConfigChannel+0x4c4>)
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	4a12      	ldr	r2, [pc, #72]	; (8001898 <HAL_ADC_ConfigChannel+0x4c4>)
 800184e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001852:	6053      	str	r3, [r2, #4]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	2b10      	cmp	r3, #16
 800185a:	d111      	bne.n	8001880 <HAL_ADC_ConfigChannel+0x4ac>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800185c:	4b0f      	ldr	r3, [pc, #60]	; (800189c <HAL_ADC_ConfigChannel+0x4c8>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a0f      	ldr	r2, [pc, #60]	; (80018a0 <HAL_ADC_ConfigChannel+0x4cc>)
 8001862:	fba2 2303 	umull	r2, r3, r2, r3
 8001866:	0c9a      	lsrs	r2, r3, #18
 8001868:	4613      	mov	r3, r2
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	4413      	add	r3, r2
 800186e:	005b      	lsls	r3, r3, #1
 8001870:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8001872:	e002      	b.n	800187a <HAL_ADC_ConfigChannel+0x4a6>
          {
            wait_loop_index--;
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	3b01      	subs	r3, #1
 8001878:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 800187a:	68bb      	ldr	r3, [r7, #8]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d1f9      	bne.n	8001874 <HAL_ADC_ConfigChannel+0x4a0>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2200      	movs	r2, #0
 8001884:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 8001888:	7bfb      	ldrb	r3, [r7, #15]
}
 800188a:	4618      	mov	r0, r3
 800188c:	3710      	adds	r7, #16
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	0800a138 	.word	0x0800a138
 8001898:	40012700 	.word	0x40012700
 800189c:	20000000 	.word	0x20000000
 80018a0:	431bde83 	.word	0x431bde83

080018a4 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b084      	sub	sp, #16
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80018ac:	2300      	movs	r3, #0
 80018ae:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0;
 80018b0:	2300      	movs	r3, #0
 80018b2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018be:	2b40      	cmp	r3, #64	; 0x40
 80018c0:	d043      	beq.n	800194a <ADC_Enable+0xa6>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	689a      	ldr	r2, [r3, #8]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f042 0201 	orr.w	r2, r2, #1
 80018d0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80018d2:	4b20      	ldr	r3, [pc, #128]	; (8001954 <ADC_Enable+0xb0>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a20      	ldr	r2, [pc, #128]	; (8001958 <ADC_Enable+0xb4>)
 80018d8:	fba2 2303 	umull	r2, r3, r2, r3
 80018dc:	0c9a      	lsrs	r2, r3, #18
 80018de:	4613      	mov	r3, r2
 80018e0:	005b      	lsls	r3, r3, #1
 80018e2:	4413      	add	r3, r2
 80018e4:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 80018e6:	e002      	b.n	80018ee <ADC_Enable+0x4a>
    {
      wait_loop_index--;
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	3b01      	subs	r3, #1
 80018ec:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 80018ee:	68bb      	ldr	r3, [r7, #8]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d1f9      	bne.n	80018e8 <ADC_Enable+0x44>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();    
 80018f4:	f7ff f994 	bl	8000c20 <HAL_GetTick>
 80018f8:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80018fa:	e01f      	b.n	800193c <ADC_Enable+0x98>
    {
      if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
 80018fc:	f7ff f990 	bl	8000c20 <HAL_GetTick>
 8001900:	4602      	mov	r2, r0
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	2b02      	cmp	r3, #2
 8001908:	d918      	bls.n	800193c <ADC_Enable+0x98>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001914:	2b40      	cmp	r3, #64	; 0x40
 8001916:	d011      	beq.n	800193c <ADC_Enable+0x98>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800191c:	f043 0210 	orr.w	r2, r3, #16
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	64da      	str	r2, [r3, #76]	; 0x4c

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001928:	f043 0201 	orr.w	r2, r3, #1
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	651a      	str	r2, [r3, #80]	; 0x50

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2200      	movs	r2, #0
 8001934:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

          return HAL_ERROR;
 8001938:	2301      	movs	r3, #1
 800193a:	e007      	b.n	800194c <ADC_Enable+0xa8>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001946:	2b40      	cmp	r3, #64	; 0x40
 8001948:	d1d8      	bne.n	80018fc <ADC_Enable+0x58>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800194a:	2300      	movs	r3, #0
}
 800194c:	4618      	mov	r0, r3
 800194e:	3710      	adds	r7, #16
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	20000000 	.word	0x20000000
 8001958:	431bde83 	.word	0x431bde83

0800195c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b084      	sub	sp, #16
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001964:	2300      	movs	r3, #0
 8001966:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001972:	2b40      	cmp	r3, #64	; 0x40
 8001974:	d12e      	bne.n	80019d4 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	689a      	ldr	r2, [r3, #8]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f022 0201 	bic.w	r2, r2, #1
 8001984:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001986:	f7ff f94b 	bl	8000c20 <HAL_GetTick>
 800198a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */    
    while(ADC_IS_ENABLE(hadc) != RESET)
 800198c:	e01b      	b.n	80019c6 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart ) > ADC_DISABLE_TIMEOUT)
 800198e:	f7ff f947 	bl	8000c20 <HAL_GetTick>
 8001992:	4602      	mov	r2, r0
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	1ad3      	subs	r3, r2, r3
 8001998:	2b02      	cmp	r3, #2
 800199a:	d914      	bls.n	80019c6 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019a6:	2b40      	cmp	r3, #64	; 0x40
 80019a8:	d10d      	bne.n	80019c6 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ae:	f043 0210 	orr.w	r2, r3, #16
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	64da      	str	r2, [r3, #76]	; 0x4c

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019ba:	f043 0201 	orr.w	r2, r3, #1
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	651a      	str	r2, [r3, #80]	; 0x50

          return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e007      	b.n	80019d6 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019d0:	2b40      	cmp	r3, #64	; 0x40
 80019d2:	d0dc      	beq.n	800198e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80019d4:	2300      	movs	r3, #0
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	3710      	adds	r7, #16
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}

080019de <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80019de:	b580      	push	{r7, lr}
 80019e0:	b084      	sub	sp, #16
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ea:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019f0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d13d      	bne.n	8001a74 <ADC_DMAConvCplt+0x96>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019fc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	64da      	str	r2, [r3, #76]	; 0x4c
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32L1, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d12c      	bne.n	8001a6c <ADC_DMAConvCplt+0x8e>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d127      	bne.n	8001a6c <ADC_DMAConvCplt+0x8e>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a22:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d006      	beq.n	8001a38 <ADC_DMAConvCplt+0x5a>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d119      	bne.n	8001a6c <ADC_DMAConvCplt+0x8e>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	685a      	ldr	r2, [r3, #4]
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f022 0220 	bic.w	r2, r2, #32
 8001a46:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a4c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	64da      	str	r2, [r3, #76]	; 0x4c
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d105      	bne.n	8001a6c <ADC_DMAConvCplt+0x8e>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a64:	f043 0201 	orr.w	r2, r3, #1
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001a6c:	68f8      	ldr	r0, [r7, #12]
 8001a6e:	f008 f8bf 	bl	8009bf0 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001a72:	e004      	b.n	8001a7e <ADC_DMAConvCplt+0xa0>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	4798      	blx	r3
}
 8001a7e:	bf00      	nop
 8001a80:	3710      	adds	r7, #16
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}

08001a86 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001a86:	b580      	push	{r7, lr}
 8001a88:	b084      	sub	sp, #16
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a92:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001a94:	68f8      	ldr	r0, [r7, #12]
 8001a96:	f7ff fc8b 	bl	80013b0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001a9a:	bf00      	nop
 8001a9c:	3710      	adds	r7, #16
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}

08001aa2 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001aa2:	b580      	push	{r7, lr}
 8001aa4:	b084      	sub	sp, #16
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aae:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ab4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ac0:	f043 0204 	orr.w	r2, r3, #4
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	651a      	str	r2, [r3, #80]	; 0x50
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001ac8:	68f8      	ldr	r0, [r7, #12]
 8001aca:	f7ff fc7a 	bl	80013c2 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001ace:	bf00      	nop
 8001ad0:	3710      	adds	r7, #16
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
	...

08001ad8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b085      	sub	sp, #20
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	f003 0307 	and.w	r3, r3, #7
 8001ae6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ae8:	4b0c      	ldr	r3, [pc, #48]	; (8001b1c <__NVIC_SetPriorityGrouping+0x44>)
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001aee:	68ba      	ldr	r2, [r7, #8]
 8001af0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001af4:	4013      	ands	r3, r2
 8001af6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b0a:	4a04      	ldr	r2, [pc, #16]	; (8001b1c <__NVIC_SetPriorityGrouping+0x44>)
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	60d3      	str	r3, [r2, #12]
}
 8001b10:	bf00      	nop
 8001b12:	3714      	adds	r7, #20
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bc80      	pop	{r7}
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop
 8001b1c:	e000ed00 	.word	0xe000ed00

08001b20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b24:	4b04      	ldr	r3, [pc, #16]	; (8001b38 <__NVIC_GetPriorityGrouping+0x18>)
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	0a1b      	lsrs	r3, r3, #8
 8001b2a:	f003 0307 	and.w	r3, r3, #7
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bc80      	pop	{r7}
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	e000ed00 	.word	0xe000ed00

08001b3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b083      	sub	sp, #12
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	4603      	mov	r3, r0
 8001b44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	db0b      	blt.n	8001b66 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b4e:	79fb      	ldrb	r3, [r7, #7]
 8001b50:	f003 021f 	and.w	r2, r3, #31
 8001b54:	4906      	ldr	r1, [pc, #24]	; (8001b70 <__NVIC_EnableIRQ+0x34>)
 8001b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b5a:	095b      	lsrs	r3, r3, #5
 8001b5c:	2001      	movs	r0, #1
 8001b5e:	fa00 f202 	lsl.w	r2, r0, r2
 8001b62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b66:	bf00      	nop
 8001b68:	370c      	adds	r7, #12
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bc80      	pop	{r7}
 8001b6e:	4770      	bx	lr
 8001b70:	e000e100 	.word	0xe000e100

08001b74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	6039      	str	r1, [r7, #0]
 8001b7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	db0a      	blt.n	8001b9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	b2da      	uxtb	r2, r3
 8001b8c:	490c      	ldr	r1, [pc, #48]	; (8001bc0 <__NVIC_SetPriority+0x4c>)
 8001b8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b92:	0112      	lsls	r2, r2, #4
 8001b94:	b2d2      	uxtb	r2, r2
 8001b96:	440b      	add	r3, r1
 8001b98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b9c:	e00a      	b.n	8001bb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	b2da      	uxtb	r2, r3
 8001ba2:	4908      	ldr	r1, [pc, #32]	; (8001bc4 <__NVIC_SetPriority+0x50>)
 8001ba4:	79fb      	ldrb	r3, [r7, #7]
 8001ba6:	f003 030f 	and.w	r3, r3, #15
 8001baa:	3b04      	subs	r3, #4
 8001bac:	0112      	lsls	r2, r2, #4
 8001bae:	b2d2      	uxtb	r2, r2
 8001bb0:	440b      	add	r3, r1
 8001bb2:	761a      	strb	r2, [r3, #24]
}
 8001bb4:	bf00      	nop
 8001bb6:	370c      	adds	r7, #12
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bc80      	pop	{r7}
 8001bbc:	4770      	bx	lr
 8001bbe:	bf00      	nop
 8001bc0:	e000e100 	.word	0xe000e100
 8001bc4:	e000ed00 	.word	0xe000ed00

08001bc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b089      	sub	sp, #36	; 0x24
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	60f8      	str	r0, [r7, #12]
 8001bd0:	60b9      	str	r1, [r7, #8]
 8001bd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	f003 0307 	and.w	r3, r3, #7
 8001bda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bdc:	69fb      	ldr	r3, [r7, #28]
 8001bde:	f1c3 0307 	rsb	r3, r3, #7
 8001be2:	2b04      	cmp	r3, #4
 8001be4:	bf28      	it	cs
 8001be6:	2304      	movcs	r3, #4
 8001be8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bea:	69fb      	ldr	r3, [r7, #28]
 8001bec:	3304      	adds	r3, #4
 8001bee:	2b06      	cmp	r3, #6
 8001bf0:	d902      	bls.n	8001bf8 <NVIC_EncodePriority+0x30>
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	3b03      	subs	r3, #3
 8001bf6:	e000      	b.n	8001bfa <NVIC_EncodePriority+0x32>
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bfc:	f04f 32ff 	mov.w	r2, #4294967295
 8001c00:	69bb      	ldr	r3, [r7, #24]
 8001c02:	fa02 f303 	lsl.w	r3, r2, r3
 8001c06:	43da      	mvns	r2, r3
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	401a      	ands	r2, r3
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c10:	f04f 31ff 	mov.w	r1, #4294967295
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	fa01 f303 	lsl.w	r3, r1, r3
 8001c1a:	43d9      	mvns	r1, r3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c20:	4313      	orrs	r3, r2
         );
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3724      	adds	r7, #36	; 0x24
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bc80      	pop	{r7}
 8001c2a:	4770      	bx	lr

08001c2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	3b01      	subs	r3, #1
 8001c38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c3c:	d301      	bcc.n	8001c42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e00f      	b.n	8001c62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c42:	4a0a      	ldr	r2, [pc, #40]	; (8001c6c <SysTick_Config+0x40>)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	3b01      	subs	r3, #1
 8001c48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c4a:	210f      	movs	r1, #15
 8001c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c50:	f7ff ff90 	bl	8001b74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c54:	4b05      	ldr	r3, [pc, #20]	; (8001c6c <SysTick_Config+0x40>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c5a:	4b04      	ldr	r3, [pc, #16]	; (8001c6c <SysTick_Config+0x40>)
 8001c5c:	2207      	movs	r2, #7
 8001c5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c60:	2300      	movs	r3, #0
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3708      	adds	r7, #8
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	e000e010 	.word	0xe000e010

08001c70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2b07      	cmp	r3, #7
 8001c7c:	d00f      	beq.n	8001c9e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2b06      	cmp	r3, #6
 8001c82:	d00c      	beq.n	8001c9e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2b05      	cmp	r3, #5
 8001c88:	d009      	beq.n	8001c9e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2b04      	cmp	r3, #4
 8001c8e:	d006      	beq.n	8001c9e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2b03      	cmp	r3, #3
 8001c94:	d003      	beq.n	8001c9e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001c96:	21ab      	movs	r1, #171	; 0xab
 8001c98:	4804      	ldr	r0, [pc, #16]	; (8001cac <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8001c9a:	f7fe fec2 	bl	8000a22 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f7ff ff1a 	bl	8001ad8 <__NVIC_SetPriorityGrouping>
}
 8001ca4:	bf00      	nop
 8001ca6:	3708      	adds	r7, #8
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	0800a170 	.word	0x0800a170

08001cb0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b086      	sub	sp, #24
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	60b9      	str	r1, [r7, #8]
 8001cba:	607a      	str	r2, [r7, #4]
 8001cbc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2b0f      	cmp	r3, #15
 8001cc6:	d903      	bls.n	8001cd0 <HAL_NVIC_SetPriority+0x20>
 8001cc8:	21c3      	movs	r1, #195	; 0xc3
 8001cca:	480e      	ldr	r0, [pc, #56]	; (8001d04 <HAL_NVIC_SetPriority+0x54>)
 8001ccc:	f7fe fea9 	bl	8000a22 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	2b0f      	cmp	r3, #15
 8001cd4:	d903      	bls.n	8001cde <HAL_NVIC_SetPriority+0x2e>
 8001cd6:	21c4      	movs	r1, #196	; 0xc4
 8001cd8:	480a      	ldr	r0, [pc, #40]	; (8001d04 <HAL_NVIC_SetPriority+0x54>)
 8001cda:	f7fe fea2 	bl	8000a22 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cde:	f7ff ff1f 	bl	8001b20 <__NVIC_GetPriorityGrouping>
 8001ce2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ce4:	687a      	ldr	r2, [r7, #4]
 8001ce6:	68b9      	ldr	r1, [r7, #8]
 8001ce8:	6978      	ldr	r0, [r7, #20]
 8001cea:	f7ff ff6d 	bl	8001bc8 <NVIC_EncodePriority>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cf4:	4611      	mov	r1, r2
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f7ff ff3c 	bl	8001b74 <__NVIC_SetPriority>
}
 8001cfc:	bf00      	nop
 8001cfe:	3718      	adds	r7, #24
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	0800a170 	.word	0x0800a170

08001d08 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	4603      	mov	r3, r0
 8001d10:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8001d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	da03      	bge.n	8001d22 <HAL_NVIC_EnableIRQ+0x1a>
 8001d1a:	21d7      	movs	r1, #215	; 0xd7
 8001d1c:	4805      	ldr	r0, [pc, #20]	; (8001d34 <HAL_NVIC_EnableIRQ+0x2c>)
 8001d1e:	f7fe fe80 	bl	8000a22 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d26:	4618      	mov	r0, r3
 8001d28:	f7ff ff08 	bl	8001b3c <__NVIC_EnableIRQ>
}
 8001d2c:	bf00      	nop
 8001d2e:	3708      	adds	r7, #8
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	0800a170 	.word	0x0800a170

08001d38 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d40:	6878      	ldr	r0, [r7, #4]
 8001d42:	f7ff ff73 	bl	8001c2c <SysTick_Config>
 8001d46:	4603      	mov	r3, r0
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	3708      	adds	r7, #8
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}

08001d50 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d101      	bne.n	8001d62 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e01e      	b.n	8001da0 <HAL_DAC_Init+0x50>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a10      	ldr	r2, [pc, #64]	; (8001da8 <HAL_DAC_Init+0x58>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d004      	beq.n	8001d76 <HAL_DAC_Init+0x26>
 8001d6c:	f44f 7191 	mov.w	r1, #290	; 0x122
 8001d70:	480e      	ldr	r0, [pc, #56]	; (8001dac <HAL_DAC_Init+0x5c>)
 8001d72:	f7fe fe56 	bl	8000a22 <assert_failed>

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	791b      	ldrb	r3, [r3, #4]
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d105      	bne.n	8001d8c <HAL_DAC_Init+0x3c>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2200      	movs	r2, #0
 8001d84:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	f7fe fd46 	bl	8000818 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2202      	movs	r2, #2
 8001d90:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2200      	movs	r2, #0
 8001d96:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001d9e:	2300      	movs	r3, #0
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	3708      	adds	r7, #8
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	40007400 	.word	0x40007400
 8001dac:	0800a1ac 	.word	0x0800a1ac

08001db0 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
 8001db8:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d101      	bne.n	8001dc4 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e051      	b.n	8001e68 <HAL_DAC_Start+0xb8>
  }

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d007      	beq.n	8001dda <HAL_DAC_Start+0x2a>
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	2b10      	cmp	r3, #16
 8001dce:	d004      	beq.n	8001dda <HAL_DAC_Start+0x2a>
 8001dd0:	f240 11c7 	movw	r1, #455	; 0x1c7
 8001dd4:	4826      	ldr	r0, [pc, #152]	; (8001e70 <HAL_DAC_Start+0xc0>)
 8001dd6:	f7fe fe24 	bl	8000a22 <assert_failed>

  /* Process locked */
  __HAL_LOCK(hdac);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	795b      	ldrb	r3, [r3, #5]
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d101      	bne.n	8001de6 <HAL_DAC_Start+0x36>
 8001de2:	2302      	movs	r3, #2
 8001de4:	e040      	b.n	8001e68 <HAL_DAC_Start+0xb8>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2201      	movs	r2, #1
 8001dea:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2202      	movs	r2, #2
 8001df0:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	6819      	ldr	r1, [r3, #0]
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	f003 0310 	and.w	r3, r3, #16
 8001dfe:	2201      	movs	r2, #1
 8001e00:	409a      	lsls	r2, r3
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	430a      	orrs	r2, r1
 8001e08:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d10f      	bne.n	8001e30 <HAL_DAC_Start+0x80>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8001e1a:	2b3c      	cmp	r3, #60	; 0x3c
 8001e1c:	d11d      	bne.n	8001e5a <HAL_DAC_Start+0xaa>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	685a      	ldr	r2, [r3, #4]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f042 0201 	orr.w	r2, r2, #1
 8001e2c:	605a      	str	r2, [r3, #4]
 8001e2e:	e014      	b.n	8001e5a <HAL_DAC_Start+0xaa>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	f003 0310 	and.w	r3, r3, #16
 8001e40:	213c      	movs	r1, #60	; 0x3c
 8001e42:	fa01 f303 	lsl.w	r3, r1, r3
 8001e46:	429a      	cmp	r2, r3
 8001e48:	d107      	bne.n	8001e5a <HAL_DAC_Start+0xaa>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	685a      	ldr	r2, [r3, #4]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f042 0202 	orr.w	r2, r2, #2
 8001e58:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2200      	movs	r2, #0
 8001e64:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001e66:	2300      	movs	r3, #0
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3708      	adds	r7, #8
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	0800a1ac 	.word	0x0800a1ac

08001e74 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b086      	sub	sp, #24
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	60f8      	str	r0, [r7, #12]
 8001e7c:	60b9      	str	r1, [r7, #8]
 8001e7e:	607a      	str	r2, [r7, #4]
 8001e80:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8001e82:	2300      	movs	r3, #0
 8001e84:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d101      	bne.n	8001e90 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e038      	b.n	8001f02 <HAL_DAC_SetValue+0x8e>
  }

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d007      	beq.n	8001ea6 <HAL_DAC_SetValue+0x32>
 8001e96:	68bb      	ldr	r3, [r7, #8]
 8001e98:	2b10      	cmp	r3, #16
 8001e9a:	d004      	beq.n	8001ea6 <HAL_DAC_SetValue+0x32>
 8001e9c:	f240 3132 	movw	r1, #818	; 0x332
 8001ea0:	481a      	ldr	r0, [pc, #104]	; (8001f0c <HAL_DAC_SetValue+0x98>)
 8001ea2:	f7fe fdbe 	bl	8000a22 <assert_failed>
  assert_param(IS_DAC_ALIGN(Alignment));
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d00a      	beq.n	8001ec2 <HAL_DAC_SetValue+0x4e>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2b04      	cmp	r3, #4
 8001eb0:	d007      	beq.n	8001ec2 <HAL_DAC_SetValue+0x4e>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2b08      	cmp	r3, #8
 8001eb6:	d004      	beq.n	8001ec2 <HAL_DAC_SetValue+0x4e>
 8001eb8:	f240 3133 	movw	r1, #819	; 0x333
 8001ebc:	4813      	ldr	r0, [pc, #76]	; (8001f0c <HAL_DAC_SetValue+0x98>)
 8001ebe:	f7fe fdb0 	bl	8000a22 <assert_failed>
  assert_param(IS_DAC_DATA(Data));
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d904      	bls.n	8001ed6 <HAL_DAC_SetValue+0x62>
 8001ecc:	f44f 714d 	mov.w	r1, #820	; 0x334
 8001ed0:	480e      	ldr	r0, [pc, #56]	; (8001f0c <HAL_DAC_SetValue+0x98>)
 8001ed2:	f7fe fda6 	bl	8000a22 <assert_failed>

  tmp = (uint32_t)hdac->Instance;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d105      	bne.n	8001eee <HAL_DAC_SetValue+0x7a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8001ee2:	697a      	ldr	r2, [r7, #20]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	4413      	add	r3, r2
 8001ee8:	3308      	adds	r3, #8
 8001eea:	617b      	str	r3, [r7, #20]
 8001eec:	e004      	b.n	8001ef8 <HAL_DAC_SetValue+0x84>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8001eee:	697a      	ldr	r2, [r7, #20]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	4413      	add	r3, r2
 8001ef4:	3314      	adds	r3, #20
 8001ef6:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	461a      	mov	r2, r3
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001f00:	2300      	movs	r3, #0
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3718      	adds	r7, #24
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	0800a1ac 	.word	0x0800a1ac

08001f10 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b088      	sub	sp, #32
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	60f8      	str	r0, [r7, #12]
 8001f18:	60b9      	str	r1, [r7, #8]
 8001f1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d002      	beq.n	8001f2c <HAL_DAC_ConfigChannel+0x1c>
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d101      	bne.n	8001f30 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e07f      	b.n	8002030 <HAL_DAC_ConfigChannel+0x120>
  }

  /* Check the DAC parameters */
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d020      	beq.n	8001f7a <HAL_DAC_ConfigChannel+0x6a>
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	2b04      	cmp	r3, #4
 8001f3e:	d01c      	beq.n	8001f7a <HAL_DAC_ConfigChannel+0x6a>
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	2b14      	cmp	r3, #20
 8001f46:	d018      	beq.n	8001f7a <HAL_DAC_ConfigChannel+0x6a>
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	2b1c      	cmp	r3, #28
 8001f4e:	d014      	beq.n	8001f7a <HAL_DAC_ConfigChannel+0x6a>
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	2b24      	cmp	r3, #36	; 0x24
 8001f56:	d010      	beq.n	8001f7a <HAL_DAC_ConfigChannel+0x6a>
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	2b2c      	cmp	r3, #44	; 0x2c
 8001f5e:	d00c      	beq.n	8001f7a <HAL_DAC_ConfigChannel+0x6a>
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	2b34      	cmp	r3, #52	; 0x34
 8001f66:	d008      	beq.n	8001f7a <HAL_DAC_ConfigChannel+0x6a>
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	2b3c      	cmp	r3, #60	; 0x3c
 8001f6e:	d004      	beq.n	8001f7a <HAL_DAC_ConfigChannel+0x6a>
 8001f70:	f240 31da 	movw	r1, #986	; 0x3da
 8001f74:	4830      	ldr	r0, [pc, #192]	; (8002038 <HAL_DAC_ConfigChannel+0x128>)
 8001f76:	f7fe fd54 	bl	8000a22 <assert_failed>
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d008      	beq.n	8001f94 <HAL_DAC_ConfigChannel+0x84>
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	2b02      	cmp	r3, #2
 8001f88:	d004      	beq.n	8001f94 <HAL_DAC_ConfigChannel+0x84>
 8001f8a:	f240 31db 	movw	r1, #987	; 0x3db
 8001f8e:	482a      	ldr	r0, [pc, #168]	; (8002038 <HAL_DAC_ConfigChannel+0x128>)
 8001f90:	f7fe fd47 	bl	8000a22 <assert_failed>
  assert_param(IS_DAC_CHANNEL(Channel));
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d007      	beq.n	8001faa <HAL_DAC_ConfigChannel+0x9a>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2b10      	cmp	r3, #16
 8001f9e:	d004      	beq.n	8001faa <HAL_DAC_ConfigChannel+0x9a>
 8001fa0:	f44f 7177 	mov.w	r1, #988	; 0x3dc
 8001fa4:	4824      	ldr	r0, [pc, #144]	; (8002038 <HAL_DAC_ConfigChannel+0x128>)
 8001fa6:	f7fe fd3c 	bl	8000a22 <assert_failed>

  /* Process locked */
  __HAL_LOCK(hdac);
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	795b      	ldrb	r3, [r3, #5]
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d101      	bne.n	8001fb6 <HAL_DAC_ConfigChannel+0xa6>
 8001fb2:	2302      	movs	r3, #2
 8001fb4:	e03c      	b.n	8002030 <HAL_DAC_ConfigChannel+0x120>
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	2201      	movs	r2, #1
 8001fba:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	2202      	movs	r2, #2
 8001fc0:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	f003 0310 	and.w	r3, r3, #16
 8001fd0:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001fd4:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 8001fd8:	43db      	mvns	r3, r3
 8001fda:	69ba      	ldr	r2, [r7, #24]
 8001fdc:	4013      	ands	r3, r2
 8001fde:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	f003 0310 	and.w	r3, r3, #16
 8001ff2:	697a      	ldr	r2, [r7, #20]
 8001ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff8:	69ba      	ldr	r2, [r7, #24]
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	69ba      	ldr	r2, [r7, #24]
 8002004:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	6819      	ldr	r1, [r3, #0]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	f003 0310 	and.w	r3, r3, #16
 8002012:	22c0      	movs	r2, #192	; 0xc0
 8002014:	fa02 f303 	lsl.w	r3, r2, r3
 8002018:	43da      	mvns	r2, r3
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	400a      	ands	r2, r1
 8002020:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	2201      	movs	r2, #1
 8002026:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	2200      	movs	r2, #0
 800202c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 800202e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002030:	4618      	mov	r0, r3
 8002032:	3720      	adds	r7, #32
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}
 8002038:	0800a1ac 	.word	0x0800a1ac

0800203c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b084      	sub	sp, #16
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d101      	bne.n	800204e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e0da      	b.n	8002204 <HAL_DMA_Init+0x1c8>
  }

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a6e      	ldr	r2, [pc, #440]	; (800220c <HAL_DMA_Init+0x1d0>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d021      	beq.n	800209c <HAL_DMA_Init+0x60>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a6c      	ldr	r2, [pc, #432]	; (8002210 <HAL_DMA_Init+0x1d4>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d01c      	beq.n	800209c <HAL_DMA_Init+0x60>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a6b      	ldr	r2, [pc, #428]	; (8002214 <HAL_DMA_Init+0x1d8>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d017      	beq.n	800209c <HAL_DMA_Init+0x60>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a69      	ldr	r2, [pc, #420]	; (8002218 <HAL_DMA_Init+0x1dc>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d012      	beq.n	800209c <HAL_DMA_Init+0x60>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a68      	ldr	r2, [pc, #416]	; (800221c <HAL_DMA_Init+0x1e0>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d00d      	beq.n	800209c <HAL_DMA_Init+0x60>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a66      	ldr	r2, [pc, #408]	; (8002220 <HAL_DMA_Init+0x1e4>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d008      	beq.n	800209c <HAL_DMA_Init+0x60>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a65      	ldr	r2, [pc, #404]	; (8002224 <HAL_DMA_Init+0x1e8>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d003      	beq.n	800209c <HAL_DMA_Init+0x60>
 8002094:	219b      	movs	r1, #155	; 0x9b
 8002096:	4864      	ldr	r0, [pc, #400]	; (8002228 <HAL_DMA_Init+0x1ec>)
 8002098:	f7fe fcc3 	bl	8000a22 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d00c      	beq.n	80020be <HAL_DMA_Init+0x82>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	2b10      	cmp	r3, #16
 80020aa:	d008      	beq.n	80020be <HAL_DMA_Init+0x82>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80020b4:	d003      	beq.n	80020be <HAL_DMA_Init+0x82>
 80020b6:	219c      	movs	r1, #156	; 0x9c
 80020b8:	485b      	ldr	r0, [pc, #364]	; (8002228 <HAL_DMA_Init+0x1ec>)
 80020ba:	f7fe fcb2 	bl	8000a22 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	2b40      	cmp	r3, #64	; 0x40
 80020c4:	d007      	beq.n	80020d6 <HAL_DMA_Init+0x9a>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d003      	beq.n	80020d6 <HAL_DMA_Init+0x9a>
 80020ce:	219d      	movs	r1, #157	; 0x9d
 80020d0:	4855      	ldr	r0, [pc, #340]	; (8002228 <HAL_DMA_Init+0x1ec>)
 80020d2:	f7fe fca6 	bl	8000a22 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	68db      	ldr	r3, [r3, #12]
 80020da:	2b80      	cmp	r3, #128	; 0x80
 80020dc:	d007      	beq.n	80020ee <HAL_DMA_Init+0xb2>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	68db      	ldr	r3, [r3, #12]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d003      	beq.n	80020ee <HAL_DMA_Init+0xb2>
 80020e6:	219e      	movs	r1, #158	; 0x9e
 80020e8:	484f      	ldr	r0, [pc, #316]	; (8002228 <HAL_DMA_Init+0x1ec>)
 80020ea:	f7fe fc9a 	bl	8000a22 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	691b      	ldr	r3, [r3, #16]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d00d      	beq.n	8002112 <HAL_DMA_Init+0xd6>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	691b      	ldr	r3, [r3, #16]
 80020fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80020fe:	d008      	beq.n	8002112 <HAL_DMA_Init+0xd6>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	691b      	ldr	r3, [r3, #16]
 8002104:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002108:	d003      	beq.n	8002112 <HAL_DMA_Init+0xd6>
 800210a:	219f      	movs	r1, #159	; 0x9f
 800210c:	4846      	ldr	r0, [pc, #280]	; (8002228 <HAL_DMA_Init+0x1ec>)
 800210e:	f7fe fc88 	bl	8000a22 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	695b      	ldr	r3, [r3, #20]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d00d      	beq.n	8002136 <HAL_DMA_Init+0xfa>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	695b      	ldr	r3, [r3, #20]
 800211e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002122:	d008      	beq.n	8002136 <HAL_DMA_Init+0xfa>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	695b      	ldr	r3, [r3, #20]
 8002128:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800212c:	d003      	beq.n	8002136 <HAL_DMA_Init+0xfa>
 800212e:	21a0      	movs	r1, #160	; 0xa0
 8002130:	483d      	ldr	r0, [pc, #244]	; (8002228 <HAL_DMA_Init+0x1ec>)
 8002132:	f7fe fc76 	bl	8000a22 <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	699b      	ldr	r3, [r3, #24]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d007      	beq.n	800214e <HAL_DMA_Init+0x112>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	699b      	ldr	r3, [r3, #24]
 8002142:	2b20      	cmp	r3, #32
 8002144:	d003      	beq.n	800214e <HAL_DMA_Init+0x112>
 8002146:	21a1      	movs	r1, #161	; 0xa1
 8002148:	4837      	ldr	r0, [pc, #220]	; (8002228 <HAL_DMA_Init+0x1ec>)
 800214a:	f7fe fc6a 	bl	8000a22 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	69db      	ldr	r3, [r3, #28]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d012      	beq.n	800217c <HAL_DMA_Init+0x140>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	69db      	ldr	r3, [r3, #28]
 800215a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800215e:	d00d      	beq.n	800217c <HAL_DMA_Init+0x140>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	69db      	ldr	r3, [r3, #28]
 8002164:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002168:	d008      	beq.n	800217c <HAL_DMA_Init+0x140>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	69db      	ldr	r3, [r3, #28]
 800216e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002172:	d003      	beq.n	800217c <HAL_DMA_Init+0x140>
 8002174:	21a2      	movs	r1, #162	; 0xa2
 8002176:	482c      	ldr	r0, [pc, #176]	; (8002228 <HAL_DMA_Init+0x1ec>)
 8002178:	f7fe fc53 	bl	8000a22 <assert_failed>
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	461a      	mov	r2, r3
 8002182:	4b2a      	ldr	r3, [pc, #168]	; (800222c <HAL_DMA_Init+0x1f0>)
 8002184:	4413      	add	r3, r2
 8002186:	4a2a      	ldr	r2, [pc, #168]	; (8002230 <HAL_DMA_Init+0x1f4>)
 8002188:	fba2 2303 	umull	r2, r3, r2, r3
 800218c:	091b      	lsrs	r3, r3, #4
 800218e:	009a      	lsls	r2, r3, #2
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	4a27      	ldr	r2, [pc, #156]	; (8002234 <HAL_DMA_Init+0x1f8>)
 8002198:	63da      	str	r2, [r3, #60]	; 0x3c
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2202      	movs	r2, #2
 800219e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80021b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021b4:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80021be:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	695b      	ldr	r3, [r3, #20]
 80021d0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021d6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	69db      	ldr	r3, [r3, #28]
 80021dc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80021de:	68fa      	ldr	r2, [r7, #12]
 80021e0:	4313      	orrs	r3, r2
 80021e2:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	68fa      	ldr	r2, [r7, #12]
 80021ea:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2200      	movs	r2, #0
 80021f0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2201      	movs	r2, #1
 80021f6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2200      	movs	r2, #0
 80021fe:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002202:	2300      	movs	r3, #0
}
 8002204:	4618      	mov	r0, r3
 8002206:	3710      	adds	r7, #16
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}
 800220c:	40026008 	.word	0x40026008
 8002210:	4002601c 	.word	0x4002601c
 8002214:	40026030 	.word	0x40026030
 8002218:	40026044 	.word	0x40026044
 800221c:	40026058 	.word	0x40026058
 8002220:	4002606c 	.word	0x4002606c
 8002224:	40026080 	.word	0x40026080
 8002228:	0800a1e4 	.word	0x0800a1e4
 800222c:	bffd9ff8 	.word	0xbffd9ff8
 8002230:	cccccccd 	.word	0xcccccccd
 8002234:	40026000 	.word	0x40026000

08002238 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b086      	sub	sp, #24
 800223c:	af00      	add	r7, sp, #0
 800223e:	60f8      	str	r0, [r7, #12]
 8002240:	60b9      	str	r1, [r7, #8]
 8002242:	607a      	str	r2, [r7, #4]
 8002244:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002246:	2300      	movs	r3, #0
 8002248:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d003      	beq.n	8002258 <HAL_DMA_Start_IT+0x20>
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002256:	d304      	bcc.n	8002262 <HAL_DMA_Start_IT+0x2a>
 8002258:	f240 116b 	movw	r1, #363	; 0x16b
 800225c:	482c      	ldr	r0, [pc, #176]	; (8002310 <HAL_DMA_Start_IT+0xd8>)
 800225e:	f7fe fbe0 	bl	8000a22 <assert_failed>

  /* Process locked */
  __HAL_LOCK(hdma);
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002268:	2b01      	cmp	r3, #1
 800226a:	d101      	bne.n	8002270 <HAL_DMA_Start_IT+0x38>
 800226c:	2302      	movs	r3, #2
 800226e:	e04b      	b.n	8002308 <HAL_DMA_Start_IT+0xd0>
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	2201      	movs	r2, #1
 8002274:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800227e:	b2db      	uxtb	r3, r3
 8002280:	2b01      	cmp	r3, #1
 8002282:	d13a      	bne.n	80022fa <HAL_DMA_Start_IT+0xc2>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	2202      	movs	r2, #2
 8002288:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	2200      	movs	r2, #0
 8002290:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f022 0201 	bic.w	r2, r2, #1
 80022a0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	687a      	ldr	r2, [r7, #4]
 80022a6:	68b9      	ldr	r1, [r7, #8]
 80022a8:	68f8      	ldr	r0, [r7, #12]
 80022aa:	f000 f91f 	bl	80024ec <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d008      	beq.n	80022c8 <HAL_DMA_Start_IT+0x90>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f042 020e 	orr.w	r2, r2, #14
 80022c4:	601a      	str	r2, [r3, #0]
 80022c6:	e00f      	b.n	80022e8 <HAL_DMA_Start_IT+0xb0>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f022 0204 	bic.w	r2, r2, #4
 80022d6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f042 020a 	orr.w	r2, r2, #10
 80022e6:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f042 0201 	orr.w	r2, r2, #1
 80022f6:	601a      	str	r2, [r3, #0]
 80022f8:	e005      	b.n	8002306 <HAL_DMA_Start_IT+0xce>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	2200      	movs	r2, #0
 80022fe:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002302:	2302      	movs	r3, #2
 8002304:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002306:	7dfb      	ldrb	r3, [r7, #23]
}
 8002308:	4618      	mov	r0, r3
 800230a:	3718      	adds	r7, #24
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}
 8002310:	0800a1e4 	.word	0x0800a1e4

08002314 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002314:	b480      	push	{r7}
 8002316:	b085      	sub	sp, #20
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800231c:	2300      	movs	r3, #0
 800231e:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002326:	b2db      	uxtb	r3, r3
 8002328:	2b02      	cmp	r3, #2
 800232a:	d008      	beq.n	800233e <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2204      	movs	r2, #4
 8002330:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2200      	movs	r2, #0
 8002336:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e022      	b.n	8002384 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f022 020e 	bic.w	r2, r2, #14
 800234c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f022 0201 	bic.w	r2, r2, #1
 800235c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002362:	f003 021c 	and.w	r2, r3, #28
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800236a:	2101      	movs	r1, #1
 800236c:	fa01 f202 	lsl.w	r2, r1, r2
 8002370:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2201      	movs	r2, #1
 8002376:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2200      	movs	r2, #0
 800237e:	f883 2020 	strb.w	r2, [r3, #32]

    return status;
 8002382:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002384:	4618      	mov	r0, r3
 8002386:	3714      	adds	r7, #20
 8002388:	46bd      	mov	sp, r7
 800238a:	bc80      	pop	{r7}
 800238c:	4770      	bx	lr

0800238e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800238e:	b580      	push	{r7, lr}
 8002390:	b084      	sub	sp, #16
 8002392:	af00      	add	r7, sp, #0
 8002394:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023aa:	f003 031c 	and.w	r3, r3, #28
 80023ae:	2204      	movs	r2, #4
 80023b0:	409a      	lsls	r2, r3
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	4013      	ands	r3, r2
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d026      	beq.n	8002408 <HAL_DMA_IRQHandler+0x7a>
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	f003 0304 	and.w	r3, r3, #4
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d021      	beq.n	8002408 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 0320 	and.w	r3, r3, #32
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d107      	bne.n	80023e2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f022 0204 	bic.w	r2, r2, #4
 80023e0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e6:	f003 021c 	and.w	r2, r3, #28
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023ee:	2104      	movs	r1, #4
 80023f0:	fa01 f202 	lsl.w	r2, r1, r2
 80023f4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d071      	beq.n	80024e2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002402:	6878      	ldr	r0, [r7, #4]
 8002404:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002406:	e06c      	b.n	80024e2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240c:	f003 031c 	and.w	r3, r3, #28
 8002410:	2202      	movs	r2, #2
 8002412:	409a      	lsls	r2, r3
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	4013      	ands	r3, r2
 8002418:	2b00      	cmp	r3, #0
 800241a:	d02e      	beq.n	800247a <HAL_DMA_IRQHandler+0xec>
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	f003 0302 	and.w	r3, r3, #2
 8002422:	2b00      	cmp	r3, #0
 8002424:	d029      	beq.n	800247a <HAL_DMA_IRQHandler+0xec>
  {
    
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 0320 	and.w	r3, r3, #32
 8002430:	2b00      	cmp	r3, #0
 8002432:	d10b      	bne.n	800244c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f022 020a 	bic.w	r2, r2, #10
 8002442:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2201      	movs	r2, #1
 8002448:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002450:	f003 021c 	and.w	r2, r3, #28
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002458:	2102      	movs	r1, #2
 800245a:	fa01 f202 	lsl.w	r2, r1, r2
 800245e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2200      	movs	r2, #0
 8002464:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800246c:	2b00      	cmp	r3, #0
 800246e:	d038      	beq.n	80024e2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002474:	6878      	ldr	r0, [r7, #4]
 8002476:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002478:	e033      	b.n	80024e2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247e:	f003 031c 	and.w	r3, r3, #28
 8002482:	2208      	movs	r2, #8
 8002484:	409a      	lsls	r2, r3
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	4013      	ands	r3, r2
 800248a:	2b00      	cmp	r3, #0
 800248c:	d02a      	beq.n	80024e4 <HAL_DMA_IRQHandler+0x156>
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	f003 0308 	and.w	r3, r3, #8
 8002494:	2b00      	cmp	r3, #0
 8002496:	d025      	beq.n	80024e4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f022 020e 	bic.w	r2, r2, #14
 80024a6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ac:	f003 021c 	and.w	r2, r3, #28
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024b4:	2101      	movs	r1, #1
 80024b6:	fa01 f202 	lsl.w	r2, r1, r2
 80024ba:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2201      	movs	r2, #1
 80024c0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2201      	movs	r2, #1
 80024c6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2200      	movs	r2, #0
 80024ce:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d004      	beq.n	80024e4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80024e2:	bf00      	nop
 80024e4:	bf00      	nop
}
 80024e6:	3710      	adds	r7, #16
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}

080024ec <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b085      	sub	sp, #20
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	60f8      	str	r0, [r7, #12]
 80024f4:	60b9      	str	r1, [r7, #8]
 80024f6:	607a      	str	r2, [r7, #4]
 80024f8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fe:	f003 021c 	and.w	r2, r3, #28
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002506:	2101      	movs	r1, #1
 8002508:	fa01 f202 	lsl.w	r2, r1, r2
 800250c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	683a      	ldr	r2, [r7, #0]
 8002514:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	2b10      	cmp	r3, #16
 800251c:	d108      	bne.n	8002530 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	687a      	ldr	r2, [r7, #4]
 8002524:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	68ba      	ldr	r2, [r7, #8]
 800252c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800252e:	e007      	b.n	8002540 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	68ba      	ldr	r2, [r7, #8]
 8002536:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	687a      	ldr	r2, [r7, #4]
 800253e:	60da      	str	r2, [r3, #12]
}
 8002540:	bf00      	nop
 8002542:	3714      	adds	r7, #20
 8002544:	46bd      	mov	sp, r7
 8002546:	bc80      	pop	{r7}
 8002548:	4770      	bx	lr
	...

0800254c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b086      	sub	sp, #24
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002556:	2300      	movs	r3, #0
 8002558:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800255a:	2300      	movs	r3, #0
 800255c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 800255e:	2300      	movs	r3, #0
 8002560:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	4a38      	ldr	r2, [pc, #224]	; (8002648 <HAL_GPIO_Init+0xfc>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d017      	beq.n	800259a <HAL_GPIO_Init+0x4e>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	4a37      	ldr	r2, [pc, #220]	; (800264c <HAL_GPIO_Init+0x100>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d013      	beq.n	800259a <HAL_GPIO_Init+0x4e>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	4a36      	ldr	r2, [pc, #216]	; (8002650 <HAL_GPIO_Init+0x104>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d00f      	beq.n	800259a <HAL_GPIO_Init+0x4e>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	4a35      	ldr	r2, [pc, #212]	; (8002654 <HAL_GPIO_Init+0x108>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d00b      	beq.n	800259a <HAL_GPIO_Init+0x4e>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	4a34      	ldr	r2, [pc, #208]	; (8002658 <HAL_GPIO_Init+0x10c>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d007      	beq.n	800259a <HAL_GPIO_Init+0x4e>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	4a33      	ldr	r2, [pc, #204]	; (800265c <HAL_GPIO_Init+0x110>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d003      	beq.n	800259a <HAL_GPIO_Init+0x4e>
 8002592:	21b1      	movs	r1, #177	; 0xb1
 8002594:	4832      	ldr	r0, [pc, #200]	; (8002660 <HAL_GPIO_Init+0x114>)
 8002596:	f7fe fa44 	bl	8000a22 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	b29b      	uxth	r3, r3
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d005      	beq.n	80025b0 <HAL_GPIO_Init+0x64>
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	0c1b      	lsrs	r3, r3, #16
 80025aa:	041b      	lsls	r3, r3, #16
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d003      	beq.n	80025b8 <HAL_GPIO_Init+0x6c>
 80025b0:	21b2      	movs	r1, #178	; 0xb2
 80025b2:	482b      	ldr	r0, [pc, #172]	; (8002660 <HAL_GPIO_Init+0x114>)
 80025b4:	f7fe fa35 	bl	8000a22 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	f000 8200 	beq.w	80029c2 <HAL_GPIO_Init+0x476>
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	f000 81fb 	beq.w	80029c2 <HAL_GPIO_Init+0x476>
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	2b11      	cmp	r3, #17
 80025d2:	f000 81f6 	beq.w	80029c2 <HAL_GPIO_Init+0x476>
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	2b02      	cmp	r3, #2
 80025dc:	f000 81f1 	beq.w	80029c2 <HAL_GPIO_Init+0x476>
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	2b12      	cmp	r3, #18
 80025e6:	f000 81ec 	beq.w	80029c2 <HAL_GPIO_Init+0x476>
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 80025f2:	f000 81e6 	beq.w	80029c2 <HAL_GPIO_Init+0x476>
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 80025fe:	f000 81e0 	beq.w	80029c2 <HAL_GPIO_Init+0x476>
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 800260a:	f000 81da 	beq.w	80029c2 <HAL_GPIO_Init+0x476>
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 8002616:	f000 81d4 	beq.w	80029c2 <HAL_GPIO_Init+0x476>
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 8002622:	f000 81ce 	beq.w	80029c2 <HAL_GPIO_Init+0x476>
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 800262e:	f000 81c8 	beq.w	80029c2 <HAL_GPIO_Init+0x476>
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	2b03      	cmp	r3, #3
 8002638:	f000 81c3 	beq.w	80029c2 <HAL_GPIO_Init+0x476>
 800263c:	21b3      	movs	r1, #179	; 0xb3
 800263e:	4808      	ldr	r0, [pc, #32]	; (8002660 <HAL_GPIO_Init+0x114>)
 8002640:	f7fe f9ef 	bl	8000a22 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8002644:	e1bd      	b.n	80029c2 <HAL_GPIO_Init+0x476>
 8002646:	bf00      	nop
 8002648:	40020000 	.word	0x40020000
 800264c:	40020400 	.word	0x40020400
 8002650:	40020800 	.word	0x40020800
 8002654:	40020c00 	.word	0x40020c00
 8002658:	40021000 	.word	0x40021000
 800265c:	40021400 	.word	0x40021400
 8002660:	0800a21c 	.word	0x0800a21c
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	2101      	movs	r1, #1
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	fa01 f303 	lsl.w	r3, r1, r3
 8002670:	4013      	ands	r3, r2
 8002672:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	2b00      	cmp	r3, #0
 8002678:	f000 81a0 	beq.w	80029bc <HAL_GPIO_Init+0x470>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	f003 0303 	and.w	r3, r3, #3
 8002684:	2b01      	cmp	r3, #1
 8002686:	d005      	beq.n	8002694 <HAL_GPIO_Init+0x148>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002690:	2b02      	cmp	r3, #2
 8002692:	d144      	bne.n	800271e <HAL_GPIO_Init+0x1d2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d00f      	beq.n	80026bc <HAL_GPIO_Init+0x170>
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	d00b      	beq.n	80026bc <HAL_GPIO_Init+0x170>
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	2b02      	cmp	r3, #2
 80026aa:	d007      	beq.n	80026bc <HAL_GPIO_Init+0x170>
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	2b03      	cmp	r3, #3
 80026b2:	d003      	beq.n	80026bc <HAL_GPIO_Init+0x170>
 80026b4:	21c3      	movs	r1, #195	; 0xc3
 80026b6:	4886      	ldr	r0, [pc, #536]	; (80028d0 <HAL_GPIO_Init+0x384>)
 80026b8:	f7fe f9b3 	bl	8000a22 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	005b      	lsls	r3, r3, #1
 80026c6:	2203      	movs	r2, #3
 80026c8:	fa02 f303 	lsl.w	r3, r2, r3
 80026cc:	43db      	mvns	r3, r3
 80026ce:	693a      	ldr	r2, [r7, #16]
 80026d0:	4013      	ands	r3, r2
 80026d2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	68da      	ldr	r2, [r3, #12]
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	005b      	lsls	r3, r3, #1
 80026dc:	fa02 f303 	lsl.w	r3, r2, r3
 80026e0:	693a      	ldr	r2, [r7, #16]
 80026e2:	4313      	orrs	r3, r2
 80026e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	693a      	ldr	r2, [r7, #16]
 80026ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80026f2:	2201      	movs	r2, #1
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	fa02 f303 	lsl.w	r3, r2, r3
 80026fa:	43db      	mvns	r3, r3
 80026fc:	693a      	ldr	r2, [r7, #16]
 80026fe:	4013      	ands	r3, r2
 8002700:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	091b      	lsrs	r3, r3, #4
 8002708:	f003 0201 	and.w	r2, r3, #1
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	fa02 f303 	lsl.w	r3, r2, r3
 8002712:	693a      	ldr	r2, [r7, #16]
 8002714:	4313      	orrs	r3, r2
 8002716:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	693a      	ldr	r2, [r7, #16]
 800271c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	f003 0303 	and.w	r3, r3, #3
 8002726:	2b03      	cmp	r3, #3
 8002728:	d027      	beq.n	800277a <HAL_GPIO_Init+0x22e>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d00b      	beq.n	800274a <HAL_GPIO_Init+0x1fe>
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	2b01      	cmp	r3, #1
 8002738:	d007      	beq.n	800274a <HAL_GPIO_Init+0x1fe>
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	2b02      	cmp	r3, #2
 8002740:	d003      	beq.n	800274a <HAL_GPIO_Init+0x1fe>
 8002742:	21d4      	movs	r1, #212	; 0xd4
 8002744:	4862      	ldr	r0, [pc, #392]	; (80028d0 <HAL_GPIO_Init+0x384>)
 8002746:	f7fe f96c 	bl	8000a22 <assert_failed>

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	68db      	ldr	r3, [r3, #12]
 800274e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	005b      	lsls	r3, r3, #1
 8002754:	2203      	movs	r2, #3
 8002756:	fa02 f303 	lsl.w	r3, r2, r3
 800275a:	43db      	mvns	r3, r3
 800275c:	693a      	ldr	r2, [r7, #16]
 800275e:	4013      	ands	r3, r2
 8002760:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	689a      	ldr	r2, [r3, #8]
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	005b      	lsls	r3, r3, #1
 800276a:	fa02 f303 	lsl.w	r3, r2, r3
 800276e:	693a      	ldr	r2, [r7, #16]
 8002770:	4313      	orrs	r3, r2
 8002772:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	693a      	ldr	r2, [r7, #16]
 8002778:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	f003 0303 	and.w	r3, r3, #3
 8002782:	2b02      	cmp	r3, #2
 8002784:	d147      	bne.n	8002816 <HAL_GPIO_Init+0x2ca>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	4a52      	ldr	r2, [pc, #328]	; (80028d4 <HAL_GPIO_Init+0x388>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d017      	beq.n	80027be <HAL_GPIO_Init+0x272>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	4a51      	ldr	r2, [pc, #324]	; (80028d8 <HAL_GPIO_Init+0x38c>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d013      	beq.n	80027be <HAL_GPIO_Init+0x272>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	4a50      	ldr	r2, [pc, #320]	; (80028dc <HAL_GPIO_Init+0x390>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d00f      	beq.n	80027be <HAL_GPIO_Init+0x272>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	4a4f      	ldr	r2, [pc, #316]	; (80028e0 <HAL_GPIO_Init+0x394>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d00b      	beq.n	80027be <HAL_GPIO_Init+0x272>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	4a4e      	ldr	r2, [pc, #312]	; (80028e4 <HAL_GPIO_Init+0x398>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d007      	beq.n	80027be <HAL_GPIO_Init+0x272>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	4a4d      	ldr	r2, [pc, #308]	; (80028e8 <HAL_GPIO_Init+0x39c>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d003      	beq.n	80027be <HAL_GPIO_Init+0x272>
 80027b6:	21e1      	movs	r1, #225	; 0xe1
 80027b8:	4845      	ldr	r0, [pc, #276]	; (80028d0 <HAL_GPIO_Init+0x384>)
 80027ba:	f7fe f932 	bl	8000a22 <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	691b      	ldr	r3, [r3, #16]
 80027c2:	2b0f      	cmp	r3, #15
 80027c4:	d903      	bls.n	80027ce <HAL_GPIO_Init+0x282>
 80027c6:	21e2      	movs	r1, #226	; 0xe2
 80027c8:	4841      	ldr	r0, [pc, #260]	; (80028d0 <HAL_GPIO_Init+0x384>)
 80027ca:	f7fe f92a 	bl	8000a22 <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	08da      	lsrs	r2, r3, #3
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	3208      	adds	r2, #8
 80027d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027da:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	f003 0307 	and.w	r3, r3, #7
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	220f      	movs	r2, #15
 80027e6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ea:	43db      	mvns	r3, r3
 80027ec:	693a      	ldr	r2, [r7, #16]
 80027ee:	4013      	ands	r3, r2
 80027f0:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	691a      	ldr	r2, [r3, #16]
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	f003 0307 	and.w	r3, r3, #7
 80027fc:	009b      	lsls	r3, r3, #2
 80027fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002802:	693a      	ldr	r2, [r7, #16]
 8002804:	4313      	orrs	r3, r2
 8002806:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	08da      	lsrs	r2, r3, #3
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	3208      	adds	r2, #8
 8002810:	6939      	ldr	r1, [r7, #16]
 8002812:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	005b      	lsls	r3, r3, #1
 8002820:	2203      	movs	r2, #3
 8002822:	fa02 f303 	lsl.w	r3, r2, r3
 8002826:	43db      	mvns	r3, r3
 8002828:	693a      	ldr	r2, [r7, #16]
 800282a:	4013      	ands	r3, r2
 800282c:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	f003 0203 	and.w	r2, r3, #3
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	005b      	lsls	r3, r3, #1
 800283a:	fa02 f303 	lsl.w	r3, r2, r3
 800283e:	693a      	ldr	r2, [r7, #16]
 8002840:	4313      	orrs	r3, r2
 8002842:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	693a      	ldr	r2, [r7, #16]
 8002848:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002852:	2b00      	cmp	r3, #0
 8002854:	f000 80b2 	beq.w	80029bc <HAL_GPIO_Init+0x470>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002858:	4b24      	ldr	r3, [pc, #144]	; (80028ec <HAL_GPIO_Init+0x3a0>)
 800285a:	6a1b      	ldr	r3, [r3, #32]
 800285c:	4a23      	ldr	r2, [pc, #140]	; (80028ec <HAL_GPIO_Init+0x3a0>)
 800285e:	f043 0301 	orr.w	r3, r3, #1
 8002862:	6213      	str	r3, [r2, #32]
 8002864:	4b21      	ldr	r3, [pc, #132]	; (80028ec <HAL_GPIO_Init+0x3a0>)
 8002866:	6a1b      	ldr	r3, [r3, #32]
 8002868:	f003 0301 	and.w	r3, r3, #1
 800286c:	60bb      	str	r3, [r7, #8]
 800286e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8002870:	4a1f      	ldr	r2, [pc, #124]	; (80028f0 <HAL_GPIO_Init+0x3a4>)
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	089b      	lsrs	r3, r3, #2
 8002876:	3302      	adds	r3, #2
 8002878:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800287c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	f003 0303 	and.w	r3, r3, #3
 8002884:	009b      	lsls	r3, r3, #2
 8002886:	220f      	movs	r2, #15
 8002888:	fa02 f303 	lsl.w	r3, r2, r3
 800288c:	43db      	mvns	r3, r3
 800288e:	693a      	ldr	r2, [r7, #16]
 8002890:	4013      	ands	r3, r2
 8002892:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	4a0f      	ldr	r2, [pc, #60]	; (80028d4 <HAL_GPIO_Init+0x388>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d02b      	beq.n	80028f4 <HAL_GPIO_Init+0x3a8>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	4a0e      	ldr	r2, [pc, #56]	; (80028d8 <HAL_GPIO_Init+0x38c>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d013      	beq.n	80028cc <HAL_GPIO_Init+0x380>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	4a0d      	ldr	r2, [pc, #52]	; (80028dc <HAL_GPIO_Init+0x390>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d00d      	beq.n	80028c8 <HAL_GPIO_Init+0x37c>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	4a0c      	ldr	r2, [pc, #48]	; (80028e0 <HAL_GPIO_Init+0x394>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d007      	beq.n	80028c4 <HAL_GPIO_Init+0x378>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	4a0b      	ldr	r2, [pc, #44]	; (80028e4 <HAL_GPIO_Init+0x398>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d101      	bne.n	80028c0 <HAL_GPIO_Init+0x374>
 80028bc:	2304      	movs	r3, #4
 80028be:	e01a      	b.n	80028f6 <HAL_GPIO_Init+0x3aa>
 80028c0:	2305      	movs	r3, #5
 80028c2:	e018      	b.n	80028f6 <HAL_GPIO_Init+0x3aa>
 80028c4:	2303      	movs	r3, #3
 80028c6:	e016      	b.n	80028f6 <HAL_GPIO_Init+0x3aa>
 80028c8:	2302      	movs	r3, #2
 80028ca:	e014      	b.n	80028f6 <HAL_GPIO_Init+0x3aa>
 80028cc:	2301      	movs	r3, #1
 80028ce:	e012      	b.n	80028f6 <HAL_GPIO_Init+0x3aa>
 80028d0:	0800a21c 	.word	0x0800a21c
 80028d4:	40020000 	.word	0x40020000
 80028d8:	40020400 	.word	0x40020400
 80028dc:	40020800 	.word	0x40020800
 80028e0:	40020c00 	.word	0x40020c00
 80028e4:	40021000 	.word	0x40021000
 80028e8:	40021400 	.word	0x40021400
 80028ec:	40023800 	.word	0x40023800
 80028f0:	40010000 	.word	0x40010000
 80028f4:	2300      	movs	r3, #0
 80028f6:	697a      	ldr	r2, [r7, #20]
 80028f8:	f002 0203 	and.w	r2, r2, #3
 80028fc:	0092      	lsls	r2, r2, #2
 80028fe:	4093      	lsls	r3, r2
 8002900:	693a      	ldr	r2, [r7, #16]
 8002902:	4313      	orrs	r3, r2
 8002904:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002906:	4935      	ldr	r1, [pc, #212]	; (80029dc <HAL_GPIO_Init+0x490>)
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	089b      	lsrs	r3, r3, #2
 800290c:	3302      	adds	r3, #2
 800290e:	693a      	ldr	r2, [r7, #16]
 8002910:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002914:	4b32      	ldr	r3, [pc, #200]	; (80029e0 <HAL_GPIO_Init+0x494>)
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	43db      	mvns	r3, r3
 800291e:	693a      	ldr	r2, [r7, #16]
 8002920:	4013      	ands	r3, r2
 8002922:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800292c:	2b00      	cmp	r3, #0
 800292e:	d003      	beq.n	8002938 <HAL_GPIO_Init+0x3ec>
        {
          SET_BIT(temp, iocurrent);
 8002930:	693a      	ldr	r2, [r7, #16]
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	4313      	orrs	r3, r2
 8002936:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002938:	4a29      	ldr	r2, [pc, #164]	; (80029e0 <HAL_GPIO_Init+0x494>)
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800293e:	4b28      	ldr	r3, [pc, #160]	; (80029e0 <HAL_GPIO_Init+0x494>)
 8002940:	68db      	ldr	r3, [r3, #12]
 8002942:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	43db      	mvns	r3, r3
 8002948:	693a      	ldr	r2, [r7, #16]
 800294a:	4013      	ands	r3, r2
 800294c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002956:	2b00      	cmp	r3, #0
 8002958:	d003      	beq.n	8002962 <HAL_GPIO_Init+0x416>
        {
          SET_BIT(temp, iocurrent);
 800295a:	693a      	ldr	r2, [r7, #16]
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	4313      	orrs	r3, r2
 8002960:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002962:	4a1f      	ldr	r2, [pc, #124]	; (80029e0 <HAL_GPIO_Init+0x494>)
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002968:	4b1d      	ldr	r3, [pc, #116]	; (80029e0 <HAL_GPIO_Init+0x494>)
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	43db      	mvns	r3, r3
 8002972:	693a      	ldr	r2, [r7, #16]
 8002974:	4013      	ands	r3, r2
 8002976:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002980:	2b00      	cmp	r3, #0
 8002982:	d003      	beq.n	800298c <HAL_GPIO_Init+0x440>
        {
          SET_BIT(temp, iocurrent);
 8002984:	693a      	ldr	r2, [r7, #16]
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	4313      	orrs	r3, r2
 800298a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800298c:	4a14      	ldr	r2, [pc, #80]	; (80029e0 <HAL_GPIO_Init+0x494>)
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002992:	4b13      	ldr	r3, [pc, #76]	; (80029e0 <HAL_GPIO_Init+0x494>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	43db      	mvns	r3, r3
 800299c:	693a      	ldr	r2, [r7, #16]
 800299e:	4013      	ands	r3, r2
 80029a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d003      	beq.n	80029b6 <HAL_GPIO_Init+0x46a>
        {
          SET_BIT(temp, iocurrent);
 80029ae:	693a      	ldr	r2, [r7, #16]
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	4313      	orrs	r3, r2
 80029b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80029b6:	4a0a      	ldr	r2, [pc, #40]	; (80029e0 <HAL_GPIO_Init+0x494>)
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	3301      	adds	r3, #1
 80029c0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	fa22 f303 	lsr.w	r3, r2, r3
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	f47f ae49 	bne.w	8002664 <HAL_GPIO_Init+0x118>
  }
}
 80029d2:	bf00      	nop
 80029d4:	bf00      	nop
 80029d6:	3718      	adds	r7, #24
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}
 80029dc:	40010000 	.word	0x40010000
 80029e0:	40010400 	.word	0x40010400

080029e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b082      	sub	sp, #8
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
 80029ec:	460b      	mov	r3, r1
 80029ee:	807b      	strh	r3, [r7, #2]
 80029f0:	4613      	mov	r3, r2
 80029f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80029f4:	887b      	ldrh	r3, [r7, #2]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d004      	beq.n	8002a04 <HAL_GPIO_WritePin+0x20>
 80029fa:	887b      	ldrh	r3, [r7, #2]
 80029fc:	0c1b      	lsrs	r3, r3, #16
 80029fe:	041b      	lsls	r3, r3, #16
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d004      	beq.n	8002a0e <HAL_GPIO_WritePin+0x2a>
 8002a04:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 8002a08:	480e      	ldr	r0, [pc, #56]	; (8002a44 <HAL_GPIO_WritePin+0x60>)
 8002a0a:	f7fe f80a 	bl	8000a22 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8002a0e:	787b      	ldrb	r3, [r7, #1]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d007      	beq.n	8002a24 <HAL_GPIO_WritePin+0x40>
 8002a14:	787b      	ldrb	r3, [r7, #1]
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d004      	beq.n	8002a24 <HAL_GPIO_WritePin+0x40>
 8002a1a:	f240 11a1 	movw	r1, #417	; 0x1a1
 8002a1e:	4809      	ldr	r0, [pc, #36]	; (8002a44 <HAL_GPIO_WritePin+0x60>)
 8002a20:	f7fd ffff 	bl	8000a22 <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 8002a24:	787b      	ldrb	r3, [r7, #1]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d003      	beq.n	8002a32 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002a2a:	887a      	ldrh	r2, [r7, #2]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8002a30:	e003      	b.n	8002a3a <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8002a32:	887b      	ldrh	r3, [r7, #2]
 8002a34:	041a      	lsls	r2, r3, #16
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	619a      	str	r2, [r3, #24]
}
 8002a3a:	bf00      	nop
 8002a3c:	3708      	adds	r7, #8
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	bf00      	nop
 8002a44:	0800a21c 	.word	0x0800a21c

08002a48 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002a48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a4a:	b08b      	sub	sp, #44	; 0x2c
 8002a4c:	af06      	add	r7, sp, #24
 8002a4e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d101      	bne.n	8002a5a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e0cd      	b.n	8002bf6 <HAL_PCD_Init+0x1ae>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a68      	ldr	r2, [pc, #416]	; (8002c00 <HAL_PCD_Init+0x1b8>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d003      	beq.n	8002a6c <HAL_PCD_Init+0x24>
 8002a64:	2187      	movs	r1, #135	; 0x87
 8002a66:	4867      	ldr	r0, [pc, #412]	; (8002c04 <HAL_PCD_Init+0x1bc>)
 8002a68:	f7fd ffdb 	bl	8000a22 <assert_failed>

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d106      	bne.n	8002a86 <HAL_PCD_Init+0x3e>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002a80:	6878      	ldr	r0, [r7, #4]
 8002a82:	f006 fca9 	bl	80093d8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2203      	movs	r2, #3
 8002a8a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4618      	mov	r0, r3
 8002a94:	f002 fc30 	bl	80052f8 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a98:	2300      	movs	r3, #0
 8002a9a:	73fb      	strb	r3, [r7, #15]
 8002a9c:	e040      	b.n	8002b20 <HAL_PCD_Init+0xd8>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002a9e:	7bfb      	ldrb	r3, [r7, #15]
 8002aa0:	6879      	ldr	r1, [r7, #4]
 8002aa2:	1c5a      	adds	r2, r3, #1
 8002aa4:	4613      	mov	r3, r2
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	4413      	add	r3, r2
 8002aaa:	00db      	lsls	r3, r3, #3
 8002aac:	440b      	add	r3, r1
 8002aae:	3301      	adds	r3, #1
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002ab4:	7bfb      	ldrb	r3, [r7, #15]
 8002ab6:	6879      	ldr	r1, [r7, #4]
 8002ab8:	1c5a      	adds	r2, r3, #1
 8002aba:	4613      	mov	r3, r2
 8002abc:	009b      	lsls	r3, r3, #2
 8002abe:	4413      	add	r3, r2
 8002ac0:	00db      	lsls	r3, r3, #3
 8002ac2:	440b      	add	r3, r1
 8002ac4:	7bfa      	ldrb	r2, [r7, #15]
 8002ac6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002ac8:	7bfb      	ldrb	r3, [r7, #15]
 8002aca:	6879      	ldr	r1, [r7, #4]
 8002acc:	1c5a      	adds	r2, r3, #1
 8002ace:	4613      	mov	r3, r2
 8002ad0:	009b      	lsls	r3, r3, #2
 8002ad2:	4413      	add	r3, r2
 8002ad4:	00db      	lsls	r3, r3, #3
 8002ad6:	440b      	add	r3, r1
 8002ad8:	3303      	adds	r3, #3
 8002ada:	2200      	movs	r2, #0
 8002adc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002ade:	7bfa      	ldrb	r2, [r7, #15]
 8002ae0:	6879      	ldr	r1, [r7, #4]
 8002ae2:	4613      	mov	r3, r2
 8002ae4:	009b      	lsls	r3, r3, #2
 8002ae6:	4413      	add	r3, r2
 8002ae8:	00db      	lsls	r3, r3, #3
 8002aea:	440b      	add	r3, r1
 8002aec:	3338      	adds	r3, #56	; 0x38
 8002aee:	2200      	movs	r2, #0
 8002af0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002af2:	7bfa      	ldrb	r2, [r7, #15]
 8002af4:	6879      	ldr	r1, [r7, #4]
 8002af6:	4613      	mov	r3, r2
 8002af8:	009b      	lsls	r3, r3, #2
 8002afa:	4413      	add	r3, r2
 8002afc:	00db      	lsls	r3, r3, #3
 8002afe:	440b      	add	r3, r1
 8002b00:	333c      	adds	r3, #60	; 0x3c
 8002b02:	2200      	movs	r2, #0
 8002b04:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002b06:	7bfa      	ldrb	r2, [r7, #15]
 8002b08:	6879      	ldr	r1, [r7, #4]
 8002b0a:	4613      	mov	r3, r2
 8002b0c:	009b      	lsls	r3, r3, #2
 8002b0e:	4413      	add	r3, r2
 8002b10:	00db      	lsls	r3, r3, #3
 8002b12:	440b      	add	r3, r1
 8002b14:	3340      	adds	r3, #64	; 0x40
 8002b16:	2200      	movs	r2, #0
 8002b18:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b1a:	7bfb      	ldrb	r3, [r7, #15]
 8002b1c:	3301      	adds	r3, #1
 8002b1e:	73fb      	strb	r3, [r7, #15]
 8002b20:	7bfa      	ldrb	r2, [r7, #15]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	429a      	cmp	r2, r3
 8002b28:	d3b9      	bcc.n	8002a9e <HAL_PCD_Init+0x56>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	73fb      	strb	r3, [r7, #15]
 8002b2e:	e044      	b.n	8002bba <HAL_PCD_Init+0x172>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002b30:	7bfa      	ldrb	r2, [r7, #15]
 8002b32:	6879      	ldr	r1, [r7, #4]
 8002b34:	4613      	mov	r3, r2
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	4413      	add	r3, r2
 8002b3a:	00db      	lsls	r3, r3, #3
 8002b3c:	440b      	add	r3, r1
 8002b3e:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002b42:	2200      	movs	r2, #0
 8002b44:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002b46:	7bfa      	ldrb	r2, [r7, #15]
 8002b48:	6879      	ldr	r1, [r7, #4]
 8002b4a:	4613      	mov	r3, r2
 8002b4c:	009b      	lsls	r3, r3, #2
 8002b4e:	4413      	add	r3, r2
 8002b50:	00db      	lsls	r3, r3, #3
 8002b52:	440b      	add	r3, r1
 8002b54:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002b58:	7bfa      	ldrb	r2, [r7, #15]
 8002b5a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002b5c:	7bfa      	ldrb	r2, [r7, #15]
 8002b5e:	6879      	ldr	r1, [r7, #4]
 8002b60:	4613      	mov	r3, r2
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	4413      	add	r3, r2
 8002b66:	00db      	lsls	r3, r3, #3
 8002b68:	440b      	add	r3, r1
 8002b6a:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002b6e:	2200      	movs	r2, #0
 8002b70:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002b72:	7bfa      	ldrb	r2, [r7, #15]
 8002b74:	6879      	ldr	r1, [r7, #4]
 8002b76:	4613      	mov	r3, r2
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	4413      	add	r3, r2
 8002b7c:	00db      	lsls	r3, r3, #3
 8002b7e:	440b      	add	r3, r1
 8002b80:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002b84:	2200      	movs	r2, #0
 8002b86:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002b88:	7bfa      	ldrb	r2, [r7, #15]
 8002b8a:	6879      	ldr	r1, [r7, #4]
 8002b8c:	4613      	mov	r3, r2
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	4413      	add	r3, r2
 8002b92:	00db      	lsls	r3, r3, #3
 8002b94:	440b      	add	r3, r1
 8002b96:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002b9e:	7bfa      	ldrb	r2, [r7, #15]
 8002ba0:	6879      	ldr	r1, [r7, #4]
 8002ba2:	4613      	mov	r3, r2
 8002ba4:	009b      	lsls	r3, r3, #2
 8002ba6:	4413      	add	r3, r2
 8002ba8:	00db      	lsls	r3, r3, #3
 8002baa:	440b      	add	r3, r1
 8002bac:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bb4:	7bfb      	ldrb	r3, [r7, #15]
 8002bb6:	3301      	adds	r3, #1
 8002bb8:	73fb      	strb	r3, [r7, #15]
 8002bba:	7bfa      	ldrb	r2, [r7, #15]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d3b5      	bcc.n	8002b30 <HAL_PCD_Init+0xe8>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	603b      	str	r3, [r7, #0]
 8002bca:	687e      	ldr	r6, [r7, #4]
 8002bcc:	466d      	mov	r5, sp
 8002bce:	f106 0410 	add.w	r4, r6, #16
 8002bd2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bd4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002bd6:	6823      	ldr	r3, [r4, #0]
 8002bd8:	602b      	str	r3, [r5, #0]
 8002bda:	1d33      	adds	r3, r6, #4
 8002bdc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002bde:	6838      	ldr	r0, [r7, #0]
 8002be0:	f002 fba4 	bl	800532c <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2200      	movs	r2, #0
 8002be8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2201      	movs	r2, #1
 8002bf0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8002bf4:	2300      	movs	r3, #0
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3714      	adds	r7, #20
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	40005c00 	.word	0x40005c00
 8002c04:	0800a258 	.word	0x0800a258

08002c08 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b082      	sub	sp, #8
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d101      	bne.n	8002c1e <HAL_PCD_Start+0x16>
 8002c1a:	2302      	movs	r3, #2
 8002c1c:	e016      	b.n	8002c4c <HAL_PCD_Start+0x44>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2201      	movs	r2, #1
 8002c22:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f002 fb4e 	bl	80052cc <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002c30:	2101      	movs	r1, #1
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f006 fbb2 	bl	800939c <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f004 fe02 	bl	8007846 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2200      	movs	r2, #0
 8002c46:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002c4a:	2300      	movs	r3, #0
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3708      	adds	r7, #8
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}

08002c54 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b084      	sub	sp, #16
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4618      	mov	r0, r3
 8002c62:	f004 fdfa 	bl	800785a <USB_ReadInterrupts>
 8002c66:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d003      	beq.n	8002c7a <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	f000 fab1 	bl	80031da <PCD_EP_ISR_Handler>

    return;
 8002c78:	e0bd      	b.n	8002df6 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d013      	beq.n	8002cac <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002c8c:	b29a      	uxth	r2, r3
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c96:	b292      	uxth	r2, r2
 8002c98:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002c9c:	6878      	ldr	r0, [r7, #4]
 8002c9e:	f006 fc16 	bl	80094ce <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002ca2:	2100      	movs	r1, #0
 8002ca4:	6878      	ldr	r0, [r7, #4]
 8002ca6:	f000 f8a9 	bl	8002dfc <HAL_PCD_SetAddress>

    return;
 8002caa:	e0a4      	b.n	8002df6 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d00c      	beq.n	8002cd0 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002cbe:	b29a      	uxth	r2, r3
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002cc8:	b292      	uxth	r2, r2
 8002cca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002cce:	e092      	b.n	8002df6 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d00c      	beq.n	8002cf4 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002ce2:	b29a      	uxth	r2, r3
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002cec:	b292      	uxth	r2, r2
 8002cee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002cf2:	e080      	b.n	8002df6 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d027      	beq.n	8002d4e <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002d06:	b29a      	uxth	r2, r3
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f022 0204 	bic.w	r2, r2, #4
 8002d10:	b292      	uxth	r2, r2
 8002d12:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002d1e:	b29a      	uxth	r2, r3
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f022 0208 	bic.w	r2, r2, #8
 8002d28:	b292      	uxth	r2, r2
 8002d2a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f006 fc06 	bl	8009540 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002d3c:	b29a      	uxth	r2, r3
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002d46:	b292      	uxth	r2, r2
 8002d48:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002d4c:	e053      	b.n	8002df6 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d027      	beq.n	8002da8 <HAL_PCD_IRQHandler+0x154>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002d60:	b29a      	uxth	r2, r3
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f042 0208 	orr.w	r2, r2, #8
 8002d6a:	b292      	uxth	r2, r2
 8002d6c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002d78:	b29a      	uxth	r2, r3
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d82:	b292      	uxth	r2, r2
 8002d84:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002d90:	b29a      	uxth	r2, r3
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f042 0204 	orr.w	r2, r2, #4
 8002d9a:	b292      	uxth	r2, r2
 8002d9c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002da0:	6878      	ldr	r0, [r7, #4]
 8002da2:	f006 fbb3 	bl	800950c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002da6:	e026      	b.n	8002df6 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d00f      	beq.n	8002dd2 <HAL_PCD_IRQHandler+0x17e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002dba:	b29a      	uxth	r2, r3
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002dc4:	b292      	uxth	r2, r2
 8002dc6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f006 fb71 	bl	80094b2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002dd0:	e011      	b.n	8002df6 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d00c      	beq.n	8002df6 <HAL_PCD_IRQHandler+0x1a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002de4:	b29a      	uxth	r2, r3
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002dee:	b292      	uxth	r2, r2
 8002df0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002df4:	bf00      	nop
  }
}
 8002df6:	3710      	adds	r7, #16
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}

08002dfc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b082      	sub	sp, #8
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
 8002e04:	460b      	mov	r3, r1
 8002e06:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	d101      	bne.n	8002e16 <HAL_PCD_SetAddress+0x1a>
 8002e12:	2302      	movs	r3, #2
 8002e14:	e013      	b.n	8002e3e <HAL_PCD_SetAddress+0x42>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2201      	movs	r2, #1
 8002e1a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	78fa      	ldrb	r2, [r7, #3]
 8002e22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	78fa      	ldrb	r2, [r7, #3]
 8002e2c:	4611      	mov	r1, r2
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f004 fcf6 	bl	8007820 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2200      	movs	r2, #0
 8002e38:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002e3c:	2300      	movs	r3, #0
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3708      	adds	r7, #8
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}

08002e46 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002e46:	b580      	push	{r7, lr}
 8002e48:	b084      	sub	sp, #16
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	6078      	str	r0, [r7, #4]
 8002e4e:	4608      	mov	r0, r1
 8002e50:	4611      	mov	r1, r2
 8002e52:	461a      	mov	r2, r3
 8002e54:	4603      	mov	r3, r0
 8002e56:	70fb      	strb	r3, [r7, #3]
 8002e58:	460b      	mov	r3, r1
 8002e5a:	803b      	strh	r3, [r7, #0]
 8002e5c:	4613      	mov	r3, r2
 8002e5e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002e60:	2300      	movs	r3, #0
 8002e62:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002e64:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	da0e      	bge.n	8002e8a <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e6c:	78fb      	ldrb	r3, [r7, #3]
 8002e6e:	f003 0307 	and.w	r3, r3, #7
 8002e72:	1c5a      	adds	r2, r3, #1
 8002e74:	4613      	mov	r3, r2
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	4413      	add	r3, r2
 8002e7a:	00db      	lsls	r3, r3, #3
 8002e7c:	687a      	ldr	r2, [r7, #4]
 8002e7e:	4413      	add	r3, r2
 8002e80:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2201      	movs	r2, #1
 8002e86:	705a      	strb	r2, [r3, #1]
 8002e88:	e00e      	b.n	8002ea8 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e8a:	78fb      	ldrb	r3, [r7, #3]
 8002e8c:	f003 0207 	and.w	r2, r3, #7
 8002e90:	4613      	mov	r3, r2
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	4413      	add	r3, r2
 8002e96:	00db      	lsls	r3, r3, #3
 8002e98:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002e9c:	687a      	ldr	r2, [r7, #4]
 8002e9e:	4413      	add	r3, r2
 8002ea0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002ea8:	78fb      	ldrb	r3, [r7, #3]
 8002eaa:	f003 0307 	and.w	r3, r3, #7
 8002eae:	b2da      	uxtb	r2, r3
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002eb4:	883a      	ldrh	r2, [r7, #0]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	78ba      	ldrb	r2, [r7, #2]
 8002ebe:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002ec0:	78bb      	ldrb	r3, [r7, #2]
 8002ec2:	2b02      	cmp	r3, #2
 8002ec4:	d102      	bne.n	8002ecc <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d101      	bne.n	8002eda <HAL_PCD_EP_Open+0x94>
 8002ed6:	2302      	movs	r3, #2
 8002ed8:	e00e      	b.n	8002ef8 <HAL_PCD_EP_Open+0xb2>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2201      	movs	r2, #1
 8002ede:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	68f9      	ldr	r1, [r7, #12]
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f002 fa3f 	bl	800536c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8002ef6:	7afb      	ldrb	r3, [r7, #11]
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	3710      	adds	r7, #16
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}

08002f00 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b084      	sub	sp, #16
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
 8002f08:	460b      	mov	r3, r1
 8002f0a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002f0c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	da0e      	bge.n	8002f32 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f14:	78fb      	ldrb	r3, [r7, #3]
 8002f16:	f003 0307 	and.w	r3, r3, #7
 8002f1a:	1c5a      	adds	r2, r3, #1
 8002f1c:	4613      	mov	r3, r2
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	4413      	add	r3, r2
 8002f22:	00db      	lsls	r3, r3, #3
 8002f24:	687a      	ldr	r2, [r7, #4]
 8002f26:	4413      	add	r3, r2
 8002f28:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	705a      	strb	r2, [r3, #1]
 8002f30:	e00e      	b.n	8002f50 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f32:	78fb      	ldrb	r3, [r7, #3]
 8002f34:	f003 0207 	and.w	r2, r3, #7
 8002f38:	4613      	mov	r3, r2
 8002f3a:	009b      	lsls	r3, r3, #2
 8002f3c:	4413      	add	r3, r2
 8002f3e:	00db      	lsls	r3, r3, #3
 8002f40:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002f44:	687a      	ldr	r2, [r7, #4]
 8002f46:	4413      	add	r3, r2
 8002f48:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f50:	78fb      	ldrb	r3, [r7, #3]
 8002f52:	f003 0307 	and.w	r3, r3, #7
 8002f56:	b2da      	uxtb	r2, r3
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d101      	bne.n	8002f6a <HAL_PCD_EP_Close+0x6a>
 8002f66:	2302      	movs	r3, #2
 8002f68:	e00e      	b.n	8002f88 <HAL_PCD_EP_Close+0x88>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	68f9      	ldr	r1, [r7, #12]
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f002 fdb7 	bl	8005aec <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2200      	movs	r2, #0
 8002f82:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8002f86:	2300      	movs	r3, #0
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	3710      	adds	r7, #16
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}

08002f90 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b086      	sub	sp, #24
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	60f8      	str	r0, [r7, #12]
 8002f98:	607a      	str	r2, [r7, #4]
 8002f9a:	603b      	str	r3, [r7, #0]
 8002f9c:	460b      	mov	r3, r1
 8002f9e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002fa0:	7afb      	ldrb	r3, [r7, #11]
 8002fa2:	f003 0207 	and.w	r2, r3, #7
 8002fa6:	4613      	mov	r3, r2
 8002fa8:	009b      	lsls	r3, r3, #2
 8002faa:	4413      	add	r3, r2
 8002fac:	00db      	lsls	r3, r3, #3
 8002fae:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002fb2:	68fa      	ldr	r2, [r7, #12]
 8002fb4:	4413      	add	r3, r2
 8002fb6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	687a      	ldr	r2, [r7, #4]
 8002fbc:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	683a      	ldr	r2, [r7, #0]
 8002fc2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002fd0:	7afb      	ldrb	r3, [r7, #11]
 8002fd2:	f003 0307 	and.w	r3, r3, #7
 8002fd6:	b2da      	uxtb	r2, r3
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	6979      	ldr	r1, [r7, #20]
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f002 ff6e 	bl	8005ec4 <USB_EPStartXfer>

  return HAL_OK;
 8002fe8:	2300      	movs	r3, #0
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3718      	adds	r7, #24
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}

08002ff2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002ff2:	b480      	push	{r7}
 8002ff4:	b083      	sub	sp, #12
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	6078      	str	r0, [r7, #4]
 8002ffa:	460b      	mov	r3, r1
 8002ffc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002ffe:	78fb      	ldrb	r3, [r7, #3]
 8003000:	f003 0207 	and.w	r2, r3, #7
 8003004:	6879      	ldr	r1, [r7, #4]
 8003006:	4613      	mov	r3, r2
 8003008:	009b      	lsls	r3, r3, #2
 800300a:	4413      	add	r3, r2
 800300c:	00db      	lsls	r3, r3, #3
 800300e:	440b      	add	r3, r1
 8003010:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8003014:	681b      	ldr	r3, [r3, #0]
}
 8003016:	4618      	mov	r0, r3
 8003018:	370c      	adds	r7, #12
 800301a:	46bd      	mov	sp, r7
 800301c:	bc80      	pop	{r7}
 800301e:	4770      	bx	lr

08003020 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b086      	sub	sp, #24
 8003024:	af00      	add	r7, sp, #0
 8003026:	60f8      	str	r0, [r7, #12]
 8003028:	607a      	str	r2, [r7, #4]
 800302a:	603b      	str	r3, [r7, #0]
 800302c:	460b      	mov	r3, r1
 800302e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003030:	7afb      	ldrb	r3, [r7, #11]
 8003032:	f003 0307 	and.w	r3, r3, #7
 8003036:	1c5a      	adds	r2, r3, #1
 8003038:	4613      	mov	r3, r2
 800303a:	009b      	lsls	r3, r3, #2
 800303c:	4413      	add	r3, r2
 800303e:	00db      	lsls	r3, r3, #3
 8003040:	68fa      	ldr	r2, [r7, #12]
 8003042:	4413      	add	r3, r2
 8003044:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	687a      	ldr	r2, [r7, #4]
 800304a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	683a      	ldr	r2, [r7, #0]
 8003050:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	2201      	movs	r2, #1
 8003056:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	683a      	ldr	r2, [r7, #0]
 800305e:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	2200      	movs	r2, #0
 8003064:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	2201      	movs	r2, #1
 800306a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800306c:	7afb      	ldrb	r3, [r7, #11]
 800306e:	f003 0307 	and.w	r3, r3, #7
 8003072:	b2da      	uxtb	r2, r3
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	6979      	ldr	r1, [r7, #20]
 800307e:	4618      	mov	r0, r3
 8003080:	f002 ff20 	bl	8005ec4 <USB_EPStartXfer>

  return HAL_OK;
 8003084:	2300      	movs	r3, #0
}
 8003086:	4618      	mov	r0, r3
 8003088:	3718      	adds	r7, #24
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}

0800308e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800308e:	b580      	push	{r7, lr}
 8003090:	b084      	sub	sp, #16
 8003092:	af00      	add	r7, sp, #0
 8003094:	6078      	str	r0, [r7, #4]
 8003096:	460b      	mov	r3, r1
 8003098:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800309a:	78fb      	ldrb	r3, [r7, #3]
 800309c:	f003 0207 	and.w	r2, r3, #7
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d901      	bls.n	80030ac <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	e03e      	b.n	800312a <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80030ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	da0e      	bge.n	80030d2 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030b4:	78fb      	ldrb	r3, [r7, #3]
 80030b6:	f003 0307 	and.w	r3, r3, #7
 80030ba:	1c5a      	adds	r2, r3, #1
 80030bc:	4613      	mov	r3, r2
 80030be:	009b      	lsls	r3, r3, #2
 80030c0:	4413      	add	r3, r2
 80030c2:	00db      	lsls	r3, r3, #3
 80030c4:	687a      	ldr	r2, [r7, #4]
 80030c6:	4413      	add	r3, r2
 80030c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2201      	movs	r2, #1
 80030ce:	705a      	strb	r2, [r3, #1]
 80030d0:	e00c      	b.n	80030ec <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80030d2:	78fa      	ldrb	r2, [r7, #3]
 80030d4:	4613      	mov	r3, r2
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	4413      	add	r3, r2
 80030da:	00db      	lsls	r3, r3, #3
 80030dc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80030e0:	687a      	ldr	r2, [r7, #4]
 80030e2:	4413      	add	r3, r2
 80030e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2200      	movs	r2, #0
 80030ea:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2201      	movs	r2, #1
 80030f0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80030f2:	78fb      	ldrb	r3, [r7, #3]
 80030f4:	f003 0307 	and.w	r3, r3, #7
 80030f8:	b2da      	uxtb	r2, r3
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003104:	2b01      	cmp	r3, #1
 8003106:	d101      	bne.n	800310c <HAL_PCD_EP_SetStall+0x7e>
 8003108:	2302      	movs	r3, #2
 800310a:	e00e      	b.n	800312a <HAL_PCD_EP_SetStall+0x9c>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2201      	movs	r2, #1
 8003110:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	68f9      	ldr	r1, [r7, #12]
 800311a:	4618      	mov	r0, r3
 800311c:	f004 fa83 	bl	8007626 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2200      	movs	r2, #0
 8003124:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003128:	2300      	movs	r3, #0
}
 800312a:	4618      	mov	r0, r3
 800312c:	3710      	adds	r7, #16
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}

08003132 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003132:	b580      	push	{r7, lr}
 8003134:	b084      	sub	sp, #16
 8003136:	af00      	add	r7, sp, #0
 8003138:	6078      	str	r0, [r7, #4]
 800313a:	460b      	mov	r3, r1
 800313c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800313e:	78fb      	ldrb	r3, [r7, #3]
 8003140:	f003 020f 	and.w	r2, r3, #15
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	429a      	cmp	r2, r3
 800314a:	d901      	bls.n	8003150 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	e040      	b.n	80031d2 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003150:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003154:	2b00      	cmp	r3, #0
 8003156:	da0e      	bge.n	8003176 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003158:	78fb      	ldrb	r3, [r7, #3]
 800315a:	f003 0307 	and.w	r3, r3, #7
 800315e:	1c5a      	adds	r2, r3, #1
 8003160:	4613      	mov	r3, r2
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	4413      	add	r3, r2
 8003166:	00db      	lsls	r3, r3, #3
 8003168:	687a      	ldr	r2, [r7, #4]
 800316a:	4413      	add	r3, r2
 800316c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2201      	movs	r2, #1
 8003172:	705a      	strb	r2, [r3, #1]
 8003174:	e00e      	b.n	8003194 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003176:	78fb      	ldrb	r3, [r7, #3]
 8003178:	f003 0207 	and.w	r2, r3, #7
 800317c:	4613      	mov	r3, r2
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	4413      	add	r3, r2
 8003182:	00db      	lsls	r3, r3, #3
 8003184:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003188:	687a      	ldr	r2, [r7, #4]
 800318a:	4413      	add	r3, r2
 800318c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2200      	movs	r2, #0
 8003192:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2200      	movs	r2, #0
 8003198:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800319a:	78fb      	ldrb	r3, [r7, #3]
 800319c:	f003 0307 	and.w	r3, r3, #7
 80031a0:	b2da      	uxtb	r2, r3
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d101      	bne.n	80031b4 <HAL_PCD_EP_ClrStall+0x82>
 80031b0:	2302      	movs	r3, #2
 80031b2:	e00e      	b.n	80031d2 <HAL_PCD_EP_ClrStall+0xa0>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2201      	movs	r2, #1
 80031b8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	68f9      	ldr	r1, [r7, #12]
 80031c2:	4618      	mov	r0, r3
 80031c4:	f004 fa7f 	bl	80076c6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2200      	movs	r2, #0
 80031cc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80031d0:	2300      	movs	r3, #0
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3710      	adds	r7, #16
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}

080031da <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80031da:	b580      	push	{r7, lr}
 80031dc:	b096      	sub	sp, #88	; 0x58
 80031de:	af00      	add	r7, sp, #0
 80031e0:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80031e2:	e3bf      	b.n	8003964 <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80031ec:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80031f0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	f003 030f 	and.w	r3, r3, #15
 80031fa:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 80031fe:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003202:	2b00      	cmp	r3, #0
 8003204:	f040 8179 	bne.w	80034fa <PCD_EP_ISR_Handler+0x320>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003208:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800320c:	f003 0310 	and.w	r3, r3, #16
 8003210:	2b00      	cmp	r3, #0
 8003212:	d152      	bne.n	80032ba <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	881b      	ldrh	r3, [r3, #0]
 800321a:	b29b      	uxth	r3, r3
 800321c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003220:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003224:	81fb      	strh	r3, [r7, #14]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	89fb      	ldrh	r3, [r7, #14]
 800322c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003230:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003234:	b29b      	uxth	r3, r3
 8003236:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	3328      	adds	r3, #40	; 0x28
 800323c:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003246:	b29b      	uxth	r3, r3
 8003248:	461a      	mov	r2, r3
 800324a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800324c:	781b      	ldrb	r3, [r3, #0]
 800324e:	00db      	lsls	r3, r3, #3
 8003250:	4413      	add	r3, r2
 8003252:	3302      	adds	r3, #2
 8003254:	005b      	lsls	r3, r3, #1
 8003256:	687a      	ldr	r2, [r7, #4]
 8003258:	6812      	ldr	r2, [r2, #0]
 800325a:	4413      	add	r3, r2
 800325c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003260:	881b      	ldrh	r3, [r3, #0]
 8003262:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003266:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003268:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800326a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800326c:	695a      	ldr	r2, [r3, #20]
 800326e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003270:	69db      	ldr	r3, [r3, #28]
 8003272:	441a      	add	r2, r3
 8003274:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003276:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003278:	2100      	movs	r1, #0
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f006 f8ff 	bl	800947e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003286:	b2db      	uxtb	r3, r3
 8003288:	2b00      	cmp	r3, #0
 800328a:	f000 836b 	beq.w	8003964 <PCD_EP_ISR_Handler+0x78a>
 800328e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003290:	699b      	ldr	r3, [r3, #24]
 8003292:	2b00      	cmp	r3, #0
 8003294:	f040 8366 	bne.w	8003964 <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800329e:	b2db      	uxtb	r3, r3
 80032a0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80032a4:	b2da      	uxtb	r2, r3
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	b292      	uxth	r2, r2
 80032ac:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2200      	movs	r2, #0
 80032b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80032b8:	e354      	b.n	8003964 <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80032c0:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	881b      	ldrh	r3, [r3, #0]
 80032c8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80032cc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80032d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d034      	beq.n	8003342 <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032e0:	b29b      	uxth	r3, r3
 80032e2:	461a      	mov	r2, r3
 80032e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032e6:	781b      	ldrb	r3, [r3, #0]
 80032e8:	00db      	lsls	r3, r3, #3
 80032ea:	4413      	add	r3, r2
 80032ec:	3306      	adds	r3, #6
 80032ee:	005b      	lsls	r3, r3, #1
 80032f0:	687a      	ldr	r2, [r7, #4]
 80032f2:	6812      	ldr	r2, [r2, #0]
 80032f4:	4413      	add	r3, r2
 80032f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80032fa:	881b      	ldrh	r3, [r3, #0]
 80032fc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003300:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003302:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6818      	ldr	r0, [r3, #0]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800330e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003310:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003312:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003314:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003316:	b29b      	uxth	r3, r3
 8003318:	f004 faf3 	bl	8007902 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	881b      	ldrh	r3, [r3, #0]
 8003322:	b29a      	uxth	r2, r3
 8003324:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003328:	4013      	ands	r3, r2
 800332a:	823b      	strh	r3, [r7, #16]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	8a3a      	ldrh	r2, [r7, #16]
 8003332:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003336:	b292      	uxth	r2, r2
 8003338:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800333a:	6878      	ldr	r0, [r7, #4]
 800333c:	f006 f872 	bl	8009424 <HAL_PCD_SetupStageCallback>
 8003340:	e310      	b.n	8003964 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003342:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8003346:	2b00      	cmp	r3, #0
 8003348:	f280 830c 	bge.w	8003964 <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	881b      	ldrh	r3, [r3, #0]
 8003352:	b29a      	uxth	r2, r3
 8003354:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003358:	4013      	ands	r3, r2
 800335a:	83fb      	strh	r3, [r7, #30]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	8bfa      	ldrh	r2, [r7, #30]
 8003362:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003366:	b292      	uxth	r2, r2
 8003368:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003372:	b29b      	uxth	r3, r3
 8003374:	461a      	mov	r2, r3
 8003376:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003378:	781b      	ldrb	r3, [r3, #0]
 800337a:	00db      	lsls	r3, r3, #3
 800337c:	4413      	add	r3, r2
 800337e:	3306      	adds	r3, #6
 8003380:	005b      	lsls	r3, r3, #1
 8003382:	687a      	ldr	r2, [r7, #4]
 8003384:	6812      	ldr	r2, [r2, #0]
 8003386:	4413      	add	r3, r2
 8003388:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800338c:	881b      	ldrh	r3, [r3, #0]
 800338e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003392:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003394:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003396:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003398:	69db      	ldr	r3, [r3, #28]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d019      	beq.n	80033d2 <PCD_EP_ISR_Handler+0x1f8>
 800339e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033a0:	695b      	ldr	r3, [r3, #20]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d015      	beq.n	80033d2 <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6818      	ldr	r0, [r3, #0]
 80033aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033ac:	6959      	ldr	r1, [r3, #20]
 80033ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033b0:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80033b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033b4:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80033b6:	b29b      	uxth	r3, r3
 80033b8:	f004 faa3 	bl	8007902 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80033bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033be:	695a      	ldr	r2, [r3, #20]
 80033c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033c2:	69db      	ldr	r3, [r3, #28]
 80033c4:	441a      	add	r2, r3
 80033c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033c8:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80033ca:	2100      	movs	r1, #0
 80033cc:	6878      	ldr	r0, [r7, #4]
 80033ce:	f006 f83b 	bl	8009448 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	881b      	ldrh	r3, [r3, #0]
 80033d8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80033dc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80033e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	f040 82bd 	bne.w	8003964 <PCD_EP_ISR_Handler+0x78a>
 80033ea:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80033ee:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80033f2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80033f6:	f000 82b5 	beq.w	8003964 <PCD_EP_ISR_Handler+0x78a>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	61bb      	str	r3, [r7, #24]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003408:	b29b      	uxth	r3, r3
 800340a:	461a      	mov	r2, r3
 800340c:	69bb      	ldr	r3, [r7, #24]
 800340e:	4413      	add	r3, r2
 8003410:	61bb      	str	r3, [r7, #24]
 8003412:	69bb      	ldr	r3, [r7, #24]
 8003414:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003418:	617b      	str	r3, [r7, #20]
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	881b      	ldrh	r3, [r3, #0]
 800341e:	b29b      	uxth	r3, r3
 8003420:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003424:	b29a      	uxth	r2, r3
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	801a      	strh	r2, [r3, #0]
 800342a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800342c:	691b      	ldr	r3, [r3, #16]
 800342e:	2b3e      	cmp	r3, #62	; 0x3e
 8003430:	d91d      	bls.n	800346e <PCD_EP_ISR_Handler+0x294>
 8003432:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003434:	691b      	ldr	r3, [r3, #16]
 8003436:	095b      	lsrs	r3, r3, #5
 8003438:	647b      	str	r3, [r7, #68]	; 0x44
 800343a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800343c:	691b      	ldr	r3, [r3, #16]
 800343e:	f003 031f 	and.w	r3, r3, #31
 8003442:	2b00      	cmp	r3, #0
 8003444:	d102      	bne.n	800344c <PCD_EP_ISR_Handler+0x272>
 8003446:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003448:	3b01      	subs	r3, #1
 800344a:	647b      	str	r3, [r7, #68]	; 0x44
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	881b      	ldrh	r3, [r3, #0]
 8003450:	b29a      	uxth	r2, r3
 8003452:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003454:	b29b      	uxth	r3, r3
 8003456:	029b      	lsls	r3, r3, #10
 8003458:	b29b      	uxth	r3, r3
 800345a:	4313      	orrs	r3, r2
 800345c:	b29b      	uxth	r3, r3
 800345e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003462:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003466:	b29a      	uxth	r2, r3
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	801a      	strh	r2, [r3, #0]
 800346c:	e026      	b.n	80034bc <PCD_EP_ISR_Handler+0x2e2>
 800346e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003470:	691b      	ldr	r3, [r3, #16]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d10a      	bne.n	800348c <PCD_EP_ISR_Handler+0x2b2>
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	881b      	ldrh	r3, [r3, #0]
 800347a:	b29b      	uxth	r3, r3
 800347c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003480:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003484:	b29a      	uxth	r2, r3
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	801a      	strh	r2, [r3, #0]
 800348a:	e017      	b.n	80034bc <PCD_EP_ISR_Handler+0x2e2>
 800348c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800348e:	691b      	ldr	r3, [r3, #16]
 8003490:	085b      	lsrs	r3, r3, #1
 8003492:	647b      	str	r3, [r7, #68]	; 0x44
 8003494:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003496:	691b      	ldr	r3, [r3, #16]
 8003498:	f003 0301 	and.w	r3, r3, #1
 800349c:	2b00      	cmp	r3, #0
 800349e:	d002      	beq.n	80034a6 <PCD_EP_ISR_Handler+0x2cc>
 80034a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034a2:	3301      	adds	r3, #1
 80034a4:	647b      	str	r3, [r7, #68]	; 0x44
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	881b      	ldrh	r3, [r3, #0]
 80034aa:	b29a      	uxth	r2, r3
 80034ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034ae:	b29b      	uxth	r3, r3
 80034b0:	029b      	lsls	r3, r3, #10
 80034b2:	b29b      	uxth	r3, r3
 80034b4:	4313      	orrs	r3, r2
 80034b6:	b29a      	uxth	r2, r3
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	881b      	ldrh	r3, [r3, #0]
 80034c2:	b29b      	uxth	r3, r3
 80034c4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80034c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034cc:	827b      	strh	r3, [r7, #18]
 80034ce:	8a7b      	ldrh	r3, [r7, #18]
 80034d0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80034d4:	827b      	strh	r3, [r7, #18]
 80034d6:	8a7b      	ldrh	r3, [r7, #18]
 80034d8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80034dc:	827b      	strh	r3, [r7, #18]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	8a7b      	ldrh	r3, [r7, #18]
 80034e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80034e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80034ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034f4:	b29b      	uxth	r3, r3
 80034f6:	8013      	strh	r3, [r2, #0]
 80034f8:	e234      	b.n	8003964 <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	461a      	mov	r2, r3
 8003500:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003504:	009b      	lsls	r3, r3, #2
 8003506:	4413      	add	r3, r2
 8003508:	881b      	ldrh	r3, [r3, #0]
 800350a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800350e:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8003512:	2b00      	cmp	r3, #0
 8003514:	f280 80fc 	bge.w	8003710 <PCD_EP_ISR_Handler+0x536>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	461a      	mov	r2, r3
 800351e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	4413      	add	r3, r2
 8003526:	881b      	ldrh	r3, [r3, #0]
 8003528:	b29a      	uxth	r2, r3
 800352a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800352e:	4013      	ands	r3, r2
 8003530:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	461a      	mov	r2, r3
 800353a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	4413      	add	r3, r2
 8003542:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8003546:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800354a:	b292      	uxth	r2, r2
 800354c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800354e:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8003552:	4613      	mov	r3, r2
 8003554:	009b      	lsls	r3, r3, #2
 8003556:	4413      	add	r3, r2
 8003558:	00db      	lsls	r3, r3, #3
 800355a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800355e:	687a      	ldr	r2, [r7, #4]
 8003560:	4413      	add	r3, r2
 8003562:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003564:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003566:	7b1b      	ldrb	r3, [r3, #12]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d125      	bne.n	80035b8 <PCD_EP_ISR_Handler+0x3de>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003574:	b29b      	uxth	r3, r3
 8003576:	461a      	mov	r2, r3
 8003578:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800357a:	781b      	ldrb	r3, [r3, #0]
 800357c:	00db      	lsls	r3, r3, #3
 800357e:	4413      	add	r3, r2
 8003580:	3306      	adds	r3, #6
 8003582:	005b      	lsls	r3, r3, #1
 8003584:	687a      	ldr	r2, [r7, #4]
 8003586:	6812      	ldr	r2, [r2, #0]
 8003588:	4413      	add	r3, r2
 800358a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800358e:	881b      	ldrh	r3, [r3, #0]
 8003590:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003594:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8003598:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800359c:	2b00      	cmp	r3, #0
 800359e:	f000 8092 	beq.w	80036c6 <PCD_EP_ISR_Handler+0x4ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6818      	ldr	r0, [r3, #0]
 80035a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035a8:	6959      	ldr	r1, [r3, #20]
 80035aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035ac:	88da      	ldrh	r2, [r3, #6]
 80035ae:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80035b2:	f004 f9a6 	bl	8007902 <USB_ReadPMA>
 80035b6:	e086      	b.n	80036c6 <PCD_EP_ISR_Handler+0x4ec>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80035b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035ba:	78db      	ldrb	r3, [r3, #3]
 80035bc:	2b02      	cmp	r3, #2
 80035be:	d10a      	bne.n	80035d6 <PCD_EP_ISR_Handler+0x3fc>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80035c0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80035c4:	461a      	mov	r2, r3
 80035c6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	f000 f9d9 	bl	8003980 <HAL_PCD_EP_DB_Receive>
 80035ce:	4603      	mov	r3, r0
 80035d0:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 80035d4:	e077      	b.n	80036c6 <PCD_EP_ISR_Handler+0x4ec>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	461a      	mov	r2, r3
 80035dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035de:	781b      	ldrb	r3, [r3, #0]
 80035e0:	009b      	lsls	r3, r3, #2
 80035e2:	4413      	add	r3, r2
 80035e4:	881b      	ldrh	r3, [r3, #0]
 80035e6:	b29b      	uxth	r3, r3
 80035e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035f0:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	461a      	mov	r2, r3
 80035fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035fc:	781b      	ldrb	r3, [r3, #0]
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	441a      	add	r2, r3
 8003602:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003606:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800360a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800360e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003612:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003616:	b29b      	uxth	r3, r3
 8003618:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	461a      	mov	r2, r3
 8003620:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003622:	781b      	ldrb	r3, [r3, #0]
 8003624:	009b      	lsls	r3, r3, #2
 8003626:	4413      	add	r3, r2
 8003628:	881b      	ldrh	r3, [r3, #0]
 800362a:	b29b      	uxth	r3, r3
 800362c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003630:	2b00      	cmp	r3, #0
 8003632:	d024      	beq.n	800367e <PCD_EP_ISR_Handler+0x4a4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800363c:	b29b      	uxth	r3, r3
 800363e:	461a      	mov	r2, r3
 8003640:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003642:	781b      	ldrb	r3, [r3, #0]
 8003644:	00db      	lsls	r3, r3, #3
 8003646:	4413      	add	r3, r2
 8003648:	3302      	adds	r3, #2
 800364a:	005b      	lsls	r3, r3, #1
 800364c:	687a      	ldr	r2, [r7, #4]
 800364e:	6812      	ldr	r2, [r2, #0]
 8003650:	4413      	add	r3, r2
 8003652:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003656:	881b      	ldrh	r3, [r3, #0]
 8003658:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800365c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8003660:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003664:	2b00      	cmp	r3, #0
 8003666:	d02e      	beq.n	80036c6 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6818      	ldr	r0, [r3, #0]
 800366c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800366e:	6959      	ldr	r1, [r3, #20]
 8003670:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003672:	891a      	ldrh	r2, [r3, #8]
 8003674:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003678:	f004 f943 	bl	8007902 <USB_ReadPMA>
 800367c:	e023      	b.n	80036c6 <PCD_EP_ISR_Handler+0x4ec>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003686:	b29b      	uxth	r3, r3
 8003688:	461a      	mov	r2, r3
 800368a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800368c:	781b      	ldrb	r3, [r3, #0]
 800368e:	00db      	lsls	r3, r3, #3
 8003690:	4413      	add	r3, r2
 8003692:	3306      	adds	r3, #6
 8003694:	005b      	lsls	r3, r3, #1
 8003696:	687a      	ldr	r2, [r7, #4]
 8003698:	6812      	ldr	r2, [r2, #0]
 800369a:	4413      	add	r3, r2
 800369c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80036a0:	881b      	ldrh	r3, [r3, #0]
 80036a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80036a6:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 80036aa:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d009      	beq.n	80036c6 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6818      	ldr	r0, [r3, #0]
 80036b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036b8:	6959      	ldr	r1, [r3, #20]
 80036ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036bc:	895a      	ldrh	r2, [r3, #10]
 80036be:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80036c2:	f004 f91e 	bl	8007902 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80036c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036c8:	69da      	ldr	r2, [r3, #28]
 80036ca:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80036ce:	441a      	add	r2, r3
 80036d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036d2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80036d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036d6:	695a      	ldr	r2, [r3, #20]
 80036d8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80036dc:	441a      	add	r2, r3
 80036de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036e0:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80036e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036e4:	699b      	ldr	r3, [r3, #24]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d005      	beq.n	80036f6 <PCD_EP_ISR_Handler+0x51c>
 80036ea:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 80036ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036f0:	691b      	ldr	r3, [r3, #16]
 80036f2:	429a      	cmp	r2, r3
 80036f4:	d206      	bcs.n	8003704 <PCD_EP_ISR_Handler+0x52a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80036f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036f8:	781b      	ldrb	r3, [r3, #0]
 80036fa:	4619      	mov	r1, r3
 80036fc:	6878      	ldr	r0, [r7, #4]
 80036fe:	f005 fea3 	bl	8009448 <HAL_PCD_DataOutStageCallback>
 8003702:	e005      	b.n	8003710 <PCD_EP_ISR_Handler+0x536>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800370a:	4618      	mov	r0, r3
 800370c:	f002 fbda 	bl	8005ec4 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003710:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003714:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003718:	2b00      	cmp	r3, #0
 800371a:	f000 8123 	beq.w	8003964 <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 800371e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003722:	1c5a      	adds	r2, r3, #1
 8003724:	4613      	mov	r3, r2
 8003726:	009b      	lsls	r3, r3, #2
 8003728:	4413      	add	r3, r2
 800372a:	00db      	lsls	r3, r3, #3
 800372c:	687a      	ldr	r2, [r7, #4]
 800372e:	4413      	add	r3, r2
 8003730:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	461a      	mov	r2, r3
 8003738:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800373c:	009b      	lsls	r3, r3, #2
 800373e:	4413      	add	r3, r2
 8003740:	881b      	ldrh	r3, [r3, #0]
 8003742:	b29b      	uxth	r3, r3
 8003744:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003748:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800374c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	461a      	mov	r2, r3
 8003756:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800375a:	009b      	lsls	r3, r3, #2
 800375c:	441a      	add	r2, r3
 800375e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003762:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003766:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800376a:	b29b      	uxth	r3, r3
 800376c:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 800376e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003770:	78db      	ldrb	r3, [r3, #3]
 8003772:	2b01      	cmp	r3, #1
 8003774:	f040 80a2 	bne.w	80038bc <PCD_EP_ISR_Handler+0x6e2>
        {
          ep->xfer_len = 0U;
 8003778:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800377a:	2200      	movs	r2, #0
 800377c:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800377e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003780:	7b1b      	ldrb	r3, [r3, #12]
 8003782:	2b00      	cmp	r3, #0
 8003784:	f000 8093 	beq.w	80038ae <PCD_EP_ISR_Handler+0x6d4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003788:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800378c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003790:	2b00      	cmp	r3, #0
 8003792:	d046      	beq.n	8003822 <PCD_EP_ISR_Handler+0x648>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003794:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003796:	785b      	ldrb	r3, [r3, #1]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d126      	bne.n	80037ea <PCD_EP_ISR_Handler+0x610>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	627b      	str	r3, [r7, #36]	; 0x24
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80037aa:	b29b      	uxth	r3, r3
 80037ac:	461a      	mov	r2, r3
 80037ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b0:	4413      	add	r3, r2
 80037b2:	627b      	str	r3, [r7, #36]	; 0x24
 80037b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037b6:	781b      	ldrb	r3, [r3, #0]
 80037b8:	011a      	lsls	r2, r3, #4
 80037ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037bc:	4413      	add	r3, r2
 80037be:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80037c2:	623b      	str	r3, [r7, #32]
 80037c4:	6a3b      	ldr	r3, [r7, #32]
 80037c6:	881b      	ldrh	r3, [r3, #0]
 80037c8:	b29b      	uxth	r3, r3
 80037ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80037ce:	b29a      	uxth	r2, r3
 80037d0:	6a3b      	ldr	r3, [r7, #32]
 80037d2:	801a      	strh	r2, [r3, #0]
 80037d4:	6a3b      	ldr	r3, [r7, #32]
 80037d6:	881b      	ldrh	r3, [r3, #0]
 80037d8:	b29b      	uxth	r3, r3
 80037da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80037de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80037e2:	b29a      	uxth	r2, r3
 80037e4:	6a3b      	ldr	r3, [r7, #32]
 80037e6:	801a      	strh	r2, [r3, #0]
 80037e8:	e061      	b.n	80038ae <PCD_EP_ISR_Handler+0x6d4>
 80037ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037ec:	785b      	ldrb	r3, [r3, #1]
 80037ee:	2b01      	cmp	r3, #1
 80037f0:	d15d      	bne.n	80038ae <PCD_EP_ISR_Handler+0x6d4>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003800:	b29b      	uxth	r3, r3
 8003802:	461a      	mov	r2, r3
 8003804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003806:	4413      	add	r3, r2
 8003808:	62fb      	str	r3, [r7, #44]	; 0x2c
 800380a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800380c:	781b      	ldrb	r3, [r3, #0]
 800380e:	011a      	lsls	r2, r3, #4
 8003810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003812:	4413      	add	r3, r2
 8003814:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003818:	62bb      	str	r3, [r7, #40]	; 0x28
 800381a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800381c:	2200      	movs	r2, #0
 800381e:	801a      	strh	r2, [r3, #0]
 8003820:	e045      	b.n	80038ae <PCD_EP_ISR_Handler+0x6d4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003828:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800382a:	785b      	ldrb	r3, [r3, #1]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d126      	bne.n	800387e <PCD_EP_ISR_Handler+0x6a4>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	637b      	str	r3, [r7, #52]	; 0x34
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800383e:	b29b      	uxth	r3, r3
 8003840:	461a      	mov	r2, r3
 8003842:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003844:	4413      	add	r3, r2
 8003846:	637b      	str	r3, [r7, #52]	; 0x34
 8003848:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800384a:	781b      	ldrb	r3, [r3, #0]
 800384c:	011a      	lsls	r2, r3, #4
 800384e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003850:	4413      	add	r3, r2
 8003852:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003856:	633b      	str	r3, [r7, #48]	; 0x30
 8003858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800385a:	881b      	ldrh	r3, [r3, #0]
 800385c:	b29b      	uxth	r3, r3
 800385e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003862:	b29a      	uxth	r2, r3
 8003864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003866:	801a      	strh	r2, [r3, #0]
 8003868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800386a:	881b      	ldrh	r3, [r3, #0]
 800386c:	b29b      	uxth	r3, r3
 800386e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003872:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003876:	b29a      	uxth	r2, r3
 8003878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800387a:	801a      	strh	r2, [r3, #0]
 800387c:	e017      	b.n	80038ae <PCD_EP_ISR_Handler+0x6d4>
 800387e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003880:	785b      	ldrb	r3, [r3, #1]
 8003882:	2b01      	cmp	r3, #1
 8003884:	d113      	bne.n	80038ae <PCD_EP_ISR_Handler+0x6d4>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800388e:	b29b      	uxth	r3, r3
 8003890:	461a      	mov	r2, r3
 8003892:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003894:	4413      	add	r3, r2
 8003896:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003898:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800389a:	781b      	ldrb	r3, [r3, #0]
 800389c:	011a      	lsls	r2, r3, #4
 800389e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038a0:	4413      	add	r3, r2
 80038a2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80038a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80038a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038aa:	2200      	movs	r2, #0
 80038ac:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80038ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038b0:	781b      	ldrb	r3, [r3, #0]
 80038b2:	4619      	mov	r1, r3
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	f005 fde2 	bl	800947e <HAL_PCD_DataInStageCallback>
 80038ba:	e053      	b.n	8003964 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80038bc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80038c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d146      	bne.n	8003956 <PCD_EP_ISR_Handler+0x77c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80038d0:	b29b      	uxth	r3, r3
 80038d2:	461a      	mov	r2, r3
 80038d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038d6:	781b      	ldrb	r3, [r3, #0]
 80038d8:	00db      	lsls	r3, r3, #3
 80038da:	4413      	add	r3, r2
 80038dc:	3302      	adds	r3, #2
 80038de:	005b      	lsls	r3, r3, #1
 80038e0:	687a      	ldr	r2, [r7, #4]
 80038e2:	6812      	ldr	r2, [r2, #0]
 80038e4:	4413      	add	r3, r2
 80038e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80038ea:	881b      	ldrh	r3, [r3, #0]
 80038ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038f0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 80038f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038f6:	699a      	ldr	r2, [r3, #24]
 80038f8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d907      	bls.n	8003910 <PCD_EP_ISR_Handler+0x736>
            {
              ep->xfer_len -= TxPctSize;
 8003900:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003902:	699a      	ldr	r2, [r3, #24]
 8003904:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003908:	1ad2      	subs	r2, r2, r3
 800390a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800390c:	619a      	str	r2, [r3, #24]
 800390e:	e002      	b.n	8003916 <PCD_EP_ISR_Handler+0x73c>
            }
            else
            {
              ep->xfer_len = 0U;
 8003910:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003912:	2200      	movs	r2, #0
 8003914:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8003916:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003918:	699b      	ldr	r3, [r3, #24]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d106      	bne.n	800392c <PCD_EP_ISR_Handler+0x752>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800391e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003920:	781b      	ldrb	r3, [r3, #0]
 8003922:	4619      	mov	r1, r3
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	f005 fdaa 	bl	800947e <HAL_PCD_DataInStageCallback>
 800392a:	e01b      	b.n	8003964 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800392c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800392e:	695a      	ldr	r2, [r3, #20]
 8003930:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003934:	441a      	add	r2, r3
 8003936:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003938:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800393a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800393c:	69da      	ldr	r2, [r3, #28]
 800393e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003942:	441a      	add	r2, r3
 8003944:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003946:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800394e:	4618      	mov	r0, r3
 8003950:	f002 fab8 	bl	8005ec4 <USB_EPStartXfer>
 8003954:	e006      	b.n	8003964 <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003956:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800395a:	461a      	mov	r2, r3
 800395c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f000 f91b 	bl	8003b9a <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800396c:	b29b      	uxth	r3, r3
 800396e:	b21b      	sxth	r3, r3
 8003970:	2b00      	cmp	r3, #0
 8003972:	f6ff ac37 	blt.w	80031e4 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003976:	2300      	movs	r3, #0
}
 8003978:	4618      	mov	r0, r3
 800397a:	3758      	adds	r7, #88	; 0x58
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}

08003980 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b088      	sub	sp, #32
 8003984:	af00      	add	r7, sp, #0
 8003986:	60f8      	str	r0, [r7, #12]
 8003988:	60b9      	str	r1, [r7, #8]
 800398a:	4613      	mov	r3, r2
 800398c:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800398e:	88fb      	ldrh	r3, [r7, #6]
 8003990:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003994:	2b00      	cmp	r3, #0
 8003996:	d07e      	beq.n	8003a96 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039a0:	b29b      	uxth	r3, r3
 80039a2:	461a      	mov	r2, r3
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	781b      	ldrb	r3, [r3, #0]
 80039a8:	00db      	lsls	r3, r3, #3
 80039aa:	4413      	add	r3, r2
 80039ac:	3302      	adds	r3, #2
 80039ae:	005b      	lsls	r3, r3, #1
 80039b0:	68fa      	ldr	r2, [r7, #12]
 80039b2:	6812      	ldr	r2, [r2, #0]
 80039b4:	4413      	add	r3, r2
 80039b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80039ba:	881b      	ldrh	r3, [r3, #0]
 80039bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80039c0:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	699a      	ldr	r2, [r3, #24]
 80039c6:	8b7b      	ldrh	r3, [r7, #26]
 80039c8:	429a      	cmp	r2, r3
 80039ca:	d306      	bcc.n	80039da <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	699a      	ldr	r2, [r3, #24]
 80039d0:	8b7b      	ldrh	r3, [r7, #26]
 80039d2:	1ad2      	subs	r2, r2, r3
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	619a      	str	r2, [r3, #24]
 80039d8:	e002      	b.n	80039e0 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	2200      	movs	r2, #0
 80039de:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	699b      	ldr	r3, [r3, #24]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d123      	bne.n	8003a30 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	461a      	mov	r2, r3
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	781b      	ldrb	r3, [r3, #0]
 80039f2:	009b      	lsls	r3, r3, #2
 80039f4:	4413      	add	r3, r2
 80039f6:	881b      	ldrh	r3, [r3, #0]
 80039f8:	b29b      	uxth	r3, r3
 80039fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80039fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a02:	833b      	strh	r3, [r7, #24]
 8003a04:	8b3b      	ldrh	r3, [r7, #24]
 8003a06:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003a0a:	833b      	strh	r3, [r7, #24]
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	461a      	mov	r2, r3
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	781b      	ldrb	r3, [r3, #0]
 8003a16:	009b      	lsls	r3, r3, #2
 8003a18:	441a      	add	r2, r3
 8003a1a:	8b3b      	ldrh	r3, [r7, #24]
 8003a1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a2c:	b29b      	uxth	r3, r3
 8003a2e:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003a30:	88fb      	ldrh	r3, [r7, #6]
 8003a32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d01f      	beq.n	8003a7a <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	461a      	mov	r2, r3
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	781b      	ldrb	r3, [r3, #0]
 8003a44:	009b      	lsls	r3, r3, #2
 8003a46:	4413      	add	r3, r2
 8003a48:	881b      	ldrh	r3, [r3, #0]
 8003a4a:	b29b      	uxth	r3, r3
 8003a4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a54:	82fb      	strh	r3, [r7, #22]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	461a      	mov	r2, r3
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	781b      	ldrb	r3, [r3, #0]
 8003a60:	009b      	lsls	r3, r3, #2
 8003a62:	441a      	add	r2, r3
 8003a64:	8afb      	ldrh	r3, [r7, #22]
 8003a66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a72:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003a76:	b29b      	uxth	r3, r3
 8003a78:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003a7a:	8b7b      	ldrh	r3, [r7, #26]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	f000 8087 	beq.w	8003b90 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	6818      	ldr	r0, [r3, #0]
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	6959      	ldr	r1, [r3, #20]
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	891a      	ldrh	r2, [r3, #8]
 8003a8e:	8b7b      	ldrh	r3, [r7, #26]
 8003a90:	f003 ff37 	bl	8007902 <USB_ReadPMA>
 8003a94:	e07c      	b.n	8003b90 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a9e:	b29b      	uxth	r3, r3
 8003aa0:	461a      	mov	r2, r3
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	781b      	ldrb	r3, [r3, #0]
 8003aa6:	00db      	lsls	r3, r3, #3
 8003aa8:	4413      	add	r3, r2
 8003aaa:	3306      	adds	r3, #6
 8003aac:	005b      	lsls	r3, r3, #1
 8003aae:	68fa      	ldr	r2, [r7, #12]
 8003ab0:	6812      	ldr	r2, [r2, #0]
 8003ab2:	4413      	add	r3, r2
 8003ab4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003ab8:	881b      	ldrh	r3, [r3, #0]
 8003aba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003abe:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	699a      	ldr	r2, [r3, #24]
 8003ac4:	8b7b      	ldrh	r3, [r7, #26]
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	d306      	bcc.n	8003ad8 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	699a      	ldr	r2, [r3, #24]
 8003ace:	8b7b      	ldrh	r3, [r7, #26]
 8003ad0:	1ad2      	subs	r2, r2, r3
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	619a      	str	r2, [r3, #24]
 8003ad6:	e002      	b.n	8003ade <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	2200      	movs	r2, #0
 8003adc:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	699b      	ldr	r3, [r3, #24]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d123      	bne.n	8003b2e <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	461a      	mov	r2, r3
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	781b      	ldrb	r3, [r3, #0]
 8003af0:	009b      	lsls	r3, r3, #2
 8003af2:	4413      	add	r3, r2
 8003af4:	881b      	ldrh	r3, [r3, #0]
 8003af6:	b29b      	uxth	r3, r3
 8003af8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003afc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b00:	83fb      	strh	r3, [r7, #30]
 8003b02:	8bfb      	ldrh	r3, [r7, #30]
 8003b04:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003b08:	83fb      	strh	r3, [r7, #30]
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	461a      	mov	r2, r3
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	781b      	ldrb	r3, [r3, #0]
 8003b14:	009b      	lsls	r3, r3, #2
 8003b16:	441a      	add	r2, r3
 8003b18:	8bfb      	ldrh	r3, [r7, #30]
 8003b1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b2a:	b29b      	uxth	r3, r3
 8003b2c:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003b2e:	88fb      	ldrh	r3, [r7, #6]
 8003b30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d11f      	bne.n	8003b78 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	461a      	mov	r2, r3
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	781b      	ldrb	r3, [r3, #0]
 8003b42:	009b      	lsls	r3, r3, #2
 8003b44:	4413      	add	r3, r2
 8003b46:	881b      	ldrh	r3, [r3, #0]
 8003b48:	b29b      	uxth	r3, r3
 8003b4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b52:	83bb      	strh	r3, [r7, #28]
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	461a      	mov	r2, r3
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	781b      	ldrb	r3, [r3, #0]
 8003b5e:	009b      	lsls	r3, r3, #2
 8003b60:	441a      	add	r2, r3
 8003b62:	8bbb      	ldrh	r3, [r7, #28]
 8003b64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b70:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003b74:	b29b      	uxth	r3, r3
 8003b76:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003b78:	8b7b      	ldrh	r3, [r7, #26]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d008      	beq.n	8003b90 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	6818      	ldr	r0, [r3, #0]
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	6959      	ldr	r1, [r3, #20]
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	895a      	ldrh	r2, [r3, #10]
 8003b8a:	8b7b      	ldrh	r3, [r7, #26]
 8003b8c:	f003 feb9 	bl	8007902 <USB_ReadPMA>
    }
  }

  return count;
 8003b90:	8b7b      	ldrh	r3, [r7, #26]
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	3720      	adds	r7, #32
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}

08003b9a <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003b9a:	b580      	push	{r7, lr}
 8003b9c:	b0a4      	sub	sp, #144	; 0x90
 8003b9e:	af00      	add	r7, sp, #0
 8003ba0:	60f8      	str	r0, [r7, #12]
 8003ba2:	60b9      	str	r1, [r7, #8]
 8003ba4:	4613      	mov	r3, r2
 8003ba6:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003ba8:	88fb      	ldrh	r3, [r7, #6]
 8003baa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	f000 81dd 	beq.w	8003f6e <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003bbc:	b29b      	uxth	r3, r3
 8003bbe:	461a      	mov	r2, r3
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	781b      	ldrb	r3, [r3, #0]
 8003bc4:	00db      	lsls	r3, r3, #3
 8003bc6:	4413      	add	r3, r2
 8003bc8:	3302      	adds	r3, #2
 8003bca:	005b      	lsls	r3, r3, #1
 8003bcc:	68fa      	ldr	r2, [r7, #12]
 8003bce:	6812      	ldr	r2, [r2, #0]
 8003bd0:	4413      	add	r3, r2
 8003bd2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003bd6:	881b      	ldrh	r3, [r3, #0]
 8003bd8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003bdc:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	699a      	ldr	r2, [r3, #24]
 8003be4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003be8:	429a      	cmp	r2, r3
 8003bea:	d907      	bls.n	8003bfc <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	699a      	ldr	r2, [r3, #24]
 8003bf0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003bf4:	1ad2      	subs	r2, r2, r3
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	619a      	str	r2, [r3, #24]
 8003bfa:	e002      	b.n	8003c02 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	699b      	ldr	r3, [r3, #24]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	f040 80b9 	bne.w	8003d7e <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	785b      	ldrb	r3, [r3, #1]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d126      	bne.n	8003c62 <HAL_PCD_EP_DB_Transmit+0xc8>
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c22:	b29b      	uxth	r3, r3
 8003c24:	461a      	mov	r2, r3
 8003c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c28:	4413      	add	r3, r2
 8003c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	781b      	ldrb	r3, [r3, #0]
 8003c30:	011a      	lsls	r2, r3, #4
 8003c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c34:	4413      	add	r3, r2
 8003c36:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003c3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c3e:	881b      	ldrh	r3, [r3, #0]
 8003c40:	b29b      	uxth	r3, r3
 8003c42:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c46:	b29a      	uxth	r2, r3
 8003c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c4a:	801a      	strh	r2, [r3, #0]
 8003c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c4e:	881b      	ldrh	r3, [r3, #0]
 8003c50:	b29b      	uxth	r3, r3
 8003c52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c5a:	b29a      	uxth	r2, r3
 8003c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c5e:	801a      	strh	r2, [r3, #0]
 8003c60:	e01a      	b.n	8003c98 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	785b      	ldrb	r3, [r3, #1]
 8003c66:	2b01      	cmp	r3, #1
 8003c68:	d116      	bne.n	8003c98 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	637b      	str	r3, [r7, #52]	; 0x34
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c78:	b29b      	uxth	r3, r3
 8003c7a:	461a      	mov	r2, r3
 8003c7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c7e:	4413      	add	r3, r2
 8003c80:	637b      	str	r3, [r7, #52]	; 0x34
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	781b      	ldrb	r3, [r3, #0]
 8003c86:	011a      	lsls	r2, r3, #4
 8003c88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c8a:	4413      	add	r3, r2
 8003c8c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003c90:	633b      	str	r3, [r7, #48]	; 0x30
 8003c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c94:	2200      	movs	r2, #0
 8003c96:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	627b      	str	r3, [r7, #36]	; 0x24
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	785b      	ldrb	r3, [r3, #1]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d126      	bne.n	8003cf4 <HAL_PCD_EP_DB_Transmit+0x15a>
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	61fb      	str	r3, [r7, #28]
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003cb4:	b29b      	uxth	r3, r3
 8003cb6:	461a      	mov	r2, r3
 8003cb8:	69fb      	ldr	r3, [r7, #28]
 8003cba:	4413      	add	r3, r2
 8003cbc:	61fb      	str	r3, [r7, #28]
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	781b      	ldrb	r3, [r3, #0]
 8003cc2:	011a      	lsls	r2, r3, #4
 8003cc4:	69fb      	ldr	r3, [r7, #28]
 8003cc6:	4413      	add	r3, r2
 8003cc8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003ccc:	61bb      	str	r3, [r7, #24]
 8003cce:	69bb      	ldr	r3, [r7, #24]
 8003cd0:	881b      	ldrh	r3, [r3, #0]
 8003cd2:	b29b      	uxth	r3, r3
 8003cd4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003cd8:	b29a      	uxth	r2, r3
 8003cda:	69bb      	ldr	r3, [r7, #24]
 8003cdc:	801a      	strh	r2, [r3, #0]
 8003cde:	69bb      	ldr	r3, [r7, #24]
 8003ce0:	881b      	ldrh	r3, [r3, #0]
 8003ce2:	b29b      	uxth	r3, r3
 8003ce4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ce8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003cec:	b29a      	uxth	r2, r3
 8003cee:	69bb      	ldr	r3, [r7, #24]
 8003cf0:	801a      	strh	r2, [r3, #0]
 8003cf2:	e017      	b.n	8003d24 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	785b      	ldrb	r3, [r3, #1]
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d113      	bne.n	8003d24 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d04:	b29b      	uxth	r3, r3
 8003d06:	461a      	mov	r2, r3
 8003d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d0a:	4413      	add	r3, r2
 8003d0c:	627b      	str	r3, [r7, #36]	; 0x24
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	781b      	ldrb	r3, [r3, #0]
 8003d12:	011a      	lsls	r2, r3, #4
 8003d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d16:	4413      	add	r3, r2
 8003d18:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003d1c:	623b      	str	r3, [r7, #32]
 8003d1e:	6a3b      	ldr	r3, [r7, #32]
 8003d20:	2200      	movs	r2, #0
 8003d22:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	781b      	ldrb	r3, [r3, #0]
 8003d28:	4619      	mov	r1, r3
 8003d2a:	68f8      	ldr	r0, [r7, #12]
 8003d2c:	f005 fba7 	bl	800947e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003d30:	88fb      	ldrh	r3, [r7, #6]
 8003d32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	f000 82fc 	beq.w	8004334 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	461a      	mov	r2, r3
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	781b      	ldrb	r3, [r3, #0]
 8003d46:	009b      	lsls	r3, r3, #2
 8003d48:	4413      	add	r3, r2
 8003d4a:	881b      	ldrh	r3, [r3, #0]
 8003d4c:	b29b      	uxth	r3, r3
 8003d4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d56:	82fb      	strh	r3, [r7, #22]
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	461a      	mov	r2, r3
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	781b      	ldrb	r3, [r3, #0]
 8003d62:	009b      	lsls	r3, r3, #2
 8003d64:	441a      	add	r2, r3
 8003d66:	8afb      	ldrh	r3, [r7, #22]
 8003d68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d70:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003d74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d78:	b29b      	uxth	r3, r3
 8003d7a:	8013      	strh	r3, [r2, #0]
 8003d7c:	e2da      	b.n	8004334 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003d7e:	88fb      	ldrh	r3, [r7, #6]
 8003d80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d021      	beq.n	8003dcc <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	461a      	mov	r2, r3
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	781b      	ldrb	r3, [r3, #0]
 8003d92:	009b      	lsls	r3, r3, #2
 8003d94:	4413      	add	r3, r2
 8003d96:	881b      	ldrh	r3, [r3, #0]
 8003d98:	b29b      	uxth	r3, r3
 8003d9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003da2:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	461a      	mov	r2, r3
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	781b      	ldrb	r3, [r3, #0]
 8003db0:	009b      	lsls	r3, r3, #2
 8003db2:	441a      	add	r2, r3
 8003db4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8003db8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003dbc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003dc0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003dc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003dc8:	b29b      	uxth	r3, r3
 8003dca:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003dd2:	2b01      	cmp	r3, #1
 8003dd4:	f040 82ae 	bne.w	8004334 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	695a      	ldr	r2, [r3, #20]
 8003ddc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003de0:	441a      	add	r2, r3
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	69da      	ldr	r2, [r3, #28]
 8003dea:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003dee:	441a      	add	r2, r3
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	6a1a      	ldr	r2, [r3, #32]
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	691b      	ldr	r3, [r3, #16]
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d30b      	bcc.n	8003e18 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	691b      	ldr	r3, [r3, #16]
 8003e04:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	6a1a      	ldr	r2, [r3, #32]
 8003e0c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003e10:	1ad2      	subs	r2, r2, r3
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	621a      	str	r2, [r3, #32]
 8003e16:	e017      	b.n	8003e48 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	6a1b      	ldr	r3, [r3, #32]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d108      	bne.n	8003e32 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8003e20:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003e24:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003e30:	e00a      	b.n	8003e48 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	2200      	movs	r2, #0
 8003e36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	6a1b      	ldr	r3, [r3, #32]
 8003e3e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	2200      	movs	r2, #0
 8003e46:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	785b      	ldrb	r3, [r3, #1]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d165      	bne.n	8003f1c <HAL_PCD_EP_DB_Transmit+0x382>
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e5e:	b29b      	uxth	r3, r3
 8003e60:	461a      	mov	r2, r3
 8003e62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e64:	4413      	add	r3, r2
 8003e66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	781b      	ldrb	r3, [r3, #0]
 8003e6c:	011a      	lsls	r2, r3, #4
 8003e6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e70:	4413      	add	r3, r2
 8003e72:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003e76:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e7a:	881b      	ldrh	r3, [r3, #0]
 8003e7c:	b29b      	uxth	r3, r3
 8003e7e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e82:	b29a      	uxth	r2, r3
 8003e84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e86:	801a      	strh	r2, [r3, #0]
 8003e88:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003e8c:	2b3e      	cmp	r3, #62	; 0x3e
 8003e8e:	d91d      	bls.n	8003ecc <HAL_PCD_EP_DB_Transmit+0x332>
 8003e90:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003e94:	095b      	lsrs	r3, r3, #5
 8003e96:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e98:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003e9c:	f003 031f 	and.w	r3, r3, #31
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d102      	bne.n	8003eaa <HAL_PCD_EP_DB_Transmit+0x310>
 8003ea4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ea6:	3b01      	subs	r3, #1
 8003ea8:	64bb      	str	r3, [r7, #72]	; 0x48
 8003eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eac:	881b      	ldrh	r3, [r3, #0]
 8003eae:	b29a      	uxth	r2, r3
 8003eb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003eb2:	b29b      	uxth	r3, r3
 8003eb4:	029b      	lsls	r3, r3, #10
 8003eb6:	b29b      	uxth	r3, r3
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	b29b      	uxth	r3, r3
 8003ebc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ec0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ec4:	b29a      	uxth	r2, r3
 8003ec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ec8:	801a      	strh	r2, [r3, #0]
 8003eca:	e044      	b.n	8003f56 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003ecc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d10a      	bne.n	8003eea <HAL_PCD_EP_DB_Transmit+0x350>
 8003ed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ed6:	881b      	ldrh	r3, [r3, #0]
 8003ed8:	b29b      	uxth	r3, r3
 8003eda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ede:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ee2:	b29a      	uxth	r2, r3
 8003ee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ee6:	801a      	strh	r2, [r3, #0]
 8003ee8:	e035      	b.n	8003f56 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003eea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003eee:	085b      	lsrs	r3, r3, #1
 8003ef0:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ef2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003ef6:	f003 0301 	and.w	r3, r3, #1
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d002      	beq.n	8003f04 <HAL_PCD_EP_DB_Transmit+0x36a>
 8003efe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f00:	3301      	adds	r3, #1
 8003f02:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f06:	881b      	ldrh	r3, [r3, #0]
 8003f08:	b29a      	uxth	r2, r3
 8003f0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f0c:	b29b      	uxth	r3, r3
 8003f0e:	029b      	lsls	r3, r3, #10
 8003f10:	b29b      	uxth	r3, r3
 8003f12:	4313      	orrs	r3, r2
 8003f14:	b29a      	uxth	r2, r3
 8003f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f18:	801a      	strh	r2, [r3, #0]
 8003f1a:	e01c      	b.n	8003f56 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	785b      	ldrb	r3, [r3, #1]
 8003f20:	2b01      	cmp	r3, #1
 8003f22:	d118      	bne.n	8003f56 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	647b      	str	r3, [r7, #68]	; 0x44
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f32:	b29b      	uxth	r3, r3
 8003f34:	461a      	mov	r2, r3
 8003f36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f38:	4413      	add	r3, r2
 8003f3a:	647b      	str	r3, [r7, #68]	; 0x44
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	781b      	ldrb	r3, [r3, #0]
 8003f40:	011a      	lsls	r2, r3, #4
 8003f42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f44:	4413      	add	r3, r2
 8003f46:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003f4a:	643b      	str	r3, [r7, #64]	; 0x40
 8003f4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003f50:	b29a      	uxth	r2, r3
 8003f52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f54:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	6818      	ldr	r0, [r3, #0]
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	6959      	ldr	r1, [r3, #20]
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	891a      	ldrh	r2, [r3, #8]
 8003f62:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003f66:	b29b      	uxth	r3, r3
 8003f68:	f003 fc86 	bl	8007878 <USB_WritePMA>
 8003f6c:	e1e2      	b.n	8004334 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f76:	b29b      	uxth	r3, r3
 8003f78:	461a      	mov	r2, r3
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	781b      	ldrb	r3, [r3, #0]
 8003f7e:	00db      	lsls	r3, r3, #3
 8003f80:	4413      	add	r3, r2
 8003f82:	3306      	adds	r3, #6
 8003f84:	005b      	lsls	r3, r3, #1
 8003f86:	68fa      	ldr	r2, [r7, #12]
 8003f88:	6812      	ldr	r2, [r2, #0]
 8003f8a:	4413      	add	r3, r2
 8003f8c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003f90:	881b      	ldrh	r3, [r3, #0]
 8003f92:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f96:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	699a      	ldr	r2, [r3, #24]
 8003f9e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003fa2:	429a      	cmp	r2, r3
 8003fa4:	d307      	bcc.n	8003fb6 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	699a      	ldr	r2, [r3, #24]
 8003faa:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003fae:	1ad2      	subs	r2, r2, r3
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	619a      	str	r2, [r3, #24]
 8003fb4:	e002      	b.n	8003fbc <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	699b      	ldr	r3, [r3, #24]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	f040 80c0 	bne.w	8004146 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	785b      	ldrb	r3, [r3, #1]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d126      	bne.n	800401c <HAL_PCD_EP_DB_Transmit+0x482>
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003fdc:	b29b      	uxth	r3, r3
 8003fde:	461a      	mov	r2, r3
 8003fe0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003fe2:	4413      	add	r3, r2
 8003fe4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	781b      	ldrb	r3, [r3, #0]
 8003fea:	011a      	lsls	r2, r3, #4
 8003fec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003fee:	4413      	add	r3, r2
 8003ff0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003ff4:	67bb      	str	r3, [r7, #120]	; 0x78
 8003ff6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ff8:	881b      	ldrh	r3, [r3, #0]
 8003ffa:	b29b      	uxth	r3, r3
 8003ffc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004000:	b29a      	uxth	r2, r3
 8004002:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004004:	801a      	strh	r2, [r3, #0]
 8004006:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004008:	881b      	ldrh	r3, [r3, #0]
 800400a:	b29b      	uxth	r3, r3
 800400c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004010:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004014:	b29a      	uxth	r2, r3
 8004016:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004018:	801a      	strh	r2, [r3, #0]
 800401a:	e01a      	b.n	8004052 <HAL_PCD_EP_DB_Transmit+0x4b8>
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	785b      	ldrb	r3, [r3, #1]
 8004020:	2b01      	cmp	r3, #1
 8004022:	d116      	bne.n	8004052 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	667b      	str	r3, [r7, #100]	; 0x64
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004032:	b29b      	uxth	r3, r3
 8004034:	461a      	mov	r2, r3
 8004036:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004038:	4413      	add	r3, r2
 800403a:	667b      	str	r3, [r7, #100]	; 0x64
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	781b      	ldrb	r3, [r3, #0]
 8004040:	011a      	lsls	r2, r3, #4
 8004042:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004044:	4413      	add	r3, r2
 8004046:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800404a:	663b      	str	r3, [r7, #96]	; 0x60
 800404c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800404e:	2200      	movs	r2, #0
 8004050:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	677b      	str	r3, [r7, #116]	; 0x74
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	785b      	ldrb	r3, [r3, #1]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d12b      	bne.n	80040b8 <HAL_PCD_EP_DB_Transmit+0x51e>
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800406e:	b29b      	uxth	r3, r3
 8004070:	461a      	mov	r2, r3
 8004072:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004074:	4413      	add	r3, r2
 8004076:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	781b      	ldrb	r3, [r3, #0]
 800407c:	011a      	lsls	r2, r3, #4
 800407e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004080:	4413      	add	r3, r2
 8004082:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004086:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800408a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800408e:	881b      	ldrh	r3, [r3, #0]
 8004090:	b29b      	uxth	r3, r3
 8004092:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004096:	b29a      	uxth	r2, r3
 8004098:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800409c:	801a      	strh	r2, [r3, #0]
 800409e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80040a2:	881b      	ldrh	r3, [r3, #0]
 80040a4:	b29b      	uxth	r3, r3
 80040a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040ae:	b29a      	uxth	r2, r3
 80040b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80040b4:	801a      	strh	r2, [r3, #0]
 80040b6:	e017      	b.n	80040e8 <HAL_PCD_EP_DB_Transmit+0x54e>
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	785b      	ldrb	r3, [r3, #1]
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d113      	bne.n	80040e8 <HAL_PCD_EP_DB_Transmit+0x54e>
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040c8:	b29b      	uxth	r3, r3
 80040ca:	461a      	mov	r2, r3
 80040cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040ce:	4413      	add	r3, r2
 80040d0:	677b      	str	r3, [r7, #116]	; 0x74
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	781b      	ldrb	r3, [r3, #0]
 80040d6:	011a      	lsls	r2, r3, #4
 80040d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040da:	4413      	add	r3, r2
 80040dc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80040e0:	673b      	str	r3, [r7, #112]	; 0x70
 80040e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80040e4:	2200      	movs	r2, #0
 80040e6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	781b      	ldrb	r3, [r3, #0]
 80040ec:	4619      	mov	r1, r3
 80040ee:	68f8      	ldr	r0, [r7, #12]
 80040f0:	f005 f9c5 	bl	800947e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80040f4:	88fb      	ldrh	r3, [r7, #6]
 80040f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	f040 811a 	bne.w	8004334 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	461a      	mov	r2, r3
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	781b      	ldrb	r3, [r3, #0]
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	4413      	add	r3, r2
 800410e:	881b      	ldrh	r3, [r3, #0]
 8004110:	b29b      	uxth	r3, r3
 8004112:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004116:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800411a:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	461a      	mov	r2, r3
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	781b      	ldrb	r3, [r3, #0]
 8004128:	009b      	lsls	r3, r3, #2
 800412a:	441a      	add	r2, r3
 800412c:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8004130:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004134:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004138:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800413c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004140:	b29b      	uxth	r3, r3
 8004142:	8013      	strh	r3, [r2, #0]
 8004144:	e0f6      	b.n	8004334 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004146:	88fb      	ldrh	r3, [r7, #6]
 8004148:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800414c:	2b00      	cmp	r3, #0
 800414e:	d121      	bne.n	8004194 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	461a      	mov	r2, r3
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	781b      	ldrb	r3, [r3, #0]
 800415a:	009b      	lsls	r3, r3, #2
 800415c:	4413      	add	r3, r2
 800415e:	881b      	ldrh	r3, [r3, #0]
 8004160:	b29b      	uxth	r3, r3
 8004162:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004166:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800416a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	461a      	mov	r2, r3
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	781b      	ldrb	r3, [r3, #0]
 8004178:	009b      	lsls	r3, r3, #2
 800417a:	441a      	add	r2, r3
 800417c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004180:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004184:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004188:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800418c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004190:	b29b      	uxth	r3, r3
 8004192:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800419a:	2b01      	cmp	r3, #1
 800419c:	f040 80ca 	bne.w	8004334 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	695a      	ldr	r2, [r3, #20]
 80041a4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80041a8:	441a      	add	r2, r3
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	69da      	ldr	r2, [r3, #28]
 80041b2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80041b6:	441a      	add	r2, r3
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	6a1a      	ldr	r2, [r3, #32]
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	691b      	ldr	r3, [r3, #16]
 80041c4:	429a      	cmp	r2, r3
 80041c6:	d30b      	bcc.n	80041e0 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	691b      	ldr	r3, [r3, #16]
 80041cc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	6a1a      	ldr	r2, [r3, #32]
 80041d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80041d8:	1ad2      	subs	r2, r2, r3
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	621a      	str	r2, [r3, #32]
 80041de:	e017      	b.n	8004210 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	6a1b      	ldr	r3, [r3, #32]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d108      	bne.n	80041fa <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 80041e8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80041ec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	2200      	movs	r2, #0
 80041f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80041f8:	e00a      	b.n	8004210 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	6a1b      	ldr	r3, [r3, #32]
 80041fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	2200      	movs	r2, #0
 8004206:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	2200      	movs	r2, #0
 800420c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	657b      	str	r3, [r7, #84]	; 0x54
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	785b      	ldrb	r3, [r3, #1]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d165      	bne.n	80042ea <HAL_PCD_EP_DB_Transmit+0x750>
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800422c:	b29b      	uxth	r3, r3
 800422e:	461a      	mov	r2, r3
 8004230:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004232:	4413      	add	r3, r2
 8004234:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	781b      	ldrb	r3, [r3, #0]
 800423a:	011a      	lsls	r2, r3, #4
 800423c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800423e:	4413      	add	r3, r2
 8004240:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004244:	65bb      	str	r3, [r7, #88]	; 0x58
 8004246:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004248:	881b      	ldrh	r3, [r3, #0]
 800424a:	b29b      	uxth	r3, r3
 800424c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004250:	b29a      	uxth	r2, r3
 8004252:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004254:	801a      	strh	r2, [r3, #0]
 8004256:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800425a:	2b3e      	cmp	r3, #62	; 0x3e
 800425c:	d91d      	bls.n	800429a <HAL_PCD_EP_DB_Transmit+0x700>
 800425e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004262:	095b      	lsrs	r3, r3, #5
 8004264:	66bb      	str	r3, [r7, #104]	; 0x68
 8004266:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800426a:	f003 031f 	and.w	r3, r3, #31
 800426e:	2b00      	cmp	r3, #0
 8004270:	d102      	bne.n	8004278 <HAL_PCD_EP_DB_Transmit+0x6de>
 8004272:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004274:	3b01      	subs	r3, #1
 8004276:	66bb      	str	r3, [r7, #104]	; 0x68
 8004278:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800427a:	881b      	ldrh	r3, [r3, #0]
 800427c:	b29a      	uxth	r2, r3
 800427e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004280:	b29b      	uxth	r3, r3
 8004282:	029b      	lsls	r3, r3, #10
 8004284:	b29b      	uxth	r3, r3
 8004286:	4313      	orrs	r3, r2
 8004288:	b29b      	uxth	r3, r3
 800428a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800428e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004292:	b29a      	uxth	r2, r3
 8004294:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004296:	801a      	strh	r2, [r3, #0]
 8004298:	e041      	b.n	800431e <HAL_PCD_EP_DB_Transmit+0x784>
 800429a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d10a      	bne.n	80042b8 <HAL_PCD_EP_DB_Transmit+0x71e>
 80042a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80042a4:	881b      	ldrh	r3, [r3, #0]
 80042a6:	b29b      	uxth	r3, r3
 80042a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042b0:	b29a      	uxth	r2, r3
 80042b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80042b4:	801a      	strh	r2, [r3, #0]
 80042b6:	e032      	b.n	800431e <HAL_PCD_EP_DB_Transmit+0x784>
 80042b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80042bc:	085b      	lsrs	r3, r3, #1
 80042be:	66bb      	str	r3, [r7, #104]	; 0x68
 80042c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80042c4:	f003 0301 	and.w	r3, r3, #1
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d002      	beq.n	80042d2 <HAL_PCD_EP_DB_Transmit+0x738>
 80042cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80042ce:	3301      	adds	r3, #1
 80042d0:	66bb      	str	r3, [r7, #104]	; 0x68
 80042d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80042d4:	881b      	ldrh	r3, [r3, #0]
 80042d6:	b29a      	uxth	r2, r3
 80042d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80042da:	b29b      	uxth	r3, r3
 80042dc:	029b      	lsls	r3, r3, #10
 80042de:	b29b      	uxth	r3, r3
 80042e0:	4313      	orrs	r3, r2
 80042e2:	b29a      	uxth	r2, r3
 80042e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80042e6:	801a      	strh	r2, [r3, #0]
 80042e8:	e019      	b.n	800431e <HAL_PCD_EP_DB_Transmit+0x784>
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	785b      	ldrb	r3, [r3, #1]
 80042ee:	2b01      	cmp	r3, #1
 80042f0:	d115      	bne.n	800431e <HAL_PCD_EP_DB_Transmit+0x784>
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80042fa:	b29b      	uxth	r3, r3
 80042fc:	461a      	mov	r2, r3
 80042fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004300:	4413      	add	r3, r2
 8004302:	657b      	str	r3, [r7, #84]	; 0x54
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	781b      	ldrb	r3, [r3, #0]
 8004308:	011a      	lsls	r2, r3, #4
 800430a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800430c:	4413      	add	r3, r2
 800430e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004312:	653b      	str	r3, [r7, #80]	; 0x50
 8004314:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004318:	b29a      	uxth	r2, r3
 800431a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800431c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	6818      	ldr	r0, [r3, #0]
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	6959      	ldr	r1, [r3, #20]
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	895a      	ldrh	r2, [r3, #10]
 800432a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800432e:	b29b      	uxth	r3, r3
 8004330:	f003 faa2 	bl	8007878 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	461a      	mov	r2, r3
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	781b      	ldrb	r3, [r3, #0]
 800433e:	009b      	lsls	r3, r3, #2
 8004340:	4413      	add	r3, r2
 8004342:	881b      	ldrh	r3, [r3, #0]
 8004344:	b29b      	uxth	r3, r3
 8004346:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800434a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800434e:	82bb      	strh	r3, [r7, #20]
 8004350:	8abb      	ldrh	r3, [r7, #20]
 8004352:	f083 0310 	eor.w	r3, r3, #16
 8004356:	82bb      	strh	r3, [r7, #20]
 8004358:	8abb      	ldrh	r3, [r7, #20]
 800435a:	f083 0320 	eor.w	r3, r3, #32
 800435e:	82bb      	strh	r3, [r7, #20]
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	461a      	mov	r2, r3
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	781b      	ldrb	r3, [r3, #0]
 800436a:	009b      	lsls	r3, r3, #2
 800436c:	441a      	add	r2, r3
 800436e:	8abb      	ldrh	r3, [r7, #20]
 8004370:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004374:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004378:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800437c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004380:	b29b      	uxth	r3, r3
 8004382:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004384:	2300      	movs	r3, #0
}
 8004386:	4618      	mov	r0, r3
 8004388:	3790      	adds	r7, #144	; 0x90
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}

0800438e <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800438e:	b480      	push	{r7}
 8004390:	b087      	sub	sp, #28
 8004392:	af00      	add	r7, sp, #0
 8004394:	60f8      	str	r0, [r7, #12]
 8004396:	607b      	str	r3, [r7, #4]
 8004398:	460b      	mov	r3, r1
 800439a:	817b      	strh	r3, [r7, #10]
 800439c:	4613      	mov	r3, r2
 800439e:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80043a0:	897b      	ldrh	r3, [r7, #10]
 80043a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043a6:	b29b      	uxth	r3, r3
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d00b      	beq.n	80043c4 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80043ac:	897b      	ldrh	r3, [r7, #10]
 80043ae:	f003 0307 	and.w	r3, r3, #7
 80043b2:	1c5a      	adds	r2, r3, #1
 80043b4:	4613      	mov	r3, r2
 80043b6:	009b      	lsls	r3, r3, #2
 80043b8:	4413      	add	r3, r2
 80043ba:	00db      	lsls	r3, r3, #3
 80043bc:	68fa      	ldr	r2, [r7, #12]
 80043be:	4413      	add	r3, r2
 80043c0:	617b      	str	r3, [r7, #20]
 80043c2:	e009      	b.n	80043d8 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80043c4:	897a      	ldrh	r2, [r7, #10]
 80043c6:	4613      	mov	r3, r2
 80043c8:	009b      	lsls	r3, r3, #2
 80043ca:	4413      	add	r3, r2
 80043cc:	00db      	lsls	r3, r3, #3
 80043ce:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80043d2:	68fa      	ldr	r2, [r7, #12]
 80043d4:	4413      	add	r3, r2
 80043d6:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80043d8:	893b      	ldrh	r3, [r7, #8]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d107      	bne.n	80043ee <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	2200      	movs	r2, #0
 80043e2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	b29a      	uxth	r2, r3
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	80da      	strh	r2, [r3, #6]
 80043ec:	e00b      	b.n	8004406 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	2201      	movs	r2, #1
 80043f2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	b29a      	uxth	r2, r3
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	0c1b      	lsrs	r3, r3, #16
 8004400:	b29a      	uxth	r2, r3
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004406:	2300      	movs	r3, #0
}
 8004408:	4618      	mov	r0, r3
 800440a:	371c      	adds	r7, #28
 800440c:	46bd      	mov	sp, r7
 800440e:	bc80      	pop	{r7}
 8004410:	4770      	bx	lr
	...

08004414 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b088      	sub	sp, #32
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d102      	bne.n	8004428 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	f000 bc6b 	b.w	8004cfe <HAL_RCC_OscConfig+0x8ea>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d022      	beq.n	8004476 <HAL_RCC_OscConfig+0x62>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f003 0301 	and.w	r3, r3, #1
 8004438:	2b00      	cmp	r3, #0
 800443a:	d11c      	bne.n	8004476 <HAL_RCC_OscConfig+0x62>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f003 0302 	and.w	r3, r3, #2
 8004444:	2b00      	cmp	r3, #0
 8004446:	d116      	bne.n	8004476 <HAL_RCC_OscConfig+0x62>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f003 0308 	and.w	r3, r3, #8
 8004450:	2b00      	cmp	r3, #0
 8004452:	d110      	bne.n	8004476 <HAL_RCC_OscConfig+0x62>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f003 0304 	and.w	r3, r3, #4
 800445c:	2b00      	cmp	r3, #0
 800445e:	d10a      	bne.n	8004476 <HAL_RCC_OscConfig+0x62>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f003 0310 	and.w	r3, r3, #16
 8004468:	2b00      	cmp	r3, #0
 800446a:	d104      	bne.n	8004476 <HAL_RCC_OscConfig+0x62>
 800446c:	f44f 71a7 	mov.w	r1, #334	; 0x14e
 8004470:	4897      	ldr	r0, [pc, #604]	; (80046d0 <HAL_RCC_OscConfig+0x2bc>)
 8004472:	f7fc fad6 	bl	8000a22 <assert_failed>

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004476:	4b97      	ldr	r3, [pc, #604]	; (80046d4 <HAL_RCC_OscConfig+0x2c0>)
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	f003 030c 	and.w	r3, r3, #12
 800447e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004480:	4b94      	ldr	r3, [pc, #592]	; (80046d4 <HAL_RCC_OscConfig+0x2c0>)
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004488:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f003 0301 	and.w	r3, r3, #1
 8004492:	2b00      	cmp	r3, #0
 8004494:	f000 808e 	beq.w	80045b4 <HAL_RCC_OscConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d00c      	beq.n	80044ba <HAL_RCC_OscConfig+0xa6>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	d008      	beq.n	80044ba <HAL_RCC_OscConfig+0xa6>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	2b05      	cmp	r3, #5
 80044ae:	d004      	beq.n	80044ba <HAL_RCC_OscConfig+0xa6>
 80044b0:	f240 1157 	movw	r1, #343	; 0x157
 80044b4:	4886      	ldr	r0, [pc, #536]	; (80046d0 <HAL_RCC_OscConfig+0x2bc>)
 80044b6:	f7fc fab4 	bl	8000a22 <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80044ba:	69bb      	ldr	r3, [r7, #24]
 80044bc:	2b08      	cmp	r3, #8
 80044be:	d006      	beq.n	80044ce <HAL_RCC_OscConfig+0xba>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80044c0:	69bb      	ldr	r3, [r7, #24]
 80044c2:	2b0c      	cmp	r3, #12
 80044c4:	d110      	bne.n	80044e8 <HAL_RCC_OscConfig+0xd4>
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044cc:	d10c      	bne.n	80044e8 <HAL_RCC_OscConfig+0xd4>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044ce:	4b81      	ldr	r3, [pc, #516]	; (80046d4 <HAL_RCC_OscConfig+0x2c0>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d06b      	beq.n	80045b2 <HAL_RCC_OscConfig+0x19e>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d167      	bne.n	80045b2 <HAL_RCC_OscConfig+0x19e>
      {
        return HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	f000 bc0b 	b.w	8004cfe <HAL_RCC_OscConfig+0x8ea>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	2b01      	cmp	r3, #1
 80044ee:	d106      	bne.n	80044fe <HAL_RCC_OscConfig+0xea>
 80044f0:	4b78      	ldr	r3, [pc, #480]	; (80046d4 <HAL_RCC_OscConfig+0x2c0>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a77      	ldr	r2, [pc, #476]	; (80046d4 <HAL_RCC_OscConfig+0x2c0>)
 80044f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044fa:	6013      	str	r3, [r2, #0]
 80044fc:	e02d      	b.n	800455a <HAL_RCC_OscConfig+0x146>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d10c      	bne.n	8004520 <HAL_RCC_OscConfig+0x10c>
 8004506:	4b73      	ldr	r3, [pc, #460]	; (80046d4 <HAL_RCC_OscConfig+0x2c0>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a72      	ldr	r2, [pc, #456]	; (80046d4 <HAL_RCC_OscConfig+0x2c0>)
 800450c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004510:	6013      	str	r3, [r2, #0]
 8004512:	4b70      	ldr	r3, [pc, #448]	; (80046d4 <HAL_RCC_OscConfig+0x2c0>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a6f      	ldr	r2, [pc, #444]	; (80046d4 <HAL_RCC_OscConfig+0x2c0>)
 8004518:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800451c:	6013      	str	r3, [r2, #0]
 800451e:	e01c      	b.n	800455a <HAL_RCC_OscConfig+0x146>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	2b05      	cmp	r3, #5
 8004526:	d10c      	bne.n	8004542 <HAL_RCC_OscConfig+0x12e>
 8004528:	4b6a      	ldr	r3, [pc, #424]	; (80046d4 <HAL_RCC_OscConfig+0x2c0>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a69      	ldr	r2, [pc, #420]	; (80046d4 <HAL_RCC_OscConfig+0x2c0>)
 800452e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004532:	6013      	str	r3, [r2, #0]
 8004534:	4b67      	ldr	r3, [pc, #412]	; (80046d4 <HAL_RCC_OscConfig+0x2c0>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a66      	ldr	r2, [pc, #408]	; (80046d4 <HAL_RCC_OscConfig+0x2c0>)
 800453a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800453e:	6013      	str	r3, [r2, #0]
 8004540:	e00b      	b.n	800455a <HAL_RCC_OscConfig+0x146>
 8004542:	4b64      	ldr	r3, [pc, #400]	; (80046d4 <HAL_RCC_OscConfig+0x2c0>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a63      	ldr	r2, [pc, #396]	; (80046d4 <HAL_RCC_OscConfig+0x2c0>)
 8004548:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800454c:	6013      	str	r3, [r2, #0]
 800454e:	4b61      	ldr	r3, [pc, #388]	; (80046d4 <HAL_RCC_OscConfig+0x2c0>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a60      	ldr	r2, [pc, #384]	; (80046d4 <HAL_RCC_OscConfig+0x2c0>)
 8004554:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004558:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d013      	beq.n	800458a <HAL_RCC_OscConfig+0x176>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004562:	f7fc fb5d 	bl	8000c20 <HAL_GetTick>
 8004566:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004568:	e008      	b.n	800457c <HAL_RCC_OscConfig+0x168>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800456a:	f7fc fb59 	bl	8000c20 <HAL_GetTick>
 800456e:	4602      	mov	r2, r0
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	1ad3      	subs	r3, r2, r3
 8004574:	2b64      	cmp	r3, #100	; 0x64
 8004576:	d901      	bls.n	800457c <HAL_RCC_OscConfig+0x168>
          {
            return HAL_TIMEOUT;
 8004578:	2303      	movs	r3, #3
 800457a:	e3c0      	b.n	8004cfe <HAL_RCC_OscConfig+0x8ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800457c:	4b55      	ldr	r3, [pc, #340]	; (80046d4 <HAL_RCC_OscConfig+0x2c0>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004584:	2b00      	cmp	r3, #0
 8004586:	d0f0      	beq.n	800456a <HAL_RCC_OscConfig+0x156>
 8004588:	e014      	b.n	80045b4 <HAL_RCC_OscConfig+0x1a0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800458a:	f7fc fb49 	bl	8000c20 <HAL_GetTick>
 800458e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004590:	e008      	b.n	80045a4 <HAL_RCC_OscConfig+0x190>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004592:	f7fc fb45 	bl	8000c20 <HAL_GetTick>
 8004596:	4602      	mov	r2, r0
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	1ad3      	subs	r3, r2, r3
 800459c:	2b64      	cmp	r3, #100	; 0x64
 800459e:	d901      	bls.n	80045a4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80045a0:	2303      	movs	r3, #3
 80045a2:	e3ac      	b.n	8004cfe <HAL_RCC_OscConfig+0x8ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80045a4:	4b4b      	ldr	r3, [pc, #300]	; (80046d4 <HAL_RCC_OscConfig+0x2c0>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d1f0      	bne.n	8004592 <HAL_RCC_OscConfig+0x17e>
 80045b0:	e000      	b.n	80045b4 <HAL_RCC_OscConfig+0x1a0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045b2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f003 0302 	and.w	r3, r3, #2
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d070      	beq.n	80046a2 <HAL_RCC_OscConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	68db      	ldr	r3, [r3, #12]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d008      	beq.n	80045da <HAL_RCC_OscConfig+0x1c6>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	68db      	ldr	r3, [r3, #12]
 80045cc:	2b01      	cmp	r3, #1
 80045ce:	d004      	beq.n	80045da <HAL_RCC_OscConfig+0x1c6>
 80045d0:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 80045d4:	483e      	ldr	r0, [pc, #248]	; (80046d0 <HAL_RCC_OscConfig+0x2bc>)
 80045d6:	f7fc fa24 	bl	8000a22 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	691b      	ldr	r3, [r3, #16]
 80045de:	2b1f      	cmp	r3, #31
 80045e0:	d904      	bls.n	80045ec <HAL_RCC_OscConfig+0x1d8>
 80045e2:	f240 118b 	movw	r1, #395	; 0x18b
 80045e6:	483a      	ldr	r0, [pc, #232]	; (80046d0 <HAL_RCC_OscConfig+0x2bc>)
 80045e8:	f7fc fa1b 	bl	8000a22 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80045ec:	69bb      	ldr	r3, [r7, #24]
 80045ee:	2b04      	cmp	r3, #4
 80045f0:	d005      	beq.n	80045fe <HAL_RCC_OscConfig+0x1ea>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80045f2:	69bb      	ldr	r3, [r7, #24]
 80045f4:	2b0c      	cmp	r3, #12
 80045f6:	d119      	bne.n	800462c <HAL_RCC_OscConfig+0x218>
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d116      	bne.n	800462c <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045fe:	4b35      	ldr	r3, [pc, #212]	; (80046d4 <HAL_RCC_OscConfig+0x2c0>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f003 0302 	and.w	r3, r3, #2
 8004606:	2b00      	cmp	r3, #0
 8004608:	d005      	beq.n	8004616 <HAL_RCC_OscConfig+0x202>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	68db      	ldr	r3, [r3, #12]
 800460e:	2b01      	cmp	r3, #1
 8004610:	d001      	beq.n	8004616 <HAL_RCC_OscConfig+0x202>
      {
        return HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	e373      	b.n	8004cfe <HAL_RCC_OscConfig+0x8ea>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004616:	4b2f      	ldr	r3, [pc, #188]	; (80046d4 <HAL_RCC_OscConfig+0x2c0>)
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	691b      	ldr	r3, [r3, #16]
 8004622:	021b      	lsls	r3, r3, #8
 8004624:	492b      	ldr	r1, [pc, #172]	; (80046d4 <HAL_RCC_OscConfig+0x2c0>)
 8004626:	4313      	orrs	r3, r2
 8004628:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800462a:	e03a      	b.n	80046a2 <HAL_RCC_OscConfig+0x28e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	68db      	ldr	r3, [r3, #12]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d020      	beq.n	8004676 <HAL_RCC_OscConfig+0x262>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004634:	4b28      	ldr	r3, [pc, #160]	; (80046d8 <HAL_RCC_OscConfig+0x2c4>)
 8004636:	2201      	movs	r2, #1
 8004638:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800463a:	f7fc faf1 	bl	8000c20 <HAL_GetTick>
 800463e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004640:	e008      	b.n	8004654 <HAL_RCC_OscConfig+0x240>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004642:	f7fc faed 	bl	8000c20 <HAL_GetTick>
 8004646:	4602      	mov	r2, r0
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	1ad3      	subs	r3, r2, r3
 800464c:	2b02      	cmp	r3, #2
 800464e:	d901      	bls.n	8004654 <HAL_RCC_OscConfig+0x240>
          {
            return HAL_TIMEOUT;
 8004650:	2303      	movs	r3, #3
 8004652:	e354      	b.n	8004cfe <HAL_RCC_OscConfig+0x8ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004654:	4b1f      	ldr	r3, [pc, #124]	; (80046d4 <HAL_RCC_OscConfig+0x2c0>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f003 0302 	and.w	r3, r3, #2
 800465c:	2b00      	cmp	r3, #0
 800465e:	d0f0      	beq.n	8004642 <HAL_RCC_OscConfig+0x22e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004660:	4b1c      	ldr	r3, [pc, #112]	; (80046d4 <HAL_RCC_OscConfig+0x2c0>)
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	691b      	ldr	r3, [r3, #16]
 800466c:	021b      	lsls	r3, r3, #8
 800466e:	4919      	ldr	r1, [pc, #100]	; (80046d4 <HAL_RCC_OscConfig+0x2c0>)
 8004670:	4313      	orrs	r3, r2
 8004672:	604b      	str	r3, [r1, #4]
 8004674:	e015      	b.n	80046a2 <HAL_RCC_OscConfig+0x28e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004676:	4b18      	ldr	r3, [pc, #96]	; (80046d8 <HAL_RCC_OscConfig+0x2c4>)
 8004678:	2200      	movs	r2, #0
 800467a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800467c:	f7fc fad0 	bl	8000c20 <HAL_GetTick>
 8004680:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004682:	e008      	b.n	8004696 <HAL_RCC_OscConfig+0x282>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004684:	f7fc facc 	bl	8000c20 <HAL_GetTick>
 8004688:	4602      	mov	r2, r0
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	1ad3      	subs	r3, r2, r3
 800468e:	2b02      	cmp	r3, #2
 8004690:	d901      	bls.n	8004696 <HAL_RCC_OscConfig+0x282>
          {
            return HAL_TIMEOUT;
 8004692:	2303      	movs	r3, #3
 8004694:	e333      	b.n	8004cfe <HAL_RCC_OscConfig+0x8ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004696:	4b0f      	ldr	r3, [pc, #60]	; (80046d4 <HAL_RCC_OscConfig+0x2c0>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f003 0302 	and.w	r3, r3, #2
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d1f0      	bne.n	8004684 <HAL_RCC_OscConfig+0x270>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f003 0310 	and.w	r3, r3, #16
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	f000 8129 	beq.w	8004902 <HAL_RCC_OscConfig+0x4ee>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80046b0:	69bb      	ldr	r3, [r7, #24]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	f040 80a4 	bne.w	8004800 <HAL_RCC_OscConfig+0x3ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80046b8:	4b06      	ldr	r3, [pc, #24]	; (80046d4 <HAL_RCC_OscConfig+0x2c0>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d00b      	beq.n	80046dc <HAL_RCC_OscConfig+0x2c8>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	699b      	ldr	r3, [r3, #24]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d107      	bne.n	80046dc <HAL_RCC_OscConfig+0x2c8>
      {
        return HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	e316      	b.n	8004cfe <HAL_RCC_OscConfig+0x8ea>
 80046d0:	0800a290 	.word	0x0800a290
 80046d4:	40023800 	.word	0x40023800
 80046d8:	42470000 	.word	0x42470000
      }
      /* Otherwise, just the calibration and MSI range change are allowed */
      else
      {
       /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	69db      	ldr	r3, [r3, #28]
 80046e0:	2bff      	cmp	r3, #255	; 0xff
 80046e2:	d904      	bls.n	80046ee <HAL_RCC_OscConfig+0x2da>
 80046e4:	f240 11d5 	movw	r1, #469	; 0x1d5
 80046e8:	4899      	ldr	r0, [pc, #612]	; (8004950 <HAL_RCC_OscConfig+0x53c>)
 80046ea:	f7fc f99a 	bl	8000a22 <assert_failed>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6a1b      	ldr	r3, [r3, #32]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d022      	beq.n	800473c <HAL_RCC_OscConfig+0x328>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6a1b      	ldr	r3, [r3, #32]
 80046fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046fe:	d01d      	beq.n	800473c <HAL_RCC_OscConfig+0x328>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6a1b      	ldr	r3, [r3, #32]
 8004704:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004708:	d018      	beq.n	800473c <HAL_RCC_OscConfig+0x328>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6a1b      	ldr	r3, [r3, #32]
 800470e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004712:	d013      	beq.n	800473c <HAL_RCC_OscConfig+0x328>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6a1b      	ldr	r3, [r3, #32]
 8004718:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800471c:	d00e      	beq.n	800473c <HAL_RCC_OscConfig+0x328>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6a1b      	ldr	r3, [r3, #32]
 8004722:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004726:	d009      	beq.n	800473c <HAL_RCC_OscConfig+0x328>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6a1b      	ldr	r3, [r3, #32]
 800472c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004730:	d004      	beq.n	800473c <HAL_RCC_OscConfig+0x328>
 8004732:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 8004736:	4886      	ldr	r0, [pc, #536]	; (8004950 <HAL_RCC_OscConfig+0x53c>)
 8004738:	f7fc f973 	bl	8000a22 <assert_failed>

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6a1a      	ldr	r2, [r3, #32]
 8004740:	4b84      	ldr	r3, [pc, #528]	; (8004954 <HAL_RCC_OscConfig+0x540>)
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8004748:	429a      	cmp	r2, r3
 800474a:	d91d      	bls.n	8004788 <HAL_RCC_OscConfig+0x374>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6a1b      	ldr	r3, [r3, #32]
 8004750:	4618      	mov	r0, r3
 8004752:	f000 fd5b 	bl	800520c <RCC_SetFlashLatencyFromMSIRange>
 8004756:	4603      	mov	r3, r0
 8004758:	2b00      	cmp	r3, #0
 800475a:	d001      	beq.n	8004760 <HAL_RCC_OscConfig+0x34c>
          {
            return HAL_ERROR;
 800475c:	2301      	movs	r3, #1
 800475e:	e2ce      	b.n	8004cfe <HAL_RCC_OscConfig+0x8ea>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004760:	4b7c      	ldr	r3, [pc, #496]	; (8004954 <HAL_RCC_OscConfig+0x540>)
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6a1b      	ldr	r3, [r3, #32]
 800476c:	4979      	ldr	r1, [pc, #484]	; (8004954 <HAL_RCC_OscConfig+0x540>)
 800476e:	4313      	orrs	r3, r2
 8004770:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004772:	4b78      	ldr	r3, [pc, #480]	; (8004954 <HAL_RCC_OscConfig+0x540>)
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	69db      	ldr	r3, [r3, #28]
 800477e:	061b      	lsls	r3, r3, #24
 8004780:	4974      	ldr	r1, [pc, #464]	; (8004954 <HAL_RCC_OscConfig+0x540>)
 8004782:	4313      	orrs	r3, r2
 8004784:	604b      	str	r3, [r1, #4]
 8004786:	e01c      	b.n	80047c2 <HAL_RCC_OscConfig+0x3ae>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004788:	4b72      	ldr	r3, [pc, #456]	; (8004954 <HAL_RCC_OscConfig+0x540>)
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6a1b      	ldr	r3, [r3, #32]
 8004794:	496f      	ldr	r1, [pc, #444]	; (8004954 <HAL_RCC_OscConfig+0x540>)
 8004796:	4313      	orrs	r3, r2
 8004798:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800479a:	4b6e      	ldr	r3, [pc, #440]	; (8004954 <HAL_RCC_OscConfig+0x540>)
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	69db      	ldr	r3, [r3, #28]
 80047a6:	061b      	lsls	r3, r3, #24
 80047a8:	496a      	ldr	r1, [pc, #424]	; (8004954 <HAL_RCC_OscConfig+0x540>)
 80047aa:	4313      	orrs	r3, r2
 80047ac:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6a1b      	ldr	r3, [r3, #32]
 80047b2:	4618      	mov	r0, r3
 80047b4:	f000 fd2a 	bl	800520c <RCC_SetFlashLatencyFromMSIRange>
 80047b8:	4603      	mov	r3, r0
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d001      	beq.n	80047c2 <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	e29d      	b.n	8004cfe <HAL_RCC_OscConfig+0x8ea>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6a1b      	ldr	r3, [r3, #32]
 80047c6:	0b5b      	lsrs	r3, r3, #13
 80047c8:	3301      	adds	r3, #1
 80047ca:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80047ce:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80047d2:	4a60      	ldr	r2, [pc, #384]	; (8004954 <HAL_RCC_OscConfig+0x540>)
 80047d4:	6892      	ldr	r2, [r2, #8]
 80047d6:	0912      	lsrs	r2, r2, #4
 80047d8:	f002 020f 	and.w	r2, r2, #15
 80047dc:	495e      	ldr	r1, [pc, #376]	; (8004958 <HAL_RCC_OscConfig+0x544>)
 80047de:	5c8a      	ldrb	r2, [r1, r2]
 80047e0:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80047e2:	4a5e      	ldr	r2, [pc, #376]	; (800495c <HAL_RCC_OscConfig+0x548>)
 80047e4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80047e6:	4b5e      	ldr	r3, [pc, #376]	; (8004960 <HAL_RCC_OscConfig+0x54c>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4618      	mov	r0, r3
 80047ec:	f7fc f9cc 	bl	8000b88 <HAL_InitTick>
 80047f0:	4603      	mov	r3, r0
 80047f2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80047f4:	7bfb      	ldrb	r3, [r7, #15]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	f000 8083 	beq.w	8004902 <HAL_RCC_OscConfig+0x4ee>
        {
          return status;
 80047fc:	7bfb      	ldrb	r3, [r7, #15]
 80047fe:	e27e      	b.n	8004cfe <HAL_RCC_OscConfig+0x8ea>
      }
    }
    else
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	699b      	ldr	r3, [r3, #24]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d008      	beq.n	800481a <HAL_RCC_OscConfig+0x406>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	699b      	ldr	r3, [r3, #24]
 800480c:	2b01      	cmp	r3, #1
 800480e:	d004      	beq.n	800481a <HAL_RCC_OscConfig+0x406>
 8004810:	f240 2106 	movw	r1, #518	; 0x206
 8004814:	484e      	ldr	r0, [pc, #312]	; (8004950 <HAL_RCC_OscConfig+0x53c>)
 8004816:	f7fc f904 	bl	8000a22 <assert_failed>

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	699b      	ldr	r3, [r3, #24]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d059      	beq.n	80048d6 <HAL_RCC_OscConfig+0x4c2>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004822:	4b50      	ldr	r3, [pc, #320]	; (8004964 <HAL_RCC_OscConfig+0x550>)
 8004824:	2201      	movs	r2, #1
 8004826:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004828:	f7fc f9fa 	bl	8000c20 <HAL_GetTick>
 800482c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800482e:	e008      	b.n	8004842 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004830:	f7fc f9f6 	bl	8000c20 <HAL_GetTick>
 8004834:	4602      	mov	r2, r0
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	1ad3      	subs	r3, r2, r3
 800483a:	2b02      	cmp	r3, #2
 800483c:	d901      	bls.n	8004842 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800483e:	2303      	movs	r3, #3
 8004840:	e25d      	b.n	8004cfe <HAL_RCC_OscConfig+0x8ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004842:	4b44      	ldr	r3, [pc, #272]	; (8004954 <HAL_RCC_OscConfig+0x540>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800484a:	2b00      	cmp	r3, #0
 800484c:	d0f0      	beq.n	8004830 <HAL_RCC_OscConfig+0x41c>
          }
        }
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	69db      	ldr	r3, [r3, #28]
 8004852:	2bff      	cmp	r3, #255	; 0xff
 8004854:	d904      	bls.n	8004860 <HAL_RCC_OscConfig+0x44c>
 8004856:	f240 211a 	movw	r1, #538	; 0x21a
 800485a:	483d      	ldr	r0, [pc, #244]	; (8004950 <HAL_RCC_OscConfig+0x53c>)
 800485c:	f7fc f8e1 	bl	8000a22 <assert_failed>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6a1b      	ldr	r3, [r3, #32]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d022      	beq.n	80048ae <HAL_RCC_OscConfig+0x49a>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6a1b      	ldr	r3, [r3, #32]
 800486c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004870:	d01d      	beq.n	80048ae <HAL_RCC_OscConfig+0x49a>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6a1b      	ldr	r3, [r3, #32]
 8004876:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800487a:	d018      	beq.n	80048ae <HAL_RCC_OscConfig+0x49a>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6a1b      	ldr	r3, [r3, #32]
 8004880:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004884:	d013      	beq.n	80048ae <HAL_RCC_OscConfig+0x49a>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6a1b      	ldr	r3, [r3, #32]
 800488a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800488e:	d00e      	beq.n	80048ae <HAL_RCC_OscConfig+0x49a>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6a1b      	ldr	r3, [r3, #32]
 8004894:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004898:	d009      	beq.n	80048ae <HAL_RCC_OscConfig+0x49a>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6a1b      	ldr	r3, [r3, #32]
 800489e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80048a2:	d004      	beq.n	80048ae <HAL_RCC_OscConfig+0x49a>
 80048a4:	f240 211b 	movw	r1, #539	; 0x21b
 80048a8:	4829      	ldr	r0, [pc, #164]	; (8004950 <HAL_RCC_OscConfig+0x53c>)
 80048aa:	f7fc f8ba 	bl	8000a22 <assert_failed>

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80048ae:	4b29      	ldr	r3, [pc, #164]	; (8004954 <HAL_RCC_OscConfig+0x540>)
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6a1b      	ldr	r3, [r3, #32]
 80048ba:	4926      	ldr	r1, [pc, #152]	; (8004954 <HAL_RCC_OscConfig+0x540>)
 80048bc:	4313      	orrs	r3, r2
 80048be:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80048c0:	4b24      	ldr	r3, [pc, #144]	; (8004954 <HAL_RCC_OscConfig+0x540>)
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	69db      	ldr	r3, [r3, #28]
 80048cc:	061b      	lsls	r3, r3, #24
 80048ce:	4921      	ldr	r1, [pc, #132]	; (8004954 <HAL_RCC_OscConfig+0x540>)
 80048d0:	4313      	orrs	r3, r2
 80048d2:	604b      	str	r3, [r1, #4]
 80048d4:	e015      	b.n	8004902 <HAL_RCC_OscConfig+0x4ee>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80048d6:	4b23      	ldr	r3, [pc, #140]	; (8004964 <HAL_RCC_OscConfig+0x550>)
 80048d8:	2200      	movs	r2, #0
 80048da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048dc:	f7fc f9a0 	bl	8000c20 <HAL_GetTick>
 80048e0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80048e2:	e008      	b.n	80048f6 <HAL_RCC_OscConfig+0x4e2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80048e4:	f7fc f99c 	bl	8000c20 <HAL_GetTick>
 80048e8:	4602      	mov	r2, r0
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	1ad3      	subs	r3, r2, r3
 80048ee:	2b02      	cmp	r3, #2
 80048f0:	d901      	bls.n	80048f6 <HAL_RCC_OscConfig+0x4e2>
          {
            return HAL_TIMEOUT;
 80048f2:	2303      	movs	r3, #3
 80048f4:	e203      	b.n	8004cfe <HAL_RCC_OscConfig+0x8ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80048f6:	4b17      	ldr	r3, [pc, #92]	; (8004954 <HAL_RCC_OscConfig+0x540>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d1f0      	bne.n	80048e4 <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f003 0308 	and.w	r3, r3, #8
 800490a:	2b00      	cmp	r3, #0
 800490c:	d04b      	beq.n	80049a6 <HAL_RCC_OscConfig+0x592>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	695b      	ldr	r3, [r3, #20]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d008      	beq.n	8004928 <HAL_RCC_OscConfig+0x514>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	695b      	ldr	r3, [r3, #20]
 800491a:	2b01      	cmp	r3, #1
 800491c:	d004      	beq.n	8004928 <HAL_RCC_OscConfig+0x514>
 800491e:	f240 213a 	movw	r1, #570	; 0x23a
 8004922:	480b      	ldr	r0, [pc, #44]	; (8004950 <HAL_RCC_OscConfig+0x53c>)
 8004924:	f7fc f87d 	bl	8000a22 <assert_failed>

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	695b      	ldr	r3, [r3, #20]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d024      	beq.n	800497a <HAL_RCC_OscConfig+0x566>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004930:	4b0d      	ldr	r3, [pc, #52]	; (8004968 <HAL_RCC_OscConfig+0x554>)
 8004932:	2201      	movs	r2, #1
 8004934:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004936:	f7fc f973 	bl	8000c20 <HAL_GetTick>
 800493a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800493c:	e016      	b.n	800496c <HAL_RCC_OscConfig+0x558>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800493e:	f7fc f96f 	bl	8000c20 <HAL_GetTick>
 8004942:	4602      	mov	r2, r0
 8004944:	693b      	ldr	r3, [r7, #16]
 8004946:	1ad3      	subs	r3, r2, r3
 8004948:	2b02      	cmp	r3, #2
 800494a:	d90f      	bls.n	800496c <HAL_RCC_OscConfig+0x558>
        {
          return HAL_TIMEOUT;
 800494c:	2303      	movs	r3, #3
 800494e:	e1d6      	b.n	8004cfe <HAL_RCC_OscConfig+0x8ea>
 8004950:	0800a290 	.word	0x0800a290
 8004954:	40023800 	.word	0x40023800
 8004958:	0800a31c 	.word	0x0800a31c
 800495c:	20000000 	.word	0x20000000
 8004960:	20000004 	.word	0x20000004
 8004964:	42470020 	.word	0x42470020
 8004968:	42470680 	.word	0x42470680
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800496c:	4b65      	ldr	r3, [pc, #404]	; (8004b04 <HAL_RCC_OscConfig+0x6f0>)
 800496e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004970:	f003 0302 	and.w	r3, r3, #2
 8004974:	2b00      	cmp	r3, #0
 8004976:	d0e2      	beq.n	800493e <HAL_RCC_OscConfig+0x52a>
 8004978:	e015      	b.n	80049a6 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800497a:	4b63      	ldr	r3, [pc, #396]	; (8004b08 <HAL_RCC_OscConfig+0x6f4>)
 800497c:	2200      	movs	r2, #0
 800497e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004980:	f7fc f94e 	bl	8000c20 <HAL_GetTick>
 8004984:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004986:	e008      	b.n	800499a <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004988:	f7fc f94a 	bl	8000c20 <HAL_GetTick>
 800498c:	4602      	mov	r2, r0
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	1ad3      	subs	r3, r2, r3
 8004992:	2b02      	cmp	r3, #2
 8004994:	d901      	bls.n	800499a <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8004996:	2303      	movs	r3, #3
 8004998:	e1b1      	b.n	8004cfe <HAL_RCC_OscConfig+0x8ea>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800499a:	4b5a      	ldr	r3, [pc, #360]	; (8004b04 <HAL_RCC_OscConfig+0x6f0>)
 800499c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800499e:	f003 0302 	and.w	r3, r3, #2
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d1f0      	bne.n	8004988 <HAL_RCC_OscConfig+0x574>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f003 0304 	and.w	r3, r3, #4
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	f000 80bf 	beq.w	8004b32 <HAL_RCC_OscConfig+0x71e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049b4:	2300      	movs	r3, #0
 80049b6:	77fb      	strb	r3, [r7, #31]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d00c      	beq.n	80049da <HAL_RCC_OscConfig+0x5c6>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d008      	beq.n	80049da <HAL_RCC_OscConfig+0x5c6>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	689b      	ldr	r3, [r3, #8]
 80049cc:	2b05      	cmp	r3, #5
 80049ce:	d004      	beq.n	80049da <HAL_RCC_OscConfig+0x5c6>
 80049d0:	f240 2166 	movw	r1, #614	; 0x266
 80049d4:	484d      	ldr	r0, [pc, #308]	; (8004b0c <HAL_RCC_OscConfig+0x6f8>)
 80049d6:	f7fc f824 	bl	8000a22 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049da:	4b4a      	ldr	r3, [pc, #296]	; (8004b04 <HAL_RCC_OscConfig+0x6f0>)
 80049dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d10d      	bne.n	8004a02 <HAL_RCC_OscConfig+0x5ee>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049e6:	4b47      	ldr	r3, [pc, #284]	; (8004b04 <HAL_RCC_OscConfig+0x6f0>)
 80049e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ea:	4a46      	ldr	r2, [pc, #280]	; (8004b04 <HAL_RCC_OscConfig+0x6f0>)
 80049ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049f0:	6253      	str	r3, [r2, #36]	; 0x24
 80049f2:	4b44      	ldr	r3, [pc, #272]	; (8004b04 <HAL_RCC_OscConfig+0x6f0>)
 80049f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049fa:	60bb      	str	r3, [r7, #8]
 80049fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049fe:	2301      	movs	r3, #1
 8004a00:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a02:	4b43      	ldr	r3, [pc, #268]	; (8004b10 <HAL_RCC_OscConfig+0x6fc>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d118      	bne.n	8004a40 <HAL_RCC_OscConfig+0x62c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a0e:	4b40      	ldr	r3, [pc, #256]	; (8004b10 <HAL_RCC_OscConfig+0x6fc>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a3f      	ldr	r2, [pc, #252]	; (8004b10 <HAL_RCC_OscConfig+0x6fc>)
 8004a14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a1a:	f7fc f901 	bl	8000c20 <HAL_GetTick>
 8004a1e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a20:	e008      	b.n	8004a34 <HAL_RCC_OscConfig+0x620>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a22:	f7fc f8fd 	bl	8000c20 <HAL_GetTick>
 8004a26:	4602      	mov	r2, r0
 8004a28:	693b      	ldr	r3, [r7, #16]
 8004a2a:	1ad3      	subs	r3, r2, r3
 8004a2c:	2b64      	cmp	r3, #100	; 0x64
 8004a2e:	d901      	bls.n	8004a34 <HAL_RCC_OscConfig+0x620>
        {
          return HAL_TIMEOUT;
 8004a30:	2303      	movs	r3, #3
 8004a32:	e164      	b.n	8004cfe <HAL_RCC_OscConfig+0x8ea>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a34:	4b36      	ldr	r3, [pc, #216]	; (8004b10 <HAL_RCC_OscConfig+0x6fc>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d0f0      	beq.n	8004a22 <HAL_RCC_OscConfig+0x60e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	2b01      	cmp	r3, #1
 8004a46:	d106      	bne.n	8004a56 <HAL_RCC_OscConfig+0x642>
 8004a48:	4b2e      	ldr	r3, [pc, #184]	; (8004b04 <HAL_RCC_OscConfig+0x6f0>)
 8004a4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a4c:	4a2d      	ldr	r2, [pc, #180]	; (8004b04 <HAL_RCC_OscConfig+0x6f0>)
 8004a4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a52:	6353      	str	r3, [r2, #52]	; 0x34
 8004a54:	e02d      	b.n	8004ab2 <HAL_RCC_OscConfig+0x69e>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d10c      	bne.n	8004a78 <HAL_RCC_OscConfig+0x664>
 8004a5e:	4b29      	ldr	r3, [pc, #164]	; (8004b04 <HAL_RCC_OscConfig+0x6f0>)
 8004a60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a62:	4a28      	ldr	r2, [pc, #160]	; (8004b04 <HAL_RCC_OscConfig+0x6f0>)
 8004a64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a68:	6353      	str	r3, [r2, #52]	; 0x34
 8004a6a:	4b26      	ldr	r3, [pc, #152]	; (8004b04 <HAL_RCC_OscConfig+0x6f0>)
 8004a6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a6e:	4a25      	ldr	r2, [pc, #148]	; (8004b04 <HAL_RCC_OscConfig+0x6f0>)
 8004a70:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a74:	6353      	str	r3, [r2, #52]	; 0x34
 8004a76:	e01c      	b.n	8004ab2 <HAL_RCC_OscConfig+0x69e>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	2b05      	cmp	r3, #5
 8004a7e:	d10c      	bne.n	8004a9a <HAL_RCC_OscConfig+0x686>
 8004a80:	4b20      	ldr	r3, [pc, #128]	; (8004b04 <HAL_RCC_OscConfig+0x6f0>)
 8004a82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a84:	4a1f      	ldr	r2, [pc, #124]	; (8004b04 <HAL_RCC_OscConfig+0x6f0>)
 8004a86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004a8a:	6353      	str	r3, [r2, #52]	; 0x34
 8004a8c:	4b1d      	ldr	r3, [pc, #116]	; (8004b04 <HAL_RCC_OscConfig+0x6f0>)
 8004a8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a90:	4a1c      	ldr	r2, [pc, #112]	; (8004b04 <HAL_RCC_OscConfig+0x6f0>)
 8004a92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a96:	6353      	str	r3, [r2, #52]	; 0x34
 8004a98:	e00b      	b.n	8004ab2 <HAL_RCC_OscConfig+0x69e>
 8004a9a:	4b1a      	ldr	r3, [pc, #104]	; (8004b04 <HAL_RCC_OscConfig+0x6f0>)
 8004a9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a9e:	4a19      	ldr	r2, [pc, #100]	; (8004b04 <HAL_RCC_OscConfig+0x6f0>)
 8004aa0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004aa4:	6353      	str	r3, [r2, #52]	; 0x34
 8004aa6:	4b17      	ldr	r3, [pc, #92]	; (8004b04 <HAL_RCC_OscConfig+0x6f0>)
 8004aa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004aaa:	4a16      	ldr	r2, [pc, #88]	; (8004b04 <HAL_RCC_OscConfig+0x6f0>)
 8004aac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004ab0:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d015      	beq.n	8004ae6 <HAL_RCC_OscConfig+0x6d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004aba:	f7fc f8b1 	bl	8000c20 <HAL_GetTick>
 8004abe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004ac0:	e00a      	b.n	8004ad8 <HAL_RCC_OscConfig+0x6c4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ac2:	f7fc f8ad 	bl	8000c20 <HAL_GetTick>
 8004ac6:	4602      	mov	r2, r0
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	1ad3      	subs	r3, r2, r3
 8004acc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d901      	bls.n	8004ad8 <HAL_RCC_OscConfig+0x6c4>
        {
          return HAL_TIMEOUT;
 8004ad4:	2303      	movs	r3, #3
 8004ad6:	e112      	b.n	8004cfe <HAL_RCC_OscConfig+0x8ea>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004ad8:	4b0a      	ldr	r3, [pc, #40]	; (8004b04 <HAL_RCC_OscConfig+0x6f0>)
 8004ada:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004adc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d0ee      	beq.n	8004ac2 <HAL_RCC_OscConfig+0x6ae>
 8004ae4:	e01c      	b.n	8004b20 <HAL_RCC_OscConfig+0x70c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ae6:	f7fc f89b 	bl	8000c20 <HAL_GetTick>
 8004aea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004aec:	e012      	b.n	8004b14 <HAL_RCC_OscConfig+0x700>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004aee:	f7fc f897 	bl	8000c20 <HAL_GetTick>
 8004af2:	4602      	mov	r2, r0
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	1ad3      	subs	r3, r2, r3
 8004af8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d909      	bls.n	8004b14 <HAL_RCC_OscConfig+0x700>
        {
          return HAL_TIMEOUT;
 8004b00:	2303      	movs	r3, #3
 8004b02:	e0fc      	b.n	8004cfe <HAL_RCC_OscConfig+0x8ea>
 8004b04:	40023800 	.word	0x40023800
 8004b08:	42470680 	.word	0x42470680
 8004b0c:	0800a290 	.word	0x0800a290
 8004b10:	40007000 	.word	0x40007000
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004b14:	4b7c      	ldr	r3, [pc, #496]	; (8004d08 <HAL_RCC_OscConfig+0x8f4>)
 8004b16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d1e6      	bne.n	8004aee <HAL_RCC_OscConfig+0x6da>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004b20:	7ffb      	ldrb	r3, [r7, #31]
 8004b22:	2b01      	cmp	r3, #1
 8004b24:	d105      	bne.n	8004b32 <HAL_RCC_OscConfig+0x71e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b26:	4b78      	ldr	r3, [pc, #480]	; (8004d08 <HAL_RCC_OscConfig+0x8f4>)
 8004b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b2a:	4a77      	ldr	r2, [pc, #476]	; (8004d08 <HAL_RCC_OscConfig+0x8f4>)
 8004b2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b30:	6253      	str	r3, [r2, #36]	; 0x24
    }
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d00c      	beq.n	8004b54 <HAL_RCC_OscConfig+0x740>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b3e:	2b01      	cmp	r3, #1
 8004b40:	d008      	beq.n	8004b54 <HAL_RCC_OscConfig+0x740>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b46:	2b02      	cmp	r3, #2
 8004b48:	d004      	beq.n	8004b54 <HAL_RCC_OscConfig+0x740>
 8004b4a:	f240 21aa 	movw	r1, #682	; 0x2aa
 8004b4e:	486f      	ldr	r0, [pc, #444]	; (8004d0c <HAL_RCC_OscConfig+0x8f8>)
 8004b50:	f7fb ff67 	bl	8000a22 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	f000 80cf 	beq.w	8004cfc <HAL_RCC_OscConfig+0x8e8>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b5e:	69bb      	ldr	r3, [r7, #24]
 8004b60:	2b0c      	cmp	r3, #12
 8004b62:	f000 80ab 	beq.w	8004cbc <HAL_RCC_OscConfig+0x8a8>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b6a:	2b02      	cmp	r3, #2
 8004b6c:	f040 808f 	bne.w	8004c8e <HAL_RCC_OscConfig+0x87a>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d009      	beq.n	8004b8c <HAL_RCC_OscConfig+0x778>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b80:	d004      	beq.n	8004b8c <HAL_RCC_OscConfig+0x778>
 8004b82:	f240 21b3 	movw	r1, #691	; 0x2b3
 8004b86:	4861      	ldr	r0, [pc, #388]	; (8004d0c <HAL_RCC_OscConfig+0x8f8>)
 8004b88:	f7fb ff4b 	bl	8000a22 <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d02c      	beq.n	8004bee <HAL_RCC_OscConfig+0x7da>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b98:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004b9c:	d027      	beq.n	8004bee <HAL_RCC_OscConfig+0x7da>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ba2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004ba6:	d022      	beq.n	8004bee <HAL_RCC_OscConfig+0x7da>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bac:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004bb0:	d01d      	beq.n	8004bee <HAL_RCC_OscConfig+0x7da>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bb6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004bba:	d018      	beq.n	8004bee <HAL_RCC_OscConfig+0x7da>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bc0:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004bc4:	d013      	beq.n	8004bee <HAL_RCC_OscConfig+0x7da>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bca:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004bce:	d00e      	beq.n	8004bee <HAL_RCC_OscConfig+0x7da>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bd4:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004bd8:	d009      	beq.n	8004bee <HAL_RCC_OscConfig+0x7da>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bde:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004be2:	d004      	beq.n	8004bee <HAL_RCC_OscConfig+0x7da>
 8004be4:	f44f 712d 	mov.w	r1, #692	; 0x2b4
 8004be8:	4848      	ldr	r0, [pc, #288]	; (8004d0c <HAL_RCC_OscConfig+0x8f8>)
 8004bea:	f7fb ff1a 	bl	8000a22 <assert_failed>
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bf2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004bf6:	d00e      	beq.n	8004c16 <HAL_RCC_OscConfig+0x802>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bfc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004c00:	d009      	beq.n	8004c16 <HAL_RCC_OscConfig+0x802>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c06:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004c0a:	d004      	beq.n	8004c16 <HAL_RCC_OscConfig+0x802>
 8004c0c:	f240 21b5 	movw	r1, #693	; 0x2b5
 8004c10:	483e      	ldr	r0, [pc, #248]	; (8004d0c <HAL_RCC_OscConfig+0x8f8>)
 8004c12:	f7fb ff06 	bl	8000a22 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c16:	4b3e      	ldr	r3, [pc, #248]	; (8004d10 <HAL_RCC_OscConfig+0x8fc>)
 8004c18:	2200      	movs	r2, #0
 8004c1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c1c:	f7fc f800 	bl	8000c20 <HAL_GetTick>
 8004c20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004c22:	e008      	b.n	8004c36 <HAL_RCC_OscConfig+0x822>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c24:	f7fb fffc 	bl	8000c20 <HAL_GetTick>
 8004c28:	4602      	mov	r2, r0
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	1ad3      	subs	r3, r2, r3
 8004c2e:	2b02      	cmp	r3, #2
 8004c30:	d901      	bls.n	8004c36 <HAL_RCC_OscConfig+0x822>
          {
            return HAL_TIMEOUT;
 8004c32:	2303      	movs	r3, #3
 8004c34:	e063      	b.n	8004cfe <HAL_RCC_OscConfig+0x8ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004c36:	4b34      	ldr	r3, [pc, #208]	; (8004d08 <HAL_RCC_OscConfig+0x8f4>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d1f0      	bne.n	8004c24 <HAL_RCC_OscConfig+0x810>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c42:	4b31      	ldr	r3, [pc, #196]	; (8004d08 <HAL_RCC_OscConfig+0x8f4>)
 8004c44:	689b      	ldr	r3, [r3, #8]
 8004c46:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c52:	4319      	orrs	r1, r3
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c58:	430b      	orrs	r3, r1
 8004c5a:	492b      	ldr	r1, [pc, #172]	; (8004d08 <HAL_RCC_OscConfig+0x8f4>)
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c60:	4b2b      	ldr	r3, [pc, #172]	; (8004d10 <HAL_RCC_OscConfig+0x8fc>)
 8004c62:	2201      	movs	r2, #1
 8004c64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c66:	f7fb ffdb 	bl	8000c20 <HAL_GetTick>
 8004c6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004c6c:	e008      	b.n	8004c80 <HAL_RCC_OscConfig+0x86c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c6e:	f7fb ffd7 	bl	8000c20 <HAL_GetTick>
 8004c72:	4602      	mov	r2, r0
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	1ad3      	subs	r3, r2, r3
 8004c78:	2b02      	cmp	r3, #2
 8004c7a:	d901      	bls.n	8004c80 <HAL_RCC_OscConfig+0x86c>
          {
            return HAL_TIMEOUT;
 8004c7c:	2303      	movs	r3, #3
 8004c7e:	e03e      	b.n	8004cfe <HAL_RCC_OscConfig+0x8ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004c80:	4b21      	ldr	r3, [pc, #132]	; (8004d08 <HAL_RCC_OscConfig+0x8f4>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d0f0      	beq.n	8004c6e <HAL_RCC_OscConfig+0x85a>
 8004c8c:	e036      	b.n	8004cfc <HAL_RCC_OscConfig+0x8e8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c8e:	4b20      	ldr	r3, [pc, #128]	; (8004d10 <HAL_RCC_OscConfig+0x8fc>)
 8004c90:	2200      	movs	r2, #0
 8004c92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c94:	f7fb ffc4 	bl	8000c20 <HAL_GetTick>
 8004c98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004c9a:	e008      	b.n	8004cae <HAL_RCC_OscConfig+0x89a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c9c:	f7fb ffc0 	bl	8000c20 <HAL_GetTick>
 8004ca0:	4602      	mov	r2, r0
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	1ad3      	subs	r3, r2, r3
 8004ca6:	2b02      	cmp	r3, #2
 8004ca8:	d901      	bls.n	8004cae <HAL_RCC_OscConfig+0x89a>
          {
            return HAL_TIMEOUT;
 8004caa:	2303      	movs	r3, #3
 8004cac:	e027      	b.n	8004cfe <HAL_RCC_OscConfig+0x8ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004cae:	4b16      	ldr	r3, [pc, #88]	; (8004d08 <HAL_RCC_OscConfig+0x8f4>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d1f0      	bne.n	8004c9c <HAL_RCC_OscConfig+0x888>
 8004cba:	e01f      	b.n	8004cfc <HAL_RCC_OscConfig+0x8e8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc0:	2b01      	cmp	r3, #1
 8004cc2:	d101      	bne.n	8004cc8 <HAL_RCC_OscConfig+0x8b4>
      {
        return HAL_ERROR;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	e01a      	b.n	8004cfe <HAL_RCC_OscConfig+0x8ea>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004cc8:	4b0f      	ldr	r3, [pc, #60]	; (8004d08 <HAL_RCC_OscConfig+0x8f4>)
 8004cca:	689b      	ldr	r3, [r3, #8]
 8004ccc:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cd8:	429a      	cmp	r2, r3
 8004cda:	d10d      	bne.n	8004cf8 <HAL_RCC_OscConfig+0x8e4>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ce6:	429a      	cmp	r2, r3
 8004ce8:	d106      	bne.n	8004cf8 <HAL_RCC_OscConfig+0x8e4>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004cf4:	429a      	cmp	r2, r3
 8004cf6:	d001      	beq.n	8004cfc <HAL_RCC_OscConfig+0x8e8>
        {
          return HAL_ERROR;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	e000      	b.n	8004cfe <HAL_RCC_OscConfig+0x8ea>
        }
      }
    }
  }

  return HAL_OK;
 8004cfc:	2300      	movs	r3, #0
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3720      	adds	r7, #32
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}
 8004d06:	bf00      	nop
 8004d08:	40023800 	.word	0x40023800
 8004d0c:	0800a290 	.word	0x0800a290
 8004d10:	42470060 	.word	0x42470060

08004d14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b084      	sub	sp, #16
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
 8004d1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d101      	bne.n	8004d28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d24:	2301      	movs	r3, #1
 8004d26:	e1a4      	b.n	8005072 <HAL_RCC_ClockConfig+0x35e>
  }

  assert_param(IS_FLASH_LATENCY(FLatency));
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d007      	beq.n	8004d3e <HAL_RCC_ClockConfig+0x2a>
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	2b01      	cmp	r3, #1
 8004d32:	d004      	beq.n	8004d3e <HAL_RCC_ClockConfig+0x2a>
 8004d34:	f44f 714a 	mov.w	r1, #808	; 0x328
 8004d38:	4893      	ldr	r0, [pc, #588]	; (8004f88 <HAL_RCC_ClockConfig+0x274>)
 8004d3a:	f7fb fe72 	bl	8000a22 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004d3e:	4b93      	ldr	r3, [pc, #588]	; (8004f8c <HAL_RCC_ClockConfig+0x278>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f003 0301 	and.w	r3, r3, #1
 8004d46:	683a      	ldr	r2, [r7, #0]
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	d919      	bls.n	8004d80 <HAL_RCC_ClockConfig+0x6c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	2b01      	cmp	r3, #1
 8004d50:	d105      	bne.n	8004d5e <HAL_RCC_ClockConfig+0x4a>
 8004d52:	4b8e      	ldr	r3, [pc, #568]	; (8004f8c <HAL_RCC_ClockConfig+0x278>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a8d      	ldr	r2, [pc, #564]	; (8004f8c <HAL_RCC_ClockConfig+0x278>)
 8004d58:	f043 0304 	orr.w	r3, r3, #4
 8004d5c:	6013      	str	r3, [r2, #0]
 8004d5e:	4b8b      	ldr	r3, [pc, #556]	; (8004f8c <HAL_RCC_ClockConfig+0x278>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f023 0201 	bic.w	r2, r3, #1
 8004d66:	4989      	ldr	r1, [pc, #548]	; (8004f8c <HAL_RCC_ClockConfig+0x278>)
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d6e:	4b87      	ldr	r3, [pc, #540]	; (8004f8c <HAL_RCC_ClockConfig+0x278>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f003 0301 	and.w	r3, r3, #1
 8004d76:	683a      	ldr	r2, [r7, #0]
 8004d78:	429a      	cmp	r2, r3
 8004d7a:	d001      	beq.n	8004d80 <HAL_RCC_ClockConfig+0x6c>
    {
      return HAL_ERROR;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	e178      	b.n	8005072 <HAL_RCC_ClockConfig+0x35e>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f003 0302 	and.w	r3, r3, #2
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d031      	beq.n	8004df0 <HAL_RCC_ClockConfig+0xdc>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	689b      	ldr	r3, [r3, #8]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d024      	beq.n	8004dde <HAL_RCC_ClockConfig+0xca>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	689b      	ldr	r3, [r3, #8]
 8004d98:	2b80      	cmp	r3, #128	; 0x80
 8004d9a:	d020      	beq.n	8004dde <HAL_RCC_ClockConfig+0xca>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	689b      	ldr	r3, [r3, #8]
 8004da0:	2b90      	cmp	r3, #144	; 0x90
 8004da2:	d01c      	beq.n	8004dde <HAL_RCC_ClockConfig+0xca>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	689b      	ldr	r3, [r3, #8]
 8004da8:	2ba0      	cmp	r3, #160	; 0xa0
 8004daa:	d018      	beq.n	8004dde <HAL_RCC_ClockConfig+0xca>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	689b      	ldr	r3, [r3, #8]
 8004db0:	2bb0      	cmp	r3, #176	; 0xb0
 8004db2:	d014      	beq.n	8004dde <HAL_RCC_ClockConfig+0xca>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	2bc0      	cmp	r3, #192	; 0xc0
 8004dba:	d010      	beq.n	8004dde <HAL_RCC_ClockConfig+0xca>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	689b      	ldr	r3, [r3, #8]
 8004dc0:	2bd0      	cmp	r3, #208	; 0xd0
 8004dc2:	d00c      	beq.n	8004dde <HAL_RCC_ClockConfig+0xca>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	689b      	ldr	r3, [r3, #8]
 8004dc8:	2be0      	cmp	r3, #224	; 0xe0
 8004dca:	d008      	beq.n	8004dde <HAL_RCC_ClockConfig+0xca>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	689b      	ldr	r3, [r3, #8]
 8004dd0:	2bf0      	cmp	r3, #240	; 0xf0
 8004dd2:	d004      	beq.n	8004dde <HAL_RCC_ClockConfig+0xca>
 8004dd4:	f240 313f 	movw	r1, #831	; 0x33f
 8004dd8:	486b      	ldr	r0, [pc, #428]	; (8004f88 <HAL_RCC_ClockConfig+0x274>)
 8004dda:	f7fb fe22 	bl	8000a22 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004dde:	4b6c      	ldr	r3, [pc, #432]	; (8004f90 <HAL_RCC_ClockConfig+0x27c>)
 8004de0:	689b      	ldr	r3, [r3, #8]
 8004de2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	689b      	ldr	r3, [r3, #8]
 8004dea:	4969      	ldr	r1, [pc, #420]	; (8004f90 <HAL_RCC_ClockConfig+0x27c>)
 8004dec:	4313      	orrs	r3, r2
 8004dee:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f003 0301 	and.w	r3, r3, #1
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	f000 80a3 	beq.w	8004f44 <HAL_RCC_ClockConfig+0x230>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d010      	beq.n	8004e28 <HAL_RCC_ClockConfig+0x114>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	2b01      	cmp	r3, #1
 8004e0c:	d00c      	beq.n	8004e28 <HAL_RCC_ClockConfig+0x114>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	2b02      	cmp	r3, #2
 8004e14:	d008      	beq.n	8004e28 <HAL_RCC_ClockConfig+0x114>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	2b03      	cmp	r3, #3
 8004e1c:	d004      	beq.n	8004e28 <HAL_RCC_ClockConfig+0x114>
 8004e1e:	f240 3146 	movw	r1, #838	; 0x346
 8004e22:	4859      	ldr	r0, [pc, #356]	; (8004f88 <HAL_RCC_ClockConfig+0x274>)
 8004e24:	f7fb fdfd 	bl	8000a22 <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	2b02      	cmp	r3, #2
 8004e2e:	d107      	bne.n	8004e40 <HAL_RCC_ClockConfig+0x12c>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004e30:	4b57      	ldr	r3, [pc, #348]	; (8004f90 <HAL_RCC_ClockConfig+0x27c>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d121      	bne.n	8004e80 <HAL_RCC_ClockConfig+0x16c>
      {
        return HAL_ERROR;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	e118      	b.n	8005072 <HAL_RCC_ClockConfig+0x35e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	2b03      	cmp	r3, #3
 8004e46:	d107      	bne.n	8004e58 <HAL_RCC_ClockConfig+0x144>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004e48:	4b51      	ldr	r3, [pc, #324]	; (8004f90 <HAL_RCC_ClockConfig+0x27c>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d115      	bne.n	8004e80 <HAL_RCC_ClockConfig+0x16c>
      {
        return HAL_ERROR;
 8004e54:	2301      	movs	r3, #1
 8004e56:	e10c      	b.n	8005072 <HAL_RCC_ClockConfig+0x35e>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	2b01      	cmp	r3, #1
 8004e5e:	d107      	bne.n	8004e70 <HAL_RCC_ClockConfig+0x15c>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004e60:	4b4b      	ldr	r3, [pc, #300]	; (8004f90 <HAL_RCC_ClockConfig+0x27c>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f003 0302 	and.w	r3, r3, #2
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d109      	bne.n	8004e80 <HAL_RCC_ClockConfig+0x16c>
      {
        return HAL_ERROR;
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	e100      	b.n	8005072 <HAL_RCC_ClockConfig+0x35e>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004e70:	4b47      	ldr	r3, [pc, #284]	; (8004f90 <HAL_RCC_ClockConfig+0x27c>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d101      	bne.n	8004e80 <HAL_RCC_ClockConfig+0x16c>
      {
        return HAL_ERROR;
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	e0f8      	b.n	8005072 <HAL_RCC_ClockConfig+0x35e>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e80:	4b43      	ldr	r3, [pc, #268]	; (8004f90 <HAL_RCC_ClockConfig+0x27c>)
 8004e82:	689b      	ldr	r3, [r3, #8]
 8004e84:	f023 0203 	bic.w	r2, r3, #3
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	4940      	ldr	r1, [pc, #256]	; (8004f90 <HAL_RCC_ClockConfig+0x27c>)
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004e92:	f7fb fec5 	bl	8000c20 <HAL_GetTick>
 8004e96:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	2b02      	cmp	r3, #2
 8004e9e:	d112      	bne.n	8004ec6 <HAL_RCC_ClockConfig+0x1b2>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004ea0:	e00a      	b.n	8004eb8 <HAL_RCC_ClockConfig+0x1a4>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ea2:	f7fb febd 	bl	8000c20 <HAL_GetTick>
 8004ea6:	4602      	mov	r2, r0
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	1ad3      	subs	r3, r2, r3
 8004eac:	f241 3288 	movw	r2, #5000	; 0x1388
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d901      	bls.n	8004eb8 <HAL_RCC_ClockConfig+0x1a4>
        {
          return HAL_TIMEOUT;
 8004eb4:	2303      	movs	r3, #3
 8004eb6:	e0dc      	b.n	8005072 <HAL_RCC_ClockConfig+0x35e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004eb8:	4b35      	ldr	r3, [pc, #212]	; (8004f90 <HAL_RCC_ClockConfig+0x27c>)
 8004eba:	689b      	ldr	r3, [r3, #8]
 8004ebc:	f003 030c 	and.w	r3, r3, #12
 8004ec0:	2b08      	cmp	r3, #8
 8004ec2:	d1ee      	bne.n	8004ea2 <HAL_RCC_ClockConfig+0x18e>
 8004ec4:	e03e      	b.n	8004f44 <HAL_RCC_ClockConfig+0x230>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	2b03      	cmp	r3, #3
 8004ecc:	d112      	bne.n	8004ef4 <HAL_RCC_ClockConfig+0x1e0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004ece:	e00a      	b.n	8004ee6 <HAL_RCC_ClockConfig+0x1d2>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ed0:	f7fb fea6 	bl	8000c20 <HAL_GetTick>
 8004ed4:	4602      	mov	r2, r0
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	1ad3      	subs	r3, r2, r3
 8004eda:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d901      	bls.n	8004ee6 <HAL_RCC_ClockConfig+0x1d2>
        {
          return HAL_TIMEOUT;
 8004ee2:	2303      	movs	r3, #3
 8004ee4:	e0c5      	b.n	8005072 <HAL_RCC_ClockConfig+0x35e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004ee6:	4b2a      	ldr	r3, [pc, #168]	; (8004f90 <HAL_RCC_ClockConfig+0x27c>)
 8004ee8:	689b      	ldr	r3, [r3, #8]
 8004eea:	f003 030c 	and.w	r3, r3, #12
 8004eee:	2b0c      	cmp	r3, #12
 8004ef0:	d1ee      	bne.n	8004ed0 <HAL_RCC_ClockConfig+0x1bc>
 8004ef2:	e027      	b.n	8004f44 <HAL_RCC_ClockConfig+0x230>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	2b01      	cmp	r3, #1
 8004efa:	d11d      	bne.n	8004f38 <HAL_RCC_ClockConfig+0x224>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004efc:	e00a      	b.n	8004f14 <HAL_RCC_ClockConfig+0x200>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004efe:	f7fb fe8f 	bl	8000c20 <HAL_GetTick>
 8004f02:	4602      	mov	r2, r0
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	1ad3      	subs	r3, r2, r3
 8004f08:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d901      	bls.n	8004f14 <HAL_RCC_ClockConfig+0x200>
        {
          return HAL_TIMEOUT;
 8004f10:	2303      	movs	r3, #3
 8004f12:	e0ae      	b.n	8005072 <HAL_RCC_ClockConfig+0x35e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004f14:	4b1e      	ldr	r3, [pc, #120]	; (8004f90 <HAL_RCC_ClockConfig+0x27c>)
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	f003 030c 	and.w	r3, r3, #12
 8004f1c:	2b04      	cmp	r3, #4
 8004f1e:	d1ee      	bne.n	8004efe <HAL_RCC_ClockConfig+0x1ea>
 8004f20:	e010      	b.n	8004f44 <HAL_RCC_ClockConfig+0x230>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f22:	f7fb fe7d 	bl	8000c20 <HAL_GetTick>
 8004f26:	4602      	mov	r2, r0
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	1ad3      	subs	r3, r2, r3
 8004f2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d901      	bls.n	8004f38 <HAL_RCC_ClockConfig+0x224>
        {
          return HAL_TIMEOUT;
 8004f34:	2303      	movs	r3, #3
 8004f36:	e09c      	b.n	8005072 <HAL_RCC_ClockConfig+0x35e>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004f38:	4b15      	ldr	r3, [pc, #84]	; (8004f90 <HAL_RCC_ClockConfig+0x27c>)
 8004f3a:	689b      	ldr	r3, [r3, #8]
 8004f3c:	f003 030c 	and.w	r3, r3, #12
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d1ee      	bne.n	8004f22 <HAL_RCC_ClockConfig+0x20e>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004f44:	4b11      	ldr	r3, [pc, #68]	; (8004f8c <HAL_RCC_ClockConfig+0x278>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f003 0301 	and.w	r3, r3, #1
 8004f4c:	683a      	ldr	r2, [r7, #0]
 8004f4e:	429a      	cmp	r2, r3
 8004f50:	d220      	bcs.n	8004f94 <HAL_RCC_ClockConfig+0x280>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	2b01      	cmp	r3, #1
 8004f56:	d105      	bne.n	8004f64 <HAL_RCC_ClockConfig+0x250>
 8004f58:	4b0c      	ldr	r3, [pc, #48]	; (8004f8c <HAL_RCC_ClockConfig+0x278>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a0b      	ldr	r2, [pc, #44]	; (8004f8c <HAL_RCC_ClockConfig+0x278>)
 8004f5e:	f043 0304 	orr.w	r3, r3, #4
 8004f62:	6013      	str	r3, [r2, #0]
 8004f64:	4b09      	ldr	r3, [pc, #36]	; (8004f8c <HAL_RCC_ClockConfig+0x278>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f023 0201 	bic.w	r2, r3, #1
 8004f6c:	4907      	ldr	r1, [pc, #28]	; (8004f8c <HAL_RCC_ClockConfig+0x278>)
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	4313      	orrs	r3, r2
 8004f72:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f74:	4b05      	ldr	r3, [pc, #20]	; (8004f8c <HAL_RCC_ClockConfig+0x278>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f003 0301 	and.w	r3, r3, #1
 8004f7c:	683a      	ldr	r2, [r7, #0]
 8004f7e:	429a      	cmp	r2, r3
 8004f80:	d008      	beq.n	8004f94 <HAL_RCC_ClockConfig+0x280>
    {
      return HAL_ERROR;
 8004f82:	2301      	movs	r3, #1
 8004f84:	e075      	b.n	8005072 <HAL_RCC_ClockConfig+0x35e>
 8004f86:	bf00      	nop
 8004f88:	0800a290 	.word	0x0800a290
 8004f8c:	40023c00 	.word	0x40023c00
 8004f90:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f003 0304 	and.w	r3, r3, #4
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d025      	beq.n	8004fec <HAL_RCC_ClockConfig+0x2d8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	68db      	ldr	r3, [r3, #12]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d018      	beq.n	8004fda <HAL_RCC_ClockConfig+0x2c6>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	68db      	ldr	r3, [r3, #12]
 8004fac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fb0:	d013      	beq.n	8004fda <HAL_RCC_ClockConfig+0x2c6>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	68db      	ldr	r3, [r3, #12]
 8004fb6:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8004fba:	d00e      	beq.n	8004fda <HAL_RCC_ClockConfig+0x2c6>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	68db      	ldr	r3, [r3, #12]
 8004fc0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004fc4:	d009      	beq.n	8004fda <HAL_RCC_ClockConfig+0x2c6>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	68db      	ldr	r3, [r3, #12]
 8004fca:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004fce:	d004      	beq.n	8004fda <HAL_RCC_ClockConfig+0x2c6>
 8004fd0:	f240 31ab 	movw	r1, #939	; 0x3ab
 8004fd4:	4829      	ldr	r0, [pc, #164]	; (800507c <HAL_RCC_ClockConfig+0x368>)
 8004fd6:	f7fb fd24 	bl	8000a22 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004fda:	4b29      	ldr	r3, [pc, #164]	; (8005080 <HAL_RCC_ClockConfig+0x36c>)
 8004fdc:	689b      	ldr	r3, [r3, #8]
 8004fde:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	68db      	ldr	r3, [r3, #12]
 8004fe6:	4926      	ldr	r1, [pc, #152]	; (8005080 <HAL_RCC_ClockConfig+0x36c>)
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f003 0308 	and.w	r3, r3, #8
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d026      	beq.n	8005046 <HAL_RCC_ClockConfig+0x332>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	691b      	ldr	r3, [r3, #16]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d018      	beq.n	8005032 <HAL_RCC_ClockConfig+0x31e>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	691b      	ldr	r3, [r3, #16]
 8005004:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005008:	d013      	beq.n	8005032 <HAL_RCC_ClockConfig+0x31e>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	691b      	ldr	r3, [r3, #16]
 800500e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8005012:	d00e      	beq.n	8005032 <HAL_RCC_ClockConfig+0x31e>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	691b      	ldr	r3, [r3, #16]
 8005018:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800501c:	d009      	beq.n	8005032 <HAL_RCC_ClockConfig+0x31e>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	691b      	ldr	r3, [r3, #16]
 8005022:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005026:	d004      	beq.n	8005032 <HAL_RCC_ClockConfig+0x31e>
 8005028:	f240 31b2 	movw	r1, #946	; 0x3b2
 800502c:	4813      	ldr	r0, [pc, #76]	; (800507c <HAL_RCC_ClockConfig+0x368>)
 800502e:	f7fb fcf8 	bl	8000a22 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005032:	4b13      	ldr	r3, [pc, #76]	; (8005080 <HAL_RCC_ClockConfig+0x36c>)
 8005034:	689b      	ldr	r3, [r3, #8]
 8005036:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	691b      	ldr	r3, [r3, #16]
 800503e:	00db      	lsls	r3, r3, #3
 8005040:	490f      	ldr	r1, [pc, #60]	; (8005080 <HAL_RCC_ClockConfig+0x36c>)
 8005042:	4313      	orrs	r3, r2
 8005044:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005046:	f000 f823 	bl	8005090 <HAL_RCC_GetSysClockFreq>
 800504a:	4602      	mov	r2, r0
 800504c:	4b0c      	ldr	r3, [pc, #48]	; (8005080 <HAL_RCC_ClockConfig+0x36c>)
 800504e:	689b      	ldr	r3, [r3, #8]
 8005050:	091b      	lsrs	r3, r3, #4
 8005052:	f003 030f 	and.w	r3, r3, #15
 8005056:	490b      	ldr	r1, [pc, #44]	; (8005084 <HAL_RCC_ClockConfig+0x370>)
 8005058:	5ccb      	ldrb	r3, [r1, r3]
 800505a:	fa22 f303 	lsr.w	r3, r2, r3
 800505e:	4a0a      	ldr	r2, [pc, #40]	; (8005088 <HAL_RCC_ClockConfig+0x374>)
 8005060:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005062:	4b0a      	ldr	r3, [pc, #40]	; (800508c <HAL_RCC_ClockConfig+0x378>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4618      	mov	r0, r3
 8005068:	f7fb fd8e 	bl	8000b88 <HAL_InitTick>
 800506c:	4603      	mov	r3, r0
 800506e:	72fb      	strb	r3, [r7, #11]

  return status;
 8005070:	7afb      	ldrb	r3, [r7, #11]
}
 8005072:	4618      	mov	r0, r3
 8005074:	3710      	adds	r7, #16
 8005076:	46bd      	mov	sp, r7
 8005078:	bd80      	pop	{r7, pc}
 800507a:	bf00      	nop
 800507c:	0800a290 	.word	0x0800a290
 8005080:	40023800 	.word	0x40023800
 8005084:	0800a31c 	.word	0x0800a31c
 8005088:	20000000 	.word	0x20000000
 800508c:	20000004 	.word	0x20000004

08005090 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005090:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005094:	b08e      	sub	sp, #56	; 0x38
 8005096:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8005098:	4b58      	ldr	r3, [pc, #352]	; (80051fc <HAL_RCC_GetSysClockFreq+0x16c>)
 800509a:	689b      	ldr	r3, [r3, #8]
 800509c:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800509e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050a0:	f003 030c 	and.w	r3, r3, #12
 80050a4:	2b0c      	cmp	r3, #12
 80050a6:	d00d      	beq.n	80050c4 <HAL_RCC_GetSysClockFreq+0x34>
 80050a8:	2b0c      	cmp	r3, #12
 80050aa:	f200 8092 	bhi.w	80051d2 <HAL_RCC_GetSysClockFreq+0x142>
 80050ae:	2b04      	cmp	r3, #4
 80050b0:	d002      	beq.n	80050b8 <HAL_RCC_GetSysClockFreq+0x28>
 80050b2:	2b08      	cmp	r3, #8
 80050b4:	d003      	beq.n	80050be <HAL_RCC_GetSysClockFreq+0x2e>
 80050b6:	e08c      	b.n	80051d2 <HAL_RCC_GetSysClockFreq+0x142>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80050b8:	4b51      	ldr	r3, [pc, #324]	; (8005200 <HAL_RCC_GetSysClockFreq+0x170>)
 80050ba:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80050bc:	e097      	b.n	80051ee <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80050be:	4b51      	ldr	r3, [pc, #324]	; (8005204 <HAL_RCC_GetSysClockFreq+0x174>)
 80050c0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80050c2:	e094      	b.n	80051ee <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80050c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050c6:	0c9b      	lsrs	r3, r3, #18
 80050c8:	f003 020f 	and.w	r2, r3, #15
 80050cc:	4b4e      	ldr	r3, [pc, #312]	; (8005208 <HAL_RCC_GetSysClockFreq+0x178>)
 80050ce:	5c9b      	ldrb	r3, [r3, r2]
 80050d0:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80050d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050d4:	0d9b      	lsrs	r3, r3, #22
 80050d6:	f003 0303 	and.w	r3, r3, #3
 80050da:	3301      	adds	r3, #1
 80050dc:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80050de:	4b47      	ldr	r3, [pc, #284]	; (80051fc <HAL_RCC_GetSysClockFreq+0x16c>)
 80050e0:	689b      	ldr	r3, [r3, #8]
 80050e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d021      	beq.n	800512e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80050ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ec:	2200      	movs	r2, #0
 80050ee:	61bb      	str	r3, [r7, #24]
 80050f0:	61fa      	str	r2, [r7, #28]
 80050f2:	4b44      	ldr	r3, [pc, #272]	; (8005204 <HAL_RCC_GetSysClockFreq+0x174>)
 80050f4:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80050f8:	464a      	mov	r2, r9
 80050fa:	fb03 f202 	mul.w	r2, r3, r2
 80050fe:	2300      	movs	r3, #0
 8005100:	4644      	mov	r4, r8
 8005102:	fb04 f303 	mul.w	r3, r4, r3
 8005106:	4413      	add	r3, r2
 8005108:	4a3e      	ldr	r2, [pc, #248]	; (8005204 <HAL_RCC_GetSysClockFreq+0x174>)
 800510a:	4644      	mov	r4, r8
 800510c:	fba4 0102 	umull	r0, r1, r4, r2
 8005110:	440b      	add	r3, r1
 8005112:	4619      	mov	r1, r3
 8005114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005116:	2200      	movs	r2, #0
 8005118:	613b      	str	r3, [r7, #16]
 800511a:	617a      	str	r2, [r7, #20]
 800511c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005120:	f7fb f82c 	bl	800017c <__aeabi_uldivmod>
 8005124:	4602      	mov	r2, r0
 8005126:	460b      	mov	r3, r1
 8005128:	4613      	mov	r3, r2
 800512a:	637b      	str	r3, [r7, #52]	; 0x34
 800512c:	e04e      	b.n	80051cc <HAL_RCC_GetSysClockFreq+0x13c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800512e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005130:	2200      	movs	r2, #0
 8005132:	469a      	mov	sl, r3
 8005134:	4693      	mov	fp, r2
 8005136:	4652      	mov	r2, sl
 8005138:	465b      	mov	r3, fp
 800513a:	f04f 0000 	mov.w	r0, #0
 800513e:	f04f 0100 	mov.w	r1, #0
 8005142:	0159      	lsls	r1, r3, #5
 8005144:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005148:	0150      	lsls	r0, r2, #5
 800514a:	4602      	mov	r2, r0
 800514c:	460b      	mov	r3, r1
 800514e:	ebb2 080a 	subs.w	r8, r2, sl
 8005152:	eb63 090b 	sbc.w	r9, r3, fp
 8005156:	f04f 0200 	mov.w	r2, #0
 800515a:	f04f 0300 	mov.w	r3, #0
 800515e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005162:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005166:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800516a:	ebb2 0408 	subs.w	r4, r2, r8
 800516e:	eb63 0509 	sbc.w	r5, r3, r9
 8005172:	f04f 0200 	mov.w	r2, #0
 8005176:	f04f 0300 	mov.w	r3, #0
 800517a:	00eb      	lsls	r3, r5, #3
 800517c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005180:	00e2      	lsls	r2, r4, #3
 8005182:	4614      	mov	r4, r2
 8005184:	461d      	mov	r5, r3
 8005186:	eb14 030a 	adds.w	r3, r4, sl
 800518a:	603b      	str	r3, [r7, #0]
 800518c:	eb45 030b 	adc.w	r3, r5, fp
 8005190:	607b      	str	r3, [r7, #4]
 8005192:	f04f 0200 	mov.w	r2, #0
 8005196:	f04f 0300 	mov.w	r3, #0
 800519a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800519e:	4629      	mov	r1, r5
 80051a0:	028b      	lsls	r3, r1, #10
 80051a2:	4620      	mov	r0, r4
 80051a4:	4629      	mov	r1, r5
 80051a6:	4604      	mov	r4, r0
 80051a8:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 80051ac:	4601      	mov	r1, r0
 80051ae:	028a      	lsls	r2, r1, #10
 80051b0:	4610      	mov	r0, r2
 80051b2:	4619      	mov	r1, r3
 80051b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b6:	2200      	movs	r2, #0
 80051b8:	60bb      	str	r3, [r7, #8]
 80051ba:	60fa      	str	r2, [r7, #12]
 80051bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80051c0:	f7fa ffdc 	bl	800017c <__aeabi_uldivmod>
 80051c4:	4602      	mov	r2, r0
 80051c6:	460b      	mov	r3, r1
 80051c8:	4613      	mov	r3, r2
 80051ca:	637b      	str	r3, [r7, #52]	; 0x34
      }
      sysclockfreq = pllvco;
 80051cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051ce:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80051d0:	e00d      	b.n	80051ee <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80051d2:	4b0a      	ldr	r3, [pc, #40]	; (80051fc <HAL_RCC_GetSysClockFreq+0x16c>)
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	0b5b      	lsrs	r3, r3, #13
 80051d8:	f003 0307 	and.w	r3, r3, #7
 80051dc:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80051de:	6a3b      	ldr	r3, [r7, #32]
 80051e0:	3301      	adds	r3, #1
 80051e2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80051e6:	fa02 f303 	lsl.w	r3, r2, r3
 80051ea:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80051ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80051ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	3738      	adds	r7, #56	; 0x38
 80051f4:	46bd      	mov	sp, r7
 80051f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80051fa:	bf00      	nop
 80051fc:	40023800 	.word	0x40023800
 8005200:	00f42400 	.word	0x00f42400
 8005204:	00b71b00 	.word	0x00b71b00
 8005208:	0800a310 	.word	0x0800a310

0800520c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 800520c:	b480      	push	{r7}
 800520e:	b087      	sub	sp, #28
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005214:	2300      	movs	r3, #0
 8005216:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005218:	4b29      	ldr	r3, [pc, #164]	; (80052c0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800521a:	689b      	ldr	r3, [r3, #8]
 800521c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005220:	2b00      	cmp	r3, #0
 8005222:	d12c      	bne.n	800527e <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005224:	4b26      	ldr	r3, [pc, #152]	; (80052c0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005228:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800522c:	2b00      	cmp	r3, #0
 800522e:	d005      	beq.n	800523c <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8005230:	4b24      	ldr	r3, [pc, #144]	; (80052c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8005238:	617b      	str	r3, [r7, #20]
 800523a:	e016      	b.n	800526a <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800523c:	4b20      	ldr	r3, [pc, #128]	; (80052c0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800523e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005240:	4a1f      	ldr	r2, [pc, #124]	; (80052c0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005242:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005246:	6253      	str	r3, [r2, #36]	; 0x24
 8005248:	4b1d      	ldr	r3, [pc, #116]	; (80052c0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800524a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800524c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005250:	60fb      	str	r3, [r7, #12]
 8005252:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8005254:	4b1b      	ldr	r3, [pc, #108]	; (80052c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 800525c:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 800525e:	4b18      	ldr	r3, [pc, #96]	; (80052c0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005262:	4a17      	ldr	r2, [pc, #92]	; (80052c0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005264:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005268:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8005270:	d105      	bne.n	800527e <RCC_SetFlashLatencyFromMSIRange+0x72>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005278:	d101      	bne.n	800527e <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 800527a:	2301      	movs	r3, #1
 800527c:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	2b01      	cmp	r3, #1
 8005282:	d105      	bne.n	8005290 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8005284:	4b10      	ldr	r3, [pc, #64]	; (80052c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a0f      	ldr	r2, [pc, #60]	; (80052c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800528a:	f043 0304 	orr.w	r3, r3, #4
 800528e:	6013      	str	r3, [r2, #0]
 8005290:	4b0d      	ldr	r3, [pc, #52]	; (80052c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f023 0201 	bic.w	r2, r3, #1
 8005298:	490b      	ldr	r1, [pc, #44]	; (80052c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	4313      	orrs	r3, r2
 800529e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80052a0:	4b09      	ldr	r3, [pc, #36]	; (80052c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f003 0301 	and.w	r3, r3, #1
 80052a8:	693a      	ldr	r2, [r7, #16]
 80052aa:	429a      	cmp	r2, r3
 80052ac:	d001      	beq.n	80052b2 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 80052ae:	2301      	movs	r3, #1
 80052b0:	e000      	b.n	80052b4 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 80052b2:	2300      	movs	r3, #0
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	371c      	adds	r7, #28
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bc80      	pop	{r7}
 80052bc:	4770      	bx	lr
 80052be:	bf00      	nop
 80052c0:	40023800 	.word	0x40023800
 80052c4:	40007000 	.word	0x40007000
 80052c8:	40023c00 	.word	0x40023c00

080052cc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b085      	sub	sp, #20
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2200      	movs	r2, #0
 80052d8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80052dc:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80052e0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	b29a      	uxth	r2, r3
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80052ec:	2300      	movs	r3, #0
}
 80052ee:	4618      	mov	r0, r3
 80052f0:	3714      	adds	r7, #20
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bc80      	pop	{r7}
 80052f6:	4770      	bx	lr

080052f8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80052f8:	b480      	push	{r7}
 80052fa:	b085      	sub	sp, #20
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005300:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005304:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800530c:	b29a      	uxth	r2, r3
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	b29b      	uxth	r3, r3
 8005312:	43db      	mvns	r3, r3
 8005314:	b29b      	uxth	r3, r3
 8005316:	4013      	ands	r3, r2
 8005318:	b29a      	uxth	r2, r3
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005320:	2300      	movs	r3, #0
}
 8005322:	4618      	mov	r0, r3
 8005324:	3714      	adds	r7, #20
 8005326:	46bd      	mov	sp, r7
 8005328:	bc80      	pop	{r7}
 800532a:	4770      	bx	lr

0800532c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800532c:	b084      	sub	sp, #16
 800532e:	b480      	push	{r7}
 8005330:	b083      	sub	sp, #12
 8005332:	af00      	add	r7, sp, #0
 8005334:	6078      	str	r0, [r7, #4]
 8005336:	f107 0014 	add.w	r0, r7, #20
 800533a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2201      	movs	r2, #1
 8005342:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2200      	movs	r2, #0
 800534a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2200      	movs	r2, #0
 8005352:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2200      	movs	r2, #0
 800535a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800535e:	2300      	movs	r3, #0
}
 8005360:	4618      	mov	r0, r3
 8005362:	370c      	adds	r7, #12
 8005364:	46bd      	mov	sp, r7
 8005366:	bc80      	pop	{r7}
 8005368:	b004      	add	sp, #16
 800536a:	4770      	bx	lr

0800536c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800536c:	b480      	push	{r7}
 800536e:	b09d      	sub	sp, #116	; 0x74
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
 8005374:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005376:	2300      	movs	r3, #0
 8005378:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800537c:	687a      	ldr	r2, [r7, #4]
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	781b      	ldrb	r3, [r3, #0]
 8005382:	009b      	lsls	r3, r3, #2
 8005384:	4413      	add	r3, r2
 8005386:	881b      	ldrh	r3, [r3, #0]
 8005388:	b29b      	uxth	r3, r3
 800538a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800538e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005392:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	78db      	ldrb	r3, [r3, #3]
 800539a:	2b03      	cmp	r3, #3
 800539c:	d81f      	bhi.n	80053de <USB_ActivateEndpoint+0x72>
 800539e:	a201      	add	r2, pc, #4	; (adr r2, 80053a4 <USB_ActivateEndpoint+0x38>)
 80053a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053a4:	080053b5 	.word	0x080053b5
 80053a8:	080053d1 	.word	0x080053d1
 80053ac:	080053e7 	.word	0x080053e7
 80053b0:	080053c3 	.word	0x080053c3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80053b4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80053b8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80053bc:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80053c0:	e012      	b.n	80053e8 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80053c2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80053c6:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80053ca:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80053ce:	e00b      	b.n	80053e8 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80053d0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80053d4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80053d8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80053dc:	e004      	b.n	80053e8 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80053de:	2301      	movs	r3, #1
 80053e0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 80053e4:	e000      	b.n	80053e8 <USB_ActivateEndpoint+0x7c>
      break;
 80053e6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80053e8:	687a      	ldr	r2, [r7, #4]
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	781b      	ldrb	r3, [r3, #0]
 80053ee:	009b      	lsls	r3, r3, #2
 80053f0:	441a      	add	r2, r3
 80053f2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80053f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005402:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005406:	b29b      	uxth	r3, r3
 8005408:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800540a:	687a      	ldr	r2, [r7, #4]
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	781b      	ldrb	r3, [r3, #0]
 8005410:	009b      	lsls	r3, r3, #2
 8005412:	4413      	add	r3, r2
 8005414:	881b      	ldrh	r3, [r3, #0]
 8005416:	b29b      	uxth	r3, r3
 8005418:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800541c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005420:	b29a      	uxth	r2, r3
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	781b      	ldrb	r3, [r3, #0]
 8005426:	b29b      	uxth	r3, r3
 8005428:	4313      	orrs	r3, r2
 800542a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800542e:	687a      	ldr	r2, [r7, #4]
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	781b      	ldrb	r3, [r3, #0]
 8005434:	009b      	lsls	r3, r3, #2
 8005436:	441a      	add	r2, r3
 8005438:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800543c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005440:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005444:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005448:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800544c:	b29b      	uxth	r3, r3
 800544e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	7b1b      	ldrb	r3, [r3, #12]
 8005454:	2b00      	cmp	r3, #0
 8005456:	f040 8178 	bne.w	800574a <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	785b      	ldrb	r3, [r3, #1]
 800545e:	2b00      	cmp	r3, #0
 8005460:	f000 8084 	beq.w	800556c <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	61bb      	str	r3, [r7, #24]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800546e:	b29b      	uxth	r3, r3
 8005470:	461a      	mov	r2, r3
 8005472:	69bb      	ldr	r3, [r7, #24]
 8005474:	4413      	add	r3, r2
 8005476:	61bb      	str	r3, [r7, #24]
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	781b      	ldrb	r3, [r3, #0]
 800547c:	011a      	lsls	r2, r3, #4
 800547e:	69bb      	ldr	r3, [r7, #24]
 8005480:	4413      	add	r3, r2
 8005482:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005486:	617b      	str	r3, [r7, #20]
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	88db      	ldrh	r3, [r3, #6]
 800548c:	085b      	lsrs	r3, r3, #1
 800548e:	b29b      	uxth	r3, r3
 8005490:	005b      	lsls	r3, r3, #1
 8005492:	b29a      	uxth	r2, r3
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005498:	687a      	ldr	r2, [r7, #4]
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	781b      	ldrb	r3, [r3, #0]
 800549e:	009b      	lsls	r3, r3, #2
 80054a0:	4413      	add	r3, r2
 80054a2:	881b      	ldrh	r3, [r3, #0]
 80054a4:	827b      	strh	r3, [r7, #18]
 80054a6:	8a7b      	ldrh	r3, [r7, #18]
 80054a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d01b      	beq.n	80054e8 <USB_ActivateEndpoint+0x17c>
 80054b0:	687a      	ldr	r2, [r7, #4]
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	781b      	ldrb	r3, [r3, #0]
 80054b6:	009b      	lsls	r3, r3, #2
 80054b8:	4413      	add	r3, r2
 80054ba:	881b      	ldrh	r3, [r3, #0]
 80054bc:	b29b      	uxth	r3, r3
 80054be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054c6:	823b      	strh	r3, [r7, #16]
 80054c8:	687a      	ldr	r2, [r7, #4]
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	781b      	ldrb	r3, [r3, #0]
 80054ce:	009b      	lsls	r3, r3, #2
 80054d0:	441a      	add	r2, r3
 80054d2:	8a3b      	ldrh	r3, [r7, #16]
 80054d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054e0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80054e4:	b29b      	uxth	r3, r3
 80054e6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	78db      	ldrb	r3, [r3, #3]
 80054ec:	2b01      	cmp	r3, #1
 80054ee:	d020      	beq.n	8005532 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80054f0:	687a      	ldr	r2, [r7, #4]
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	781b      	ldrb	r3, [r3, #0]
 80054f6:	009b      	lsls	r3, r3, #2
 80054f8:	4413      	add	r3, r2
 80054fa:	881b      	ldrh	r3, [r3, #0]
 80054fc:	b29b      	uxth	r3, r3
 80054fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005502:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005506:	81bb      	strh	r3, [r7, #12]
 8005508:	89bb      	ldrh	r3, [r7, #12]
 800550a:	f083 0320 	eor.w	r3, r3, #32
 800550e:	81bb      	strh	r3, [r7, #12]
 8005510:	687a      	ldr	r2, [r7, #4]
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	781b      	ldrb	r3, [r3, #0]
 8005516:	009b      	lsls	r3, r3, #2
 8005518:	441a      	add	r2, r3
 800551a:	89bb      	ldrh	r3, [r7, #12]
 800551c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005520:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005524:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005528:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800552c:	b29b      	uxth	r3, r3
 800552e:	8013      	strh	r3, [r2, #0]
 8005530:	e2d5      	b.n	8005ade <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005532:	687a      	ldr	r2, [r7, #4]
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	781b      	ldrb	r3, [r3, #0]
 8005538:	009b      	lsls	r3, r3, #2
 800553a:	4413      	add	r3, r2
 800553c:	881b      	ldrh	r3, [r3, #0]
 800553e:	b29b      	uxth	r3, r3
 8005540:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005544:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005548:	81fb      	strh	r3, [r7, #14]
 800554a:	687a      	ldr	r2, [r7, #4]
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	781b      	ldrb	r3, [r3, #0]
 8005550:	009b      	lsls	r3, r3, #2
 8005552:	441a      	add	r2, r3
 8005554:	89fb      	ldrh	r3, [r7, #14]
 8005556:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800555a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800555e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005562:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005566:	b29b      	uxth	r3, r3
 8005568:	8013      	strh	r3, [r2, #0]
 800556a:	e2b8      	b.n	8005ade <USB_ActivateEndpoint+0x772>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	633b      	str	r3, [r7, #48]	; 0x30
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005576:	b29b      	uxth	r3, r3
 8005578:	461a      	mov	r2, r3
 800557a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800557c:	4413      	add	r3, r2
 800557e:	633b      	str	r3, [r7, #48]	; 0x30
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	781b      	ldrb	r3, [r3, #0]
 8005584:	011a      	lsls	r2, r3, #4
 8005586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005588:	4413      	add	r3, r2
 800558a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800558e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	88db      	ldrh	r3, [r3, #6]
 8005594:	085b      	lsrs	r3, r3, #1
 8005596:	b29b      	uxth	r3, r3
 8005598:	005b      	lsls	r3, r3, #1
 800559a:	b29a      	uxth	r2, r3
 800559c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800559e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055aa:	b29b      	uxth	r3, r3
 80055ac:	461a      	mov	r2, r3
 80055ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055b0:	4413      	add	r3, r2
 80055b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	781b      	ldrb	r3, [r3, #0]
 80055b8:	011a      	lsls	r2, r3, #4
 80055ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055bc:	4413      	add	r3, r2
 80055be:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80055c2:	627b      	str	r3, [r7, #36]	; 0x24
 80055c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c6:	881b      	ldrh	r3, [r3, #0]
 80055c8:	b29b      	uxth	r3, r3
 80055ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80055ce:	b29a      	uxth	r2, r3
 80055d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d2:	801a      	strh	r2, [r3, #0]
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	691b      	ldr	r3, [r3, #16]
 80055d8:	2b3e      	cmp	r3, #62	; 0x3e
 80055da:	d91d      	bls.n	8005618 <USB_ActivateEndpoint+0x2ac>
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	691b      	ldr	r3, [r3, #16]
 80055e0:	095b      	lsrs	r3, r3, #5
 80055e2:	66bb      	str	r3, [r7, #104]	; 0x68
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	691b      	ldr	r3, [r3, #16]
 80055e8:	f003 031f 	and.w	r3, r3, #31
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d102      	bne.n	80055f6 <USB_ActivateEndpoint+0x28a>
 80055f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80055f2:	3b01      	subs	r3, #1
 80055f4:	66bb      	str	r3, [r7, #104]	; 0x68
 80055f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f8:	881b      	ldrh	r3, [r3, #0]
 80055fa:	b29a      	uxth	r2, r3
 80055fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80055fe:	b29b      	uxth	r3, r3
 8005600:	029b      	lsls	r3, r3, #10
 8005602:	b29b      	uxth	r3, r3
 8005604:	4313      	orrs	r3, r2
 8005606:	b29b      	uxth	r3, r3
 8005608:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800560c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005610:	b29a      	uxth	r2, r3
 8005612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005614:	801a      	strh	r2, [r3, #0]
 8005616:	e026      	b.n	8005666 <USB_ActivateEndpoint+0x2fa>
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	691b      	ldr	r3, [r3, #16]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d10a      	bne.n	8005636 <USB_ActivateEndpoint+0x2ca>
 8005620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005622:	881b      	ldrh	r3, [r3, #0]
 8005624:	b29b      	uxth	r3, r3
 8005626:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800562a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800562e:	b29a      	uxth	r2, r3
 8005630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005632:	801a      	strh	r2, [r3, #0]
 8005634:	e017      	b.n	8005666 <USB_ActivateEndpoint+0x2fa>
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	691b      	ldr	r3, [r3, #16]
 800563a:	085b      	lsrs	r3, r3, #1
 800563c:	66bb      	str	r3, [r7, #104]	; 0x68
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	691b      	ldr	r3, [r3, #16]
 8005642:	f003 0301 	and.w	r3, r3, #1
 8005646:	2b00      	cmp	r3, #0
 8005648:	d002      	beq.n	8005650 <USB_ActivateEndpoint+0x2e4>
 800564a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800564c:	3301      	adds	r3, #1
 800564e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005652:	881b      	ldrh	r3, [r3, #0]
 8005654:	b29a      	uxth	r2, r3
 8005656:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005658:	b29b      	uxth	r3, r3
 800565a:	029b      	lsls	r3, r3, #10
 800565c:	b29b      	uxth	r3, r3
 800565e:	4313      	orrs	r3, r2
 8005660:	b29a      	uxth	r2, r3
 8005662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005664:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005666:	687a      	ldr	r2, [r7, #4]
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	781b      	ldrb	r3, [r3, #0]
 800566c:	009b      	lsls	r3, r3, #2
 800566e:	4413      	add	r3, r2
 8005670:	881b      	ldrh	r3, [r3, #0]
 8005672:	847b      	strh	r3, [r7, #34]	; 0x22
 8005674:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005676:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800567a:	2b00      	cmp	r3, #0
 800567c:	d01b      	beq.n	80056b6 <USB_ActivateEndpoint+0x34a>
 800567e:	687a      	ldr	r2, [r7, #4]
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	781b      	ldrb	r3, [r3, #0]
 8005684:	009b      	lsls	r3, r3, #2
 8005686:	4413      	add	r3, r2
 8005688:	881b      	ldrh	r3, [r3, #0]
 800568a:	b29b      	uxth	r3, r3
 800568c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005690:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005694:	843b      	strh	r3, [r7, #32]
 8005696:	687a      	ldr	r2, [r7, #4]
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	781b      	ldrb	r3, [r3, #0]
 800569c:	009b      	lsls	r3, r3, #2
 800569e:	441a      	add	r2, r3
 80056a0:	8c3b      	ldrh	r3, [r7, #32]
 80056a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056aa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80056ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056b2:	b29b      	uxth	r3, r3
 80056b4:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	781b      	ldrb	r3, [r3, #0]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d124      	bne.n	8005708 <USB_ActivateEndpoint+0x39c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80056be:	687a      	ldr	r2, [r7, #4]
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	781b      	ldrb	r3, [r3, #0]
 80056c4:	009b      	lsls	r3, r3, #2
 80056c6:	4413      	add	r3, r2
 80056c8:	881b      	ldrh	r3, [r3, #0]
 80056ca:	b29b      	uxth	r3, r3
 80056cc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80056d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056d4:	83bb      	strh	r3, [r7, #28]
 80056d6:	8bbb      	ldrh	r3, [r7, #28]
 80056d8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80056dc:	83bb      	strh	r3, [r7, #28]
 80056de:	8bbb      	ldrh	r3, [r7, #28]
 80056e0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80056e4:	83bb      	strh	r3, [r7, #28]
 80056e6:	687a      	ldr	r2, [r7, #4]
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	781b      	ldrb	r3, [r3, #0]
 80056ec:	009b      	lsls	r3, r3, #2
 80056ee:	441a      	add	r2, r3
 80056f0:	8bbb      	ldrh	r3, [r7, #28]
 80056f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005702:	b29b      	uxth	r3, r3
 8005704:	8013      	strh	r3, [r2, #0]
 8005706:	e1ea      	b.n	8005ade <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8005708:	687a      	ldr	r2, [r7, #4]
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	781b      	ldrb	r3, [r3, #0]
 800570e:	009b      	lsls	r3, r3, #2
 8005710:	4413      	add	r3, r2
 8005712:	881b      	ldrh	r3, [r3, #0]
 8005714:	b29b      	uxth	r3, r3
 8005716:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800571a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800571e:	83fb      	strh	r3, [r7, #30]
 8005720:	8bfb      	ldrh	r3, [r7, #30]
 8005722:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005726:	83fb      	strh	r3, [r7, #30]
 8005728:	687a      	ldr	r2, [r7, #4]
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	781b      	ldrb	r3, [r3, #0]
 800572e:	009b      	lsls	r3, r3, #2
 8005730:	441a      	add	r2, r3
 8005732:	8bfb      	ldrh	r3, [r7, #30]
 8005734:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005738:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800573c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005740:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005744:	b29b      	uxth	r3, r3
 8005746:	8013      	strh	r3, [r2, #0]
 8005748:	e1c9      	b.n	8005ade <USB_ActivateEndpoint+0x772>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	78db      	ldrb	r3, [r3, #3]
 800574e:	2b02      	cmp	r3, #2
 8005750:	d11e      	bne.n	8005790 <USB_ActivateEndpoint+0x424>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005752:	687a      	ldr	r2, [r7, #4]
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	781b      	ldrb	r3, [r3, #0]
 8005758:	009b      	lsls	r3, r3, #2
 800575a:	4413      	add	r3, r2
 800575c:	881b      	ldrh	r3, [r3, #0]
 800575e:	b29b      	uxth	r3, r3
 8005760:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005764:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005768:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800576c:	687a      	ldr	r2, [r7, #4]
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	781b      	ldrb	r3, [r3, #0]
 8005772:	009b      	lsls	r3, r3, #2
 8005774:	441a      	add	r2, r3
 8005776:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800577a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800577e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005782:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005786:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800578a:	b29b      	uxth	r3, r3
 800578c:	8013      	strh	r3, [r2, #0]
 800578e:	e01d      	b.n	80057cc <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8005790:	687a      	ldr	r2, [r7, #4]
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	781b      	ldrb	r3, [r3, #0]
 8005796:	009b      	lsls	r3, r3, #2
 8005798:	4413      	add	r3, r2
 800579a:	881b      	ldrh	r3, [r3, #0]
 800579c:	b29b      	uxth	r3, r3
 800579e:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80057a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057a6:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 80057aa:	687a      	ldr	r2, [r7, #4]
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	781b      	ldrb	r3, [r3, #0]
 80057b0:	009b      	lsls	r3, r3, #2
 80057b2:	441a      	add	r2, r3
 80057b4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80057b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057c8:	b29b      	uxth	r3, r3
 80057ca:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	65fb      	str	r3, [r7, #92]	; 0x5c
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057d6:	b29b      	uxth	r3, r3
 80057d8:	461a      	mov	r2, r3
 80057da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80057dc:	4413      	add	r3, r2
 80057de:	65fb      	str	r3, [r7, #92]	; 0x5c
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	781b      	ldrb	r3, [r3, #0]
 80057e4:	011a      	lsls	r2, r3, #4
 80057e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80057e8:	4413      	add	r3, r2
 80057ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80057ee:	65bb      	str	r3, [r7, #88]	; 0x58
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	891b      	ldrh	r3, [r3, #8]
 80057f4:	085b      	lsrs	r3, r3, #1
 80057f6:	b29b      	uxth	r3, r3
 80057f8:	005b      	lsls	r3, r3, #1
 80057fa:	b29a      	uxth	r2, r3
 80057fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80057fe:	801a      	strh	r2, [r3, #0]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	657b      	str	r3, [r7, #84]	; 0x54
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800580a:	b29b      	uxth	r3, r3
 800580c:	461a      	mov	r2, r3
 800580e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005810:	4413      	add	r3, r2
 8005812:	657b      	str	r3, [r7, #84]	; 0x54
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	781b      	ldrb	r3, [r3, #0]
 8005818:	011a      	lsls	r2, r3, #4
 800581a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800581c:	4413      	add	r3, r2
 800581e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005822:	653b      	str	r3, [r7, #80]	; 0x50
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	895b      	ldrh	r3, [r3, #10]
 8005828:	085b      	lsrs	r3, r3, #1
 800582a:	b29b      	uxth	r3, r3
 800582c:	005b      	lsls	r3, r3, #1
 800582e:	b29a      	uxth	r2, r3
 8005830:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005832:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	785b      	ldrb	r3, [r3, #1]
 8005838:	2b00      	cmp	r3, #0
 800583a:	f040 8093 	bne.w	8005964 <USB_ActivateEndpoint+0x5f8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800583e:	687a      	ldr	r2, [r7, #4]
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	781b      	ldrb	r3, [r3, #0]
 8005844:	009b      	lsls	r3, r3, #2
 8005846:	4413      	add	r3, r2
 8005848:	881b      	ldrh	r3, [r3, #0]
 800584a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800584e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005852:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005856:	2b00      	cmp	r3, #0
 8005858:	d01b      	beq.n	8005892 <USB_ActivateEndpoint+0x526>
 800585a:	687a      	ldr	r2, [r7, #4]
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	781b      	ldrb	r3, [r3, #0]
 8005860:	009b      	lsls	r3, r3, #2
 8005862:	4413      	add	r3, r2
 8005864:	881b      	ldrh	r3, [r3, #0]
 8005866:	b29b      	uxth	r3, r3
 8005868:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800586c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005870:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005872:	687a      	ldr	r2, [r7, #4]
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	781b      	ldrb	r3, [r3, #0]
 8005878:	009b      	lsls	r3, r3, #2
 800587a:	441a      	add	r2, r3
 800587c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800587e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005882:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005886:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800588a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800588e:	b29b      	uxth	r3, r3
 8005890:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005892:	687a      	ldr	r2, [r7, #4]
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	781b      	ldrb	r3, [r3, #0]
 8005898:	009b      	lsls	r3, r3, #2
 800589a:	4413      	add	r3, r2
 800589c:	881b      	ldrh	r3, [r3, #0]
 800589e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80058a0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80058a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d01b      	beq.n	80058e2 <USB_ActivateEndpoint+0x576>
 80058aa:	687a      	ldr	r2, [r7, #4]
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	781b      	ldrb	r3, [r3, #0]
 80058b0:	009b      	lsls	r3, r3, #2
 80058b2:	4413      	add	r3, r2
 80058b4:	881b      	ldrh	r3, [r3, #0]
 80058b6:	b29b      	uxth	r3, r3
 80058b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058c0:	877b      	strh	r3, [r7, #58]	; 0x3a
 80058c2:	687a      	ldr	r2, [r7, #4]
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	781b      	ldrb	r3, [r3, #0]
 80058c8:	009b      	lsls	r3, r3, #2
 80058ca:	441a      	add	r2, r3
 80058cc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80058ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058da:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80058de:	b29b      	uxth	r3, r3
 80058e0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80058e2:	687a      	ldr	r2, [r7, #4]
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	781b      	ldrb	r3, [r3, #0]
 80058e8:	009b      	lsls	r3, r3, #2
 80058ea:	4413      	add	r3, r2
 80058ec:	881b      	ldrh	r3, [r3, #0]
 80058ee:	b29b      	uxth	r3, r3
 80058f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80058f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058f8:	873b      	strh	r3, [r7, #56]	; 0x38
 80058fa:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80058fc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005900:	873b      	strh	r3, [r7, #56]	; 0x38
 8005902:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005904:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005908:	873b      	strh	r3, [r7, #56]	; 0x38
 800590a:	687a      	ldr	r2, [r7, #4]
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	781b      	ldrb	r3, [r3, #0]
 8005910:	009b      	lsls	r3, r3, #2
 8005912:	441a      	add	r2, r3
 8005914:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005916:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800591a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800591e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005922:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005926:	b29b      	uxth	r3, r3
 8005928:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800592a:	687a      	ldr	r2, [r7, #4]
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	781b      	ldrb	r3, [r3, #0]
 8005930:	009b      	lsls	r3, r3, #2
 8005932:	4413      	add	r3, r2
 8005934:	881b      	ldrh	r3, [r3, #0]
 8005936:	b29b      	uxth	r3, r3
 8005938:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800593c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005940:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005942:	687a      	ldr	r2, [r7, #4]
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	781b      	ldrb	r3, [r3, #0]
 8005948:	009b      	lsls	r3, r3, #2
 800594a:	441a      	add	r2, r3
 800594c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800594e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005952:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005956:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800595a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800595e:	b29b      	uxth	r3, r3
 8005960:	8013      	strh	r3, [r2, #0]
 8005962:	e0bc      	b.n	8005ade <USB_ActivateEndpoint+0x772>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005964:	687a      	ldr	r2, [r7, #4]
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	781b      	ldrb	r3, [r3, #0]
 800596a:	009b      	lsls	r3, r3, #2
 800596c:	4413      	add	r3, r2
 800596e:	881b      	ldrh	r3, [r3, #0]
 8005970:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8005974:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005978:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800597c:	2b00      	cmp	r3, #0
 800597e:	d01d      	beq.n	80059bc <USB_ActivateEndpoint+0x650>
 8005980:	687a      	ldr	r2, [r7, #4]
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	781b      	ldrb	r3, [r3, #0]
 8005986:	009b      	lsls	r3, r3, #2
 8005988:	4413      	add	r3, r2
 800598a:	881b      	ldrh	r3, [r3, #0]
 800598c:	b29b      	uxth	r3, r3
 800598e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005992:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005996:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800599a:	687a      	ldr	r2, [r7, #4]
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	781b      	ldrb	r3, [r3, #0]
 80059a0:	009b      	lsls	r3, r3, #2
 80059a2:	441a      	add	r2, r3
 80059a4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80059a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80059b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059b8:	b29b      	uxth	r3, r3
 80059ba:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80059bc:	687a      	ldr	r2, [r7, #4]
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	781b      	ldrb	r3, [r3, #0]
 80059c2:	009b      	lsls	r3, r3, #2
 80059c4:	4413      	add	r3, r2
 80059c6:	881b      	ldrh	r3, [r3, #0]
 80059c8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80059cc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80059d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d01d      	beq.n	8005a14 <USB_ActivateEndpoint+0x6a8>
 80059d8:	687a      	ldr	r2, [r7, #4]
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	781b      	ldrb	r3, [r3, #0]
 80059de:	009b      	lsls	r3, r3, #2
 80059e0:	4413      	add	r3, r2
 80059e2:	881b      	ldrh	r3, [r3, #0]
 80059e4:	b29b      	uxth	r3, r3
 80059e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059ee:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80059f2:	687a      	ldr	r2, [r7, #4]
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	781b      	ldrb	r3, [r3, #0]
 80059f8:	009b      	lsls	r3, r3, #2
 80059fa:	441a      	add	r2, r3
 80059fc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005a00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a0c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005a10:	b29b      	uxth	r3, r3
 8005a12:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	78db      	ldrb	r3, [r3, #3]
 8005a18:	2b01      	cmp	r3, #1
 8005a1a:	d024      	beq.n	8005a66 <USB_ActivateEndpoint+0x6fa>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005a1c:	687a      	ldr	r2, [r7, #4]
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	781b      	ldrb	r3, [r3, #0]
 8005a22:	009b      	lsls	r3, r3, #2
 8005a24:	4413      	add	r3, r2
 8005a26:	881b      	ldrh	r3, [r3, #0]
 8005a28:	b29b      	uxth	r3, r3
 8005a2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a32:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005a36:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005a3a:	f083 0320 	eor.w	r3, r3, #32
 8005a3e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005a42:	687a      	ldr	r2, [r7, #4]
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	781b      	ldrb	r3, [r3, #0]
 8005a48:	009b      	lsls	r3, r3, #2
 8005a4a:	441a      	add	r2, r3
 8005a4c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005a50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a60:	b29b      	uxth	r3, r3
 8005a62:	8013      	strh	r3, [r2, #0]
 8005a64:	e01d      	b.n	8005aa2 <USB_ActivateEndpoint+0x736>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005a66:	687a      	ldr	r2, [r7, #4]
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	781b      	ldrb	r3, [r3, #0]
 8005a6c:	009b      	lsls	r3, r3, #2
 8005a6e:	4413      	add	r3, r2
 8005a70:	881b      	ldrh	r3, [r3, #0]
 8005a72:	b29b      	uxth	r3, r3
 8005a74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a7c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005a80:	687a      	ldr	r2, [r7, #4]
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	781b      	ldrb	r3, [r3, #0]
 8005a86:	009b      	lsls	r3, r3, #2
 8005a88:	441a      	add	r2, r3
 8005a8a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005a8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a9e:	b29b      	uxth	r3, r3
 8005aa0:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005aa2:	687a      	ldr	r2, [r7, #4]
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	781b      	ldrb	r3, [r3, #0]
 8005aa8:	009b      	lsls	r3, r3, #2
 8005aaa:	4413      	add	r3, r2
 8005aac:	881b      	ldrh	r3, [r3, #0]
 8005aae:	b29b      	uxth	r3, r3
 8005ab0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ab4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ab8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005abc:	687a      	ldr	r2, [r7, #4]
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	781b      	ldrb	r3, [r3, #0]
 8005ac2:	009b      	lsls	r3, r3, #2
 8005ac4:	441a      	add	r2, r3
 8005ac6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005aca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ace:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ad2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ad6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ada:	b29b      	uxth	r3, r3
 8005adc:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8005ade:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	3774      	adds	r7, #116	; 0x74
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bc80      	pop	{r7}
 8005aea:	4770      	bx	lr

08005aec <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005aec:	b480      	push	{r7}
 8005aee:	b08d      	sub	sp, #52	; 0x34
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
 8005af4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	7b1b      	ldrb	r3, [r3, #12]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	f040 808e 	bne.w	8005c1c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	785b      	ldrb	r3, [r3, #1]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d044      	beq.n	8005b92 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005b08:	687a      	ldr	r2, [r7, #4]
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	781b      	ldrb	r3, [r3, #0]
 8005b0e:	009b      	lsls	r3, r3, #2
 8005b10:	4413      	add	r3, r2
 8005b12:	881b      	ldrh	r3, [r3, #0]
 8005b14:	81bb      	strh	r3, [r7, #12]
 8005b16:	89bb      	ldrh	r3, [r7, #12]
 8005b18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d01b      	beq.n	8005b58 <USB_DeactivateEndpoint+0x6c>
 8005b20:	687a      	ldr	r2, [r7, #4]
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	781b      	ldrb	r3, [r3, #0]
 8005b26:	009b      	lsls	r3, r3, #2
 8005b28:	4413      	add	r3, r2
 8005b2a:	881b      	ldrh	r3, [r3, #0]
 8005b2c:	b29b      	uxth	r3, r3
 8005b2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b36:	817b      	strh	r3, [r7, #10]
 8005b38:	687a      	ldr	r2, [r7, #4]
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	781b      	ldrb	r3, [r3, #0]
 8005b3e:	009b      	lsls	r3, r3, #2
 8005b40:	441a      	add	r2, r3
 8005b42:	897b      	ldrh	r3, [r7, #10]
 8005b44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b50:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005b54:	b29b      	uxth	r3, r3
 8005b56:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005b58:	687a      	ldr	r2, [r7, #4]
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	781b      	ldrb	r3, [r3, #0]
 8005b5e:	009b      	lsls	r3, r3, #2
 8005b60:	4413      	add	r3, r2
 8005b62:	881b      	ldrh	r3, [r3, #0]
 8005b64:	b29b      	uxth	r3, r3
 8005b66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b6e:	813b      	strh	r3, [r7, #8]
 8005b70:	687a      	ldr	r2, [r7, #4]
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	781b      	ldrb	r3, [r3, #0]
 8005b76:	009b      	lsls	r3, r3, #2
 8005b78:	441a      	add	r2, r3
 8005b7a:	893b      	ldrh	r3, [r7, #8]
 8005b7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b8c:	b29b      	uxth	r3, r3
 8005b8e:	8013      	strh	r3, [r2, #0]
 8005b90:	e192      	b.n	8005eb8 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005b92:	687a      	ldr	r2, [r7, #4]
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	781b      	ldrb	r3, [r3, #0]
 8005b98:	009b      	lsls	r3, r3, #2
 8005b9a:	4413      	add	r3, r2
 8005b9c:	881b      	ldrh	r3, [r3, #0]
 8005b9e:	827b      	strh	r3, [r7, #18]
 8005ba0:	8a7b      	ldrh	r3, [r7, #18]
 8005ba2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d01b      	beq.n	8005be2 <USB_DeactivateEndpoint+0xf6>
 8005baa:	687a      	ldr	r2, [r7, #4]
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	781b      	ldrb	r3, [r3, #0]
 8005bb0:	009b      	lsls	r3, r3, #2
 8005bb2:	4413      	add	r3, r2
 8005bb4:	881b      	ldrh	r3, [r3, #0]
 8005bb6:	b29b      	uxth	r3, r3
 8005bb8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bc0:	823b      	strh	r3, [r7, #16]
 8005bc2:	687a      	ldr	r2, [r7, #4]
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	781b      	ldrb	r3, [r3, #0]
 8005bc8:	009b      	lsls	r3, r3, #2
 8005bca:	441a      	add	r2, r3
 8005bcc:	8a3b      	ldrh	r3, [r7, #16]
 8005bce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bd6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005bda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bde:	b29b      	uxth	r3, r3
 8005be0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005be2:	687a      	ldr	r2, [r7, #4]
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	781b      	ldrb	r3, [r3, #0]
 8005be8:	009b      	lsls	r3, r3, #2
 8005bea:	4413      	add	r3, r2
 8005bec:	881b      	ldrh	r3, [r3, #0]
 8005bee:	b29b      	uxth	r3, r3
 8005bf0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005bf4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bf8:	81fb      	strh	r3, [r7, #14]
 8005bfa:	687a      	ldr	r2, [r7, #4]
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	781b      	ldrb	r3, [r3, #0]
 8005c00:	009b      	lsls	r3, r3, #2
 8005c02:	441a      	add	r2, r3
 8005c04:	89fb      	ldrh	r3, [r7, #14]
 8005c06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c16:	b29b      	uxth	r3, r3
 8005c18:	8013      	strh	r3, [r2, #0]
 8005c1a:	e14d      	b.n	8005eb8 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	785b      	ldrb	r3, [r3, #1]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	f040 80a5 	bne.w	8005d70 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005c26:	687a      	ldr	r2, [r7, #4]
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	781b      	ldrb	r3, [r3, #0]
 8005c2c:	009b      	lsls	r3, r3, #2
 8005c2e:	4413      	add	r3, r2
 8005c30:	881b      	ldrh	r3, [r3, #0]
 8005c32:	843b      	strh	r3, [r7, #32]
 8005c34:	8c3b      	ldrh	r3, [r7, #32]
 8005c36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d01b      	beq.n	8005c76 <USB_DeactivateEndpoint+0x18a>
 8005c3e:	687a      	ldr	r2, [r7, #4]
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	781b      	ldrb	r3, [r3, #0]
 8005c44:	009b      	lsls	r3, r3, #2
 8005c46:	4413      	add	r3, r2
 8005c48:	881b      	ldrh	r3, [r3, #0]
 8005c4a:	b29b      	uxth	r3, r3
 8005c4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c54:	83fb      	strh	r3, [r7, #30]
 8005c56:	687a      	ldr	r2, [r7, #4]
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	781b      	ldrb	r3, [r3, #0]
 8005c5c:	009b      	lsls	r3, r3, #2
 8005c5e:	441a      	add	r2, r3
 8005c60:	8bfb      	ldrh	r3, [r7, #30]
 8005c62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c6a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005c6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c72:	b29b      	uxth	r3, r3
 8005c74:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005c76:	687a      	ldr	r2, [r7, #4]
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	781b      	ldrb	r3, [r3, #0]
 8005c7c:	009b      	lsls	r3, r3, #2
 8005c7e:	4413      	add	r3, r2
 8005c80:	881b      	ldrh	r3, [r3, #0]
 8005c82:	83bb      	strh	r3, [r7, #28]
 8005c84:	8bbb      	ldrh	r3, [r7, #28]
 8005c86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d01b      	beq.n	8005cc6 <USB_DeactivateEndpoint+0x1da>
 8005c8e:	687a      	ldr	r2, [r7, #4]
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	781b      	ldrb	r3, [r3, #0]
 8005c94:	009b      	lsls	r3, r3, #2
 8005c96:	4413      	add	r3, r2
 8005c98:	881b      	ldrh	r3, [r3, #0]
 8005c9a:	b29b      	uxth	r3, r3
 8005c9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ca0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ca4:	837b      	strh	r3, [r7, #26]
 8005ca6:	687a      	ldr	r2, [r7, #4]
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	781b      	ldrb	r3, [r3, #0]
 8005cac:	009b      	lsls	r3, r3, #2
 8005cae:	441a      	add	r2, r3
 8005cb0:	8b7b      	ldrh	r3, [r7, #26]
 8005cb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cb6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cbe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005cc2:	b29b      	uxth	r3, r3
 8005cc4:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005cc6:	687a      	ldr	r2, [r7, #4]
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	781b      	ldrb	r3, [r3, #0]
 8005ccc:	009b      	lsls	r3, r3, #2
 8005cce:	4413      	add	r3, r2
 8005cd0:	881b      	ldrh	r3, [r3, #0]
 8005cd2:	b29b      	uxth	r3, r3
 8005cd4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cdc:	833b      	strh	r3, [r7, #24]
 8005cde:	687a      	ldr	r2, [r7, #4]
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	781b      	ldrb	r3, [r3, #0]
 8005ce4:	009b      	lsls	r3, r3, #2
 8005ce6:	441a      	add	r2, r3
 8005ce8:	8b3b      	ldrh	r3, [r7, #24]
 8005cea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cf2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cf6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005cfa:	b29b      	uxth	r3, r3
 8005cfc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005cfe:	687a      	ldr	r2, [r7, #4]
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	781b      	ldrb	r3, [r3, #0]
 8005d04:	009b      	lsls	r3, r3, #2
 8005d06:	4413      	add	r3, r2
 8005d08:	881b      	ldrh	r3, [r3, #0]
 8005d0a:	b29b      	uxth	r3, r3
 8005d0c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d14:	82fb      	strh	r3, [r7, #22]
 8005d16:	687a      	ldr	r2, [r7, #4]
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	781b      	ldrb	r3, [r3, #0]
 8005d1c:	009b      	lsls	r3, r3, #2
 8005d1e:	441a      	add	r2, r3
 8005d20:	8afb      	ldrh	r3, [r7, #22]
 8005d22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d32:	b29b      	uxth	r3, r3
 8005d34:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005d36:	687a      	ldr	r2, [r7, #4]
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	781b      	ldrb	r3, [r3, #0]
 8005d3c:	009b      	lsls	r3, r3, #2
 8005d3e:	4413      	add	r3, r2
 8005d40:	881b      	ldrh	r3, [r3, #0]
 8005d42:	b29b      	uxth	r3, r3
 8005d44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d4c:	82bb      	strh	r3, [r7, #20]
 8005d4e:	687a      	ldr	r2, [r7, #4]
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	781b      	ldrb	r3, [r3, #0]
 8005d54:	009b      	lsls	r3, r3, #2
 8005d56:	441a      	add	r2, r3
 8005d58:	8abb      	ldrh	r3, [r7, #20]
 8005d5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d6a:	b29b      	uxth	r3, r3
 8005d6c:	8013      	strh	r3, [r2, #0]
 8005d6e:	e0a3      	b.n	8005eb8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005d70:	687a      	ldr	r2, [r7, #4]
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	781b      	ldrb	r3, [r3, #0]
 8005d76:	009b      	lsls	r3, r3, #2
 8005d78:	4413      	add	r3, r2
 8005d7a:	881b      	ldrh	r3, [r3, #0]
 8005d7c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005d7e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005d80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d01b      	beq.n	8005dc0 <USB_DeactivateEndpoint+0x2d4>
 8005d88:	687a      	ldr	r2, [r7, #4]
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	781b      	ldrb	r3, [r3, #0]
 8005d8e:	009b      	lsls	r3, r3, #2
 8005d90:	4413      	add	r3, r2
 8005d92:	881b      	ldrh	r3, [r3, #0]
 8005d94:	b29b      	uxth	r3, r3
 8005d96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d9e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005da0:	687a      	ldr	r2, [r7, #4]
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	781b      	ldrb	r3, [r3, #0]
 8005da6:	009b      	lsls	r3, r3, #2
 8005da8:	441a      	add	r2, r3
 8005daa:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005dac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005db0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005db4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005db8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dbc:	b29b      	uxth	r3, r3
 8005dbe:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005dc0:	687a      	ldr	r2, [r7, #4]
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	781b      	ldrb	r3, [r3, #0]
 8005dc6:	009b      	lsls	r3, r3, #2
 8005dc8:	4413      	add	r3, r2
 8005dca:	881b      	ldrh	r3, [r3, #0]
 8005dcc:	857b      	strh	r3, [r7, #42]	; 0x2a
 8005dce:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005dd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d01b      	beq.n	8005e10 <USB_DeactivateEndpoint+0x324>
 8005dd8:	687a      	ldr	r2, [r7, #4]
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	781b      	ldrb	r3, [r3, #0]
 8005dde:	009b      	lsls	r3, r3, #2
 8005de0:	4413      	add	r3, r2
 8005de2:	881b      	ldrh	r3, [r3, #0]
 8005de4:	b29b      	uxth	r3, r3
 8005de6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005dea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dee:	853b      	strh	r3, [r7, #40]	; 0x28
 8005df0:	687a      	ldr	r2, [r7, #4]
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	781b      	ldrb	r3, [r3, #0]
 8005df6:	009b      	lsls	r3, r3, #2
 8005df8:	441a      	add	r2, r3
 8005dfa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005dfc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e08:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005e0c:	b29b      	uxth	r3, r3
 8005e0e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005e10:	687a      	ldr	r2, [r7, #4]
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	781b      	ldrb	r3, [r3, #0]
 8005e16:	009b      	lsls	r3, r3, #2
 8005e18:	4413      	add	r3, r2
 8005e1a:	881b      	ldrh	r3, [r3, #0]
 8005e1c:	b29b      	uxth	r3, r3
 8005e1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e26:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005e28:	687a      	ldr	r2, [r7, #4]
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	781b      	ldrb	r3, [r3, #0]
 8005e2e:	009b      	lsls	r3, r3, #2
 8005e30:	441a      	add	r2, r3
 8005e32:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005e34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e3c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005e40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e44:	b29b      	uxth	r3, r3
 8005e46:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005e48:	687a      	ldr	r2, [r7, #4]
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	781b      	ldrb	r3, [r3, #0]
 8005e4e:	009b      	lsls	r3, r3, #2
 8005e50:	4413      	add	r3, r2
 8005e52:	881b      	ldrh	r3, [r3, #0]
 8005e54:	b29b      	uxth	r3, r3
 8005e56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e5e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005e60:	687a      	ldr	r2, [r7, #4]
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	781b      	ldrb	r3, [r3, #0]
 8005e66:	009b      	lsls	r3, r3, #2
 8005e68:	441a      	add	r2, r3
 8005e6a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005e6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e7c:	b29b      	uxth	r3, r3
 8005e7e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005e80:	687a      	ldr	r2, [r7, #4]
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	781b      	ldrb	r3, [r3, #0]
 8005e86:	009b      	lsls	r3, r3, #2
 8005e88:	4413      	add	r3, r2
 8005e8a:	881b      	ldrh	r3, [r3, #0]
 8005e8c:	b29b      	uxth	r3, r3
 8005e8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e96:	847b      	strh	r3, [r7, #34]	; 0x22
 8005e98:	687a      	ldr	r2, [r7, #4]
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	781b      	ldrb	r3, [r3, #0]
 8005e9e:	009b      	lsls	r3, r3, #2
 8005ea0:	441a      	add	r2, r3
 8005ea2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005ea4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ea8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005eac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005eb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005eb4:	b29b      	uxth	r3, r3
 8005eb6:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005eb8:	2300      	movs	r3, #0
}
 8005eba:	4618      	mov	r0, r3
 8005ebc:	3734      	adds	r7, #52	; 0x34
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bc80      	pop	{r7}
 8005ec2:	4770      	bx	lr

08005ec4 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b0c2      	sub	sp, #264	; 0x108
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ece:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ed2:	6018      	str	r0, [r3, #0]
 8005ed4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ed8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005edc:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005ede:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ee2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	785b      	ldrb	r3, [r3, #1]
 8005eea:	2b01      	cmp	r3, #1
 8005eec:	f040 86b7 	bne.w	8006c5e <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005ef0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ef4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	699a      	ldr	r2, [r3, #24]
 8005efc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	691b      	ldr	r3, [r3, #16]
 8005f08:	429a      	cmp	r2, r3
 8005f0a:	d908      	bls.n	8005f1e <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8005f0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	691b      	ldr	r3, [r3, #16]
 8005f18:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005f1c:	e007      	b.n	8005f2e <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8005f1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	699b      	ldr	r3, [r3, #24]
 8005f2a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005f2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	7b1b      	ldrb	r3, [r3, #12]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d13a      	bne.n	8005fb4 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005f3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	6959      	ldr	r1, [r3, #20]
 8005f4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	88da      	ldrh	r2, [r3, #6]
 8005f56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f5a:	b29b      	uxth	r3, r3
 8005f5c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005f60:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005f64:	6800      	ldr	r0, [r0, #0]
 8005f66:	f001 fc87 	bl	8007878 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005f6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f6e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	613b      	str	r3, [r7, #16]
 8005f76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f7a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f84:	b29b      	uxth	r3, r3
 8005f86:	461a      	mov	r2, r3
 8005f88:	693b      	ldr	r3, [r7, #16]
 8005f8a:	4413      	add	r3, r2
 8005f8c:	613b      	str	r3, [r7, #16]
 8005f8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	781b      	ldrb	r3, [r3, #0]
 8005f9a:	011a      	lsls	r2, r3, #4
 8005f9c:	693b      	ldr	r3, [r7, #16]
 8005f9e:	4413      	add	r3, r2
 8005fa0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005fa4:	60fb      	str	r3, [r7, #12]
 8005fa6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005faa:	b29a      	uxth	r2, r3
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	801a      	strh	r2, [r3, #0]
 8005fb0:	f000 be1f 	b.w	8006bf2 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005fb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fb8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	78db      	ldrb	r3, [r3, #3]
 8005fc0:	2b02      	cmp	r3, #2
 8005fc2:	f040 8462 	bne.w	800688a <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005fc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	6a1a      	ldr	r2, [r3, #32]
 8005fd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fd6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	691b      	ldr	r3, [r3, #16]
 8005fde:	429a      	cmp	r2, r3
 8005fe0:	f240 83df 	bls.w	80067a2 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005fe4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fe8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005fec:	681a      	ldr	r2, [r3, #0]
 8005fee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ff2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	781b      	ldrb	r3, [r3, #0]
 8005ffa:	009b      	lsls	r3, r3, #2
 8005ffc:	4413      	add	r3, r2
 8005ffe:	881b      	ldrh	r3, [r3, #0]
 8006000:	b29b      	uxth	r3, r3
 8006002:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006006:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800600a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800600e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006012:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006016:	681a      	ldr	r2, [r3, #0]
 8006018:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800601c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	781b      	ldrb	r3, [r3, #0]
 8006024:	009b      	lsls	r3, r3, #2
 8006026:	441a      	add	r2, r3
 8006028:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800602c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006030:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006034:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006038:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800603c:	b29b      	uxth	r3, r3
 800603e:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006040:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006044:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	6a1a      	ldr	r2, [r3, #32]
 800604c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006050:	1ad2      	subs	r2, r2, r3
 8006052:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006056:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800605e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006062:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006066:	681a      	ldr	r2, [r3, #0]
 8006068:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800606c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	781b      	ldrb	r3, [r3, #0]
 8006074:	009b      	lsls	r3, r3, #2
 8006076:	4413      	add	r3, r2
 8006078:	881b      	ldrh	r3, [r3, #0]
 800607a:	b29b      	uxth	r3, r3
 800607c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006080:	2b00      	cmp	r3, #0
 8006082:	f000 81c7 	beq.w	8006414 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006086:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800608a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	633b      	str	r3, [r7, #48]	; 0x30
 8006092:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006096:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	785b      	ldrb	r3, [r3, #1]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d177      	bne.n	8006192 <USB_EPStartXfer+0x2ce>
 80060a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80060ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060bc:	b29b      	uxth	r3, r3
 80060be:	461a      	mov	r2, r3
 80060c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060c2:	4413      	add	r3, r2
 80060c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80060c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	781b      	ldrb	r3, [r3, #0]
 80060d2:	011a      	lsls	r2, r3, #4
 80060d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060d6:	4413      	add	r3, r2
 80060d8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80060dc:	627b      	str	r3, [r7, #36]	; 0x24
 80060de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e0:	881b      	ldrh	r3, [r3, #0]
 80060e2:	b29b      	uxth	r3, r3
 80060e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80060e8:	b29a      	uxth	r2, r3
 80060ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ec:	801a      	strh	r2, [r3, #0]
 80060ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060f2:	2b3e      	cmp	r3, #62	; 0x3e
 80060f4:	d921      	bls.n	800613a <USB_EPStartXfer+0x276>
 80060f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060fa:	095b      	lsrs	r3, r3, #5
 80060fc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006100:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006104:	f003 031f 	and.w	r3, r3, #31
 8006108:	2b00      	cmp	r3, #0
 800610a:	d104      	bne.n	8006116 <USB_EPStartXfer+0x252>
 800610c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006110:	3b01      	subs	r3, #1
 8006112:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006118:	881b      	ldrh	r3, [r3, #0]
 800611a:	b29a      	uxth	r2, r3
 800611c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006120:	b29b      	uxth	r3, r3
 8006122:	029b      	lsls	r3, r3, #10
 8006124:	b29b      	uxth	r3, r3
 8006126:	4313      	orrs	r3, r2
 8006128:	b29b      	uxth	r3, r3
 800612a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800612e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006132:	b29a      	uxth	r2, r3
 8006134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006136:	801a      	strh	r2, [r3, #0]
 8006138:	e050      	b.n	80061dc <USB_EPStartXfer+0x318>
 800613a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800613e:	2b00      	cmp	r3, #0
 8006140:	d10a      	bne.n	8006158 <USB_EPStartXfer+0x294>
 8006142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006144:	881b      	ldrh	r3, [r3, #0]
 8006146:	b29b      	uxth	r3, r3
 8006148:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800614c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006150:	b29a      	uxth	r2, r3
 8006152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006154:	801a      	strh	r2, [r3, #0]
 8006156:	e041      	b.n	80061dc <USB_EPStartXfer+0x318>
 8006158:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800615c:	085b      	lsrs	r3, r3, #1
 800615e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006162:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006166:	f003 0301 	and.w	r3, r3, #1
 800616a:	2b00      	cmp	r3, #0
 800616c:	d004      	beq.n	8006178 <USB_EPStartXfer+0x2b4>
 800616e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006172:	3301      	adds	r3, #1
 8006174:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800617a:	881b      	ldrh	r3, [r3, #0]
 800617c:	b29a      	uxth	r2, r3
 800617e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006182:	b29b      	uxth	r3, r3
 8006184:	029b      	lsls	r3, r3, #10
 8006186:	b29b      	uxth	r3, r3
 8006188:	4313      	orrs	r3, r2
 800618a:	b29a      	uxth	r2, r3
 800618c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800618e:	801a      	strh	r2, [r3, #0]
 8006190:	e024      	b.n	80061dc <USB_EPStartXfer+0x318>
 8006192:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006196:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	785b      	ldrb	r3, [r3, #1]
 800619e:	2b01      	cmp	r3, #1
 80061a0:	d11c      	bne.n	80061dc <USB_EPStartXfer+0x318>
 80061a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061b0:	b29b      	uxth	r3, r3
 80061b2:	461a      	mov	r2, r3
 80061b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061b6:	4413      	add	r3, r2
 80061b8:	633b      	str	r3, [r7, #48]	; 0x30
 80061ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	781b      	ldrb	r3, [r3, #0]
 80061c6:	011a      	lsls	r2, r3, #4
 80061c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ca:	4413      	add	r3, r2
 80061cc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80061d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80061d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061d6:	b29a      	uxth	r2, r3
 80061d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061da:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80061dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	895b      	ldrh	r3, [r3, #10]
 80061e8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80061ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	6959      	ldr	r1, [r3, #20]
 80061f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061fc:	b29b      	uxth	r3, r3
 80061fe:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006202:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006206:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800620a:	6800      	ldr	r0, [r0, #0]
 800620c:	f001 fb34 	bl	8007878 <USB_WritePMA>
            ep->xfer_buff += len;
 8006210:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006214:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	695a      	ldr	r2, [r3, #20]
 800621c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006220:	441a      	add	r2, r3
 8006222:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006226:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800622e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006232:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	6a1a      	ldr	r2, [r3, #32]
 800623a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800623e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	691b      	ldr	r3, [r3, #16]
 8006246:	429a      	cmp	r2, r3
 8006248:	d90f      	bls.n	800626a <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800624a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800624e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	6a1a      	ldr	r2, [r3, #32]
 8006256:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800625a:	1ad2      	subs	r2, r2, r3
 800625c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006260:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	621a      	str	r2, [r3, #32]
 8006268:	e00e      	b.n	8006288 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800626a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800626e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	6a1b      	ldr	r3, [r3, #32]
 8006276:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800627a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800627e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	2200      	movs	r2, #0
 8006286:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006288:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800628c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	785b      	ldrb	r3, [r3, #1]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d177      	bne.n	8006388 <USB_EPStartXfer+0x4c4>
 8006298:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800629c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	61bb      	str	r3, [r7, #24]
 80062a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062a8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062b2:	b29b      	uxth	r3, r3
 80062b4:	461a      	mov	r2, r3
 80062b6:	69bb      	ldr	r3, [r7, #24]
 80062b8:	4413      	add	r3, r2
 80062ba:	61bb      	str	r3, [r7, #24]
 80062bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	781b      	ldrb	r3, [r3, #0]
 80062c8:	011a      	lsls	r2, r3, #4
 80062ca:	69bb      	ldr	r3, [r7, #24]
 80062cc:	4413      	add	r3, r2
 80062ce:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80062d2:	617b      	str	r3, [r7, #20]
 80062d4:	697b      	ldr	r3, [r7, #20]
 80062d6:	881b      	ldrh	r3, [r3, #0]
 80062d8:	b29b      	uxth	r3, r3
 80062da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80062de:	b29a      	uxth	r2, r3
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	801a      	strh	r2, [r3, #0]
 80062e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062e8:	2b3e      	cmp	r3, #62	; 0x3e
 80062ea:	d921      	bls.n	8006330 <USB_EPStartXfer+0x46c>
 80062ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062f0:	095b      	lsrs	r3, r3, #5
 80062f2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80062f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062fa:	f003 031f 	and.w	r3, r3, #31
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d104      	bne.n	800630c <USB_EPStartXfer+0x448>
 8006302:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006306:	3b01      	subs	r3, #1
 8006308:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800630c:	697b      	ldr	r3, [r7, #20]
 800630e:	881b      	ldrh	r3, [r3, #0]
 8006310:	b29a      	uxth	r2, r3
 8006312:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006316:	b29b      	uxth	r3, r3
 8006318:	029b      	lsls	r3, r3, #10
 800631a:	b29b      	uxth	r3, r3
 800631c:	4313      	orrs	r3, r2
 800631e:	b29b      	uxth	r3, r3
 8006320:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006324:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006328:	b29a      	uxth	r2, r3
 800632a:	697b      	ldr	r3, [r7, #20]
 800632c:	801a      	strh	r2, [r3, #0]
 800632e:	e056      	b.n	80063de <USB_EPStartXfer+0x51a>
 8006330:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006334:	2b00      	cmp	r3, #0
 8006336:	d10a      	bne.n	800634e <USB_EPStartXfer+0x48a>
 8006338:	697b      	ldr	r3, [r7, #20]
 800633a:	881b      	ldrh	r3, [r3, #0]
 800633c:	b29b      	uxth	r3, r3
 800633e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006342:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006346:	b29a      	uxth	r2, r3
 8006348:	697b      	ldr	r3, [r7, #20]
 800634a:	801a      	strh	r2, [r3, #0]
 800634c:	e047      	b.n	80063de <USB_EPStartXfer+0x51a>
 800634e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006352:	085b      	lsrs	r3, r3, #1
 8006354:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006358:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800635c:	f003 0301 	and.w	r3, r3, #1
 8006360:	2b00      	cmp	r3, #0
 8006362:	d004      	beq.n	800636e <USB_EPStartXfer+0x4aa>
 8006364:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006368:	3301      	adds	r3, #1
 800636a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800636e:	697b      	ldr	r3, [r7, #20]
 8006370:	881b      	ldrh	r3, [r3, #0]
 8006372:	b29a      	uxth	r2, r3
 8006374:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006378:	b29b      	uxth	r3, r3
 800637a:	029b      	lsls	r3, r3, #10
 800637c:	b29b      	uxth	r3, r3
 800637e:	4313      	orrs	r3, r2
 8006380:	b29a      	uxth	r2, r3
 8006382:	697b      	ldr	r3, [r7, #20]
 8006384:	801a      	strh	r2, [r3, #0]
 8006386:	e02a      	b.n	80063de <USB_EPStartXfer+0x51a>
 8006388:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800638c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	785b      	ldrb	r3, [r3, #1]
 8006394:	2b01      	cmp	r3, #1
 8006396:	d122      	bne.n	80063de <USB_EPStartXfer+0x51a>
 8006398:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800639c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	623b      	str	r3, [r7, #32]
 80063a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063a8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063b2:	b29b      	uxth	r3, r3
 80063b4:	461a      	mov	r2, r3
 80063b6:	6a3b      	ldr	r3, [r7, #32]
 80063b8:	4413      	add	r3, r2
 80063ba:	623b      	str	r3, [r7, #32]
 80063bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	781b      	ldrb	r3, [r3, #0]
 80063c8:	011a      	lsls	r2, r3, #4
 80063ca:	6a3b      	ldr	r3, [r7, #32]
 80063cc:	4413      	add	r3, r2
 80063ce:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80063d2:	61fb      	str	r3, [r7, #28]
 80063d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063d8:	b29a      	uxth	r2, r3
 80063da:	69fb      	ldr	r3, [r7, #28]
 80063dc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80063de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	891b      	ldrh	r3, [r3, #8]
 80063ea:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80063ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	6959      	ldr	r1, [r3, #20]
 80063fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063fe:	b29b      	uxth	r3, r3
 8006400:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006404:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006408:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800640c:	6800      	ldr	r0, [r0, #0]
 800640e:	f001 fa33 	bl	8007878 <USB_WritePMA>
 8006412:	e3ee      	b.n	8006bf2 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006414:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006418:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	785b      	ldrb	r3, [r3, #1]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d177      	bne.n	8006514 <USB_EPStartXfer+0x650>
 8006424:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006428:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006430:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006434:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800643e:	b29b      	uxth	r3, r3
 8006440:	461a      	mov	r2, r3
 8006442:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006444:	4413      	add	r3, r2
 8006446:	64bb      	str	r3, [r7, #72]	; 0x48
 8006448:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800644c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	781b      	ldrb	r3, [r3, #0]
 8006454:	011a      	lsls	r2, r3, #4
 8006456:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006458:	4413      	add	r3, r2
 800645a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800645e:	647b      	str	r3, [r7, #68]	; 0x44
 8006460:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006462:	881b      	ldrh	r3, [r3, #0]
 8006464:	b29b      	uxth	r3, r3
 8006466:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800646a:	b29a      	uxth	r2, r3
 800646c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800646e:	801a      	strh	r2, [r3, #0]
 8006470:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006474:	2b3e      	cmp	r3, #62	; 0x3e
 8006476:	d921      	bls.n	80064bc <USB_EPStartXfer+0x5f8>
 8006478:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800647c:	095b      	lsrs	r3, r3, #5
 800647e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006482:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006486:	f003 031f 	and.w	r3, r3, #31
 800648a:	2b00      	cmp	r3, #0
 800648c:	d104      	bne.n	8006498 <USB_EPStartXfer+0x5d4>
 800648e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006492:	3b01      	subs	r3, #1
 8006494:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006498:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800649a:	881b      	ldrh	r3, [r3, #0]
 800649c:	b29a      	uxth	r2, r3
 800649e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80064a2:	b29b      	uxth	r3, r3
 80064a4:	029b      	lsls	r3, r3, #10
 80064a6:	b29b      	uxth	r3, r3
 80064a8:	4313      	orrs	r3, r2
 80064aa:	b29b      	uxth	r3, r3
 80064ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064b4:	b29a      	uxth	r2, r3
 80064b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80064b8:	801a      	strh	r2, [r3, #0]
 80064ba:	e056      	b.n	800656a <USB_EPStartXfer+0x6a6>
 80064bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d10a      	bne.n	80064da <USB_EPStartXfer+0x616>
 80064c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80064c6:	881b      	ldrh	r3, [r3, #0]
 80064c8:	b29b      	uxth	r3, r3
 80064ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064d2:	b29a      	uxth	r2, r3
 80064d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80064d6:	801a      	strh	r2, [r3, #0]
 80064d8:	e047      	b.n	800656a <USB_EPStartXfer+0x6a6>
 80064da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064de:	085b      	lsrs	r3, r3, #1
 80064e0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80064e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064e8:	f003 0301 	and.w	r3, r3, #1
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d004      	beq.n	80064fa <USB_EPStartXfer+0x636>
 80064f0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80064f4:	3301      	adds	r3, #1
 80064f6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80064fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80064fc:	881b      	ldrh	r3, [r3, #0]
 80064fe:	b29a      	uxth	r2, r3
 8006500:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006504:	b29b      	uxth	r3, r3
 8006506:	029b      	lsls	r3, r3, #10
 8006508:	b29b      	uxth	r3, r3
 800650a:	4313      	orrs	r3, r2
 800650c:	b29a      	uxth	r2, r3
 800650e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006510:	801a      	strh	r2, [r3, #0]
 8006512:	e02a      	b.n	800656a <USB_EPStartXfer+0x6a6>
 8006514:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006518:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	785b      	ldrb	r3, [r3, #1]
 8006520:	2b01      	cmp	r3, #1
 8006522:	d122      	bne.n	800656a <USB_EPStartXfer+0x6a6>
 8006524:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006528:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	653b      	str	r3, [r7, #80]	; 0x50
 8006530:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006534:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800653e:	b29b      	uxth	r3, r3
 8006540:	461a      	mov	r2, r3
 8006542:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006544:	4413      	add	r3, r2
 8006546:	653b      	str	r3, [r7, #80]	; 0x50
 8006548:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800654c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	781b      	ldrb	r3, [r3, #0]
 8006554:	011a      	lsls	r2, r3, #4
 8006556:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006558:	4413      	add	r3, r2
 800655a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800655e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006560:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006564:	b29a      	uxth	r2, r3
 8006566:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006568:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800656a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800656e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	891b      	ldrh	r3, [r3, #8]
 8006576:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800657a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800657e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	6959      	ldr	r1, [r3, #20]
 8006586:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800658a:	b29b      	uxth	r3, r3
 800658c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006590:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006594:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006598:	6800      	ldr	r0, [r0, #0]
 800659a:	f001 f96d 	bl	8007878 <USB_WritePMA>
            ep->xfer_buff += len;
 800659e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	695a      	ldr	r2, [r3, #20]
 80065aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065ae:	441a      	add	r2, r3
 80065b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80065bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	6a1a      	ldr	r2, [r3, #32]
 80065c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	691b      	ldr	r3, [r3, #16]
 80065d4:	429a      	cmp	r2, r3
 80065d6:	d90f      	bls.n	80065f8 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 80065d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	6a1a      	ldr	r2, [r3, #32]
 80065e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065e8:	1ad2      	subs	r2, r2, r3
 80065ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	621a      	str	r2, [r3, #32]
 80065f6:	e00e      	b.n	8006616 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 80065f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	6a1b      	ldr	r3, [r3, #32]
 8006604:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8006608:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800660c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	2200      	movs	r2, #0
 8006614:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006616:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800661a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	643b      	str	r3, [r7, #64]	; 0x40
 8006622:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006626:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	785b      	ldrb	r3, [r3, #1]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d177      	bne.n	8006722 <USB_EPStartXfer+0x85e>
 8006632:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006636:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	63bb      	str	r3, [r7, #56]	; 0x38
 800663e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006642:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800664c:	b29b      	uxth	r3, r3
 800664e:	461a      	mov	r2, r3
 8006650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006652:	4413      	add	r3, r2
 8006654:	63bb      	str	r3, [r7, #56]	; 0x38
 8006656:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800665a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	781b      	ldrb	r3, [r3, #0]
 8006662:	011a      	lsls	r2, r3, #4
 8006664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006666:	4413      	add	r3, r2
 8006668:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800666c:	637b      	str	r3, [r7, #52]	; 0x34
 800666e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006670:	881b      	ldrh	r3, [r3, #0]
 8006672:	b29b      	uxth	r3, r3
 8006674:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006678:	b29a      	uxth	r2, r3
 800667a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800667c:	801a      	strh	r2, [r3, #0]
 800667e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006682:	2b3e      	cmp	r3, #62	; 0x3e
 8006684:	d921      	bls.n	80066ca <USB_EPStartXfer+0x806>
 8006686:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800668a:	095b      	lsrs	r3, r3, #5
 800668c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006690:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006694:	f003 031f 	and.w	r3, r3, #31
 8006698:	2b00      	cmp	r3, #0
 800669a:	d104      	bne.n	80066a6 <USB_EPStartXfer+0x7e2>
 800669c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066a0:	3b01      	subs	r3, #1
 80066a2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80066a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066a8:	881b      	ldrh	r3, [r3, #0]
 80066aa:	b29a      	uxth	r2, r3
 80066ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066b0:	b29b      	uxth	r3, r3
 80066b2:	029b      	lsls	r3, r3, #10
 80066b4:	b29b      	uxth	r3, r3
 80066b6:	4313      	orrs	r3, r2
 80066b8:	b29b      	uxth	r3, r3
 80066ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066c2:	b29a      	uxth	r2, r3
 80066c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066c6:	801a      	strh	r2, [r3, #0]
 80066c8:	e050      	b.n	800676c <USB_EPStartXfer+0x8a8>
 80066ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d10a      	bne.n	80066e8 <USB_EPStartXfer+0x824>
 80066d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066d4:	881b      	ldrh	r3, [r3, #0]
 80066d6:	b29b      	uxth	r3, r3
 80066d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066e0:	b29a      	uxth	r2, r3
 80066e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066e4:	801a      	strh	r2, [r3, #0]
 80066e6:	e041      	b.n	800676c <USB_EPStartXfer+0x8a8>
 80066e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066ec:	085b      	lsrs	r3, r3, #1
 80066ee:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80066f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066f6:	f003 0301 	and.w	r3, r3, #1
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d004      	beq.n	8006708 <USB_EPStartXfer+0x844>
 80066fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006702:	3301      	adds	r3, #1
 8006704:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006708:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800670a:	881b      	ldrh	r3, [r3, #0]
 800670c:	b29a      	uxth	r2, r3
 800670e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006712:	b29b      	uxth	r3, r3
 8006714:	029b      	lsls	r3, r3, #10
 8006716:	b29b      	uxth	r3, r3
 8006718:	4313      	orrs	r3, r2
 800671a:	b29a      	uxth	r2, r3
 800671c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800671e:	801a      	strh	r2, [r3, #0]
 8006720:	e024      	b.n	800676c <USB_EPStartXfer+0x8a8>
 8006722:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006726:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	785b      	ldrb	r3, [r3, #1]
 800672e:	2b01      	cmp	r3, #1
 8006730:	d11c      	bne.n	800676c <USB_EPStartXfer+0x8a8>
 8006732:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006736:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006740:	b29b      	uxth	r3, r3
 8006742:	461a      	mov	r2, r3
 8006744:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006746:	4413      	add	r3, r2
 8006748:	643b      	str	r3, [r7, #64]	; 0x40
 800674a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800674e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	781b      	ldrb	r3, [r3, #0]
 8006756:	011a      	lsls	r2, r3, #4
 8006758:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800675a:	4413      	add	r3, r2
 800675c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006760:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006762:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006766:	b29a      	uxth	r2, r3
 8006768:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800676a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800676c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006770:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	895b      	ldrh	r3, [r3, #10]
 8006778:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800677c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006780:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	6959      	ldr	r1, [r3, #20]
 8006788:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800678c:	b29b      	uxth	r3, r3
 800678e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006792:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006796:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800679a:	6800      	ldr	r0, [r0, #0]
 800679c:	f001 f86c 	bl	8007878 <USB_WritePMA>
 80067a0:	e227      	b.n	8006bf2 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80067a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	6a1b      	ldr	r3, [r3, #32]
 80067ae:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80067b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80067ba:	681a      	ldr	r2, [r3, #0]
 80067bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	781b      	ldrb	r3, [r3, #0]
 80067c8:	009b      	lsls	r3, r3, #2
 80067ca:	4413      	add	r3, r2
 80067cc:	881b      	ldrh	r3, [r3, #0]
 80067ce:	b29b      	uxth	r3, r3
 80067d0:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80067d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067d8:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80067dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80067e4:	681a      	ldr	r2, [r3, #0]
 80067e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	781b      	ldrb	r3, [r3, #0]
 80067f2:	009b      	lsls	r3, r3, #2
 80067f4:	441a      	add	r2, r3
 80067f6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80067fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006802:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006806:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800680a:	b29b      	uxth	r3, r3
 800680c:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800680e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006812:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	65fb      	str	r3, [r7, #92]	; 0x5c
 800681a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800681e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006828:	b29b      	uxth	r3, r3
 800682a:	461a      	mov	r2, r3
 800682c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800682e:	4413      	add	r3, r2
 8006830:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006832:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006836:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	781b      	ldrb	r3, [r3, #0]
 800683e:	011a      	lsls	r2, r3, #4
 8006840:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006842:	4413      	add	r3, r2
 8006844:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006848:	65bb      	str	r3, [r7, #88]	; 0x58
 800684a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800684e:	b29a      	uxth	r2, r3
 8006850:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006852:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006854:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006858:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	891b      	ldrh	r3, [r3, #8]
 8006860:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006864:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006868:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	6959      	ldr	r1, [r3, #20]
 8006870:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006874:	b29b      	uxth	r3, r3
 8006876:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800687a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800687e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006882:	6800      	ldr	r0, [r0, #0]
 8006884:	f000 fff8 	bl	8007878 <USB_WritePMA>
 8006888:	e1b3      	b.n	8006bf2 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800688a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800688e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	6a1a      	ldr	r2, [r3, #32]
 8006896:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800689a:	1ad2      	subs	r2, r2, r3
 800689c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80068a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80068b0:	681a      	ldr	r2, [r3, #0]
 80068b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	781b      	ldrb	r3, [r3, #0]
 80068be:	009b      	lsls	r3, r3, #2
 80068c0:	4413      	add	r3, r2
 80068c2:	881b      	ldrh	r3, [r3, #0]
 80068c4:	b29b      	uxth	r3, r3
 80068c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	f000 80c6 	beq.w	8006a5c <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80068d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068d4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	673b      	str	r3, [r7, #112]	; 0x70
 80068dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	785b      	ldrb	r3, [r3, #1]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d177      	bne.n	80069dc <USB_EPStartXfer+0xb18>
 80068ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068f0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	66bb      	str	r3, [r7, #104]	; 0x68
 80068f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006906:	b29b      	uxth	r3, r3
 8006908:	461a      	mov	r2, r3
 800690a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800690c:	4413      	add	r3, r2
 800690e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006910:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006914:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	781b      	ldrb	r3, [r3, #0]
 800691c:	011a      	lsls	r2, r3, #4
 800691e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006920:	4413      	add	r3, r2
 8006922:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006926:	667b      	str	r3, [r7, #100]	; 0x64
 8006928:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800692a:	881b      	ldrh	r3, [r3, #0]
 800692c:	b29b      	uxth	r3, r3
 800692e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006932:	b29a      	uxth	r2, r3
 8006934:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006936:	801a      	strh	r2, [r3, #0]
 8006938:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800693c:	2b3e      	cmp	r3, #62	; 0x3e
 800693e:	d921      	bls.n	8006984 <USB_EPStartXfer+0xac0>
 8006940:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006944:	095b      	lsrs	r3, r3, #5
 8006946:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800694a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800694e:	f003 031f 	and.w	r3, r3, #31
 8006952:	2b00      	cmp	r3, #0
 8006954:	d104      	bne.n	8006960 <USB_EPStartXfer+0xa9c>
 8006956:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800695a:	3b01      	subs	r3, #1
 800695c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006960:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006962:	881b      	ldrh	r3, [r3, #0]
 8006964:	b29a      	uxth	r2, r3
 8006966:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800696a:	b29b      	uxth	r3, r3
 800696c:	029b      	lsls	r3, r3, #10
 800696e:	b29b      	uxth	r3, r3
 8006970:	4313      	orrs	r3, r2
 8006972:	b29b      	uxth	r3, r3
 8006974:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006978:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800697c:	b29a      	uxth	r2, r3
 800697e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006980:	801a      	strh	r2, [r3, #0]
 8006982:	e050      	b.n	8006a26 <USB_EPStartXfer+0xb62>
 8006984:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006988:	2b00      	cmp	r3, #0
 800698a:	d10a      	bne.n	80069a2 <USB_EPStartXfer+0xade>
 800698c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800698e:	881b      	ldrh	r3, [r3, #0]
 8006990:	b29b      	uxth	r3, r3
 8006992:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006996:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800699a:	b29a      	uxth	r2, r3
 800699c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800699e:	801a      	strh	r2, [r3, #0]
 80069a0:	e041      	b.n	8006a26 <USB_EPStartXfer+0xb62>
 80069a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069a6:	085b      	lsrs	r3, r3, #1
 80069a8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80069ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069b0:	f003 0301 	and.w	r3, r3, #1
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d004      	beq.n	80069c2 <USB_EPStartXfer+0xafe>
 80069b8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80069bc:	3301      	adds	r3, #1
 80069be:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80069c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80069c4:	881b      	ldrh	r3, [r3, #0]
 80069c6:	b29a      	uxth	r2, r3
 80069c8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80069cc:	b29b      	uxth	r3, r3
 80069ce:	029b      	lsls	r3, r3, #10
 80069d0:	b29b      	uxth	r3, r3
 80069d2:	4313      	orrs	r3, r2
 80069d4:	b29a      	uxth	r2, r3
 80069d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80069d8:	801a      	strh	r2, [r3, #0]
 80069da:	e024      	b.n	8006a26 <USB_EPStartXfer+0xb62>
 80069dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	785b      	ldrb	r3, [r3, #1]
 80069e8:	2b01      	cmp	r3, #1
 80069ea:	d11c      	bne.n	8006a26 <USB_EPStartXfer+0xb62>
 80069ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069f0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069fa:	b29b      	uxth	r3, r3
 80069fc:	461a      	mov	r2, r3
 80069fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006a00:	4413      	add	r3, r2
 8006a02:	673b      	str	r3, [r7, #112]	; 0x70
 8006a04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	781b      	ldrb	r3, [r3, #0]
 8006a10:	011a      	lsls	r2, r3, #4
 8006a12:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006a14:	4413      	add	r3, r2
 8006a16:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006a1a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006a1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a20:	b29a      	uxth	r2, r3
 8006a22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a24:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006a26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	895b      	ldrh	r3, [r3, #10]
 8006a32:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006a36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	6959      	ldr	r1, [r3, #20]
 8006a42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a46:	b29b      	uxth	r3, r3
 8006a48:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006a4c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006a50:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006a54:	6800      	ldr	r0, [r0, #0]
 8006a56:	f000 ff0f 	bl	8007878 <USB_WritePMA>
 8006a5a:	e0ca      	b.n	8006bf2 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006a5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	785b      	ldrb	r3, [r3, #1]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d177      	bne.n	8006b5c <USB_EPStartXfer+0xc98>
 8006a6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a70:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006a78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a7c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a86:	b29b      	uxth	r3, r3
 8006a88:	461a      	mov	r2, r3
 8006a8a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006a8c:	4413      	add	r3, r2
 8006a8e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006a90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	781b      	ldrb	r3, [r3, #0]
 8006a9c:	011a      	lsls	r2, r3, #4
 8006a9e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006aa0:	4413      	add	r3, r2
 8006aa2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006aa6:	67bb      	str	r3, [r7, #120]	; 0x78
 8006aa8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006aaa:	881b      	ldrh	r3, [r3, #0]
 8006aac:	b29b      	uxth	r3, r3
 8006aae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006ab2:	b29a      	uxth	r2, r3
 8006ab4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ab6:	801a      	strh	r2, [r3, #0]
 8006ab8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006abc:	2b3e      	cmp	r3, #62	; 0x3e
 8006abe:	d921      	bls.n	8006b04 <USB_EPStartXfer+0xc40>
 8006ac0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ac4:	095b      	lsrs	r3, r3, #5
 8006ac6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006aca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ace:	f003 031f 	and.w	r3, r3, #31
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d104      	bne.n	8006ae0 <USB_EPStartXfer+0xc1c>
 8006ad6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006ada:	3b01      	subs	r3, #1
 8006adc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006ae0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ae2:	881b      	ldrh	r3, [r3, #0]
 8006ae4:	b29a      	uxth	r2, r3
 8006ae6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006aea:	b29b      	uxth	r3, r3
 8006aec:	029b      	lsls	r3, r3, #10
 8006aee:	b29b      	uxth	r3, r3
 8006af0:	4313      	orrs	r3, r2
 8006af2:	b29b      	uxth	r3, r3
 8006af4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006af8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006afc:	b29a      	uxth	r2, r3
 8006afe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b00:	801a      	strh	r2, [r3, #0]
 8006b02:	e05c      	b.n	8006bbe <USB_EPStartXfer+0xcfa>
 8006b04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d10a      	bne.n	8006b22 <USB_EPStartXfer+0xc5e>
 8006b0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b0e:	881b      	ldrh	r3, [r3, #0]
 8006b10:	b29b      	uxth	r3, r3
 8006b12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b1a:	b29a      	uxth	r2, r3
 8006b1c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b1e:	801a      	strh	r2, [r3, #0]
 8006b20:	e04d      	b.n	8006bbe <USB_EPStartXfer+0xcfa>
 8006b22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b26:	085b      	lsrs	r3, r3, #1
 8006b28:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006b2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b30:	f003 0301 	and.w	r3, r3, #1
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d004      	beq.n	8006b42 <USB_EPStartXfer+0xc7e>
 8006b38:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006b3c:	3301      	adds	r3, #1
 8006b3e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006b42:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b44:	881b      	ldrh	r3, [r3, #0]
 8006b46:	b29a      	uxth	r2, r3
 8006b48:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006b4c:	b29b      	uxth	r3, r3
 8006b4e:	029b      	lsls	r3, r3, #10
 8006b50:	b29b      	uxth	r3, r3
 8006b52:	4313      	orrs	r3, r2
 8006b54:	b29a      	uxth	r2, r3
 8006b56:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b58:	801a      	strh	r2, [r3, #0]
 8006b5a:	e030      	b.n	8006bbe <USB_EPStartXfer+0xcfa>
 8006b5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	785b      	ldrb	r3, [r3, #1]
 8006b68:	2b01      	cmp	r3, #1
 8006b6a:	d128      	bne.n	8006bbe <USB_EPStartXfer+0xcfa>
 8006b6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b70:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006b7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b7e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b88:	b29b      	uxth	r3, r3
 8006b8a:	461a      	mov	r2, r3
 8006b8c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006b90:	4413      	add	r3, r2
 8006b92:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006b96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	781b      	ldrb	r3, [r3, #0]
 8006ba2:	011a      	lsls	r2, r3, #4
 8006ba4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006ba8:	4413      	add	r3, r2
 8006baa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006bae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006bb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bb6:	b29a      	uxth	r2, r3
 8006bb8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006bbc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006bbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bc2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	891b      	ldrh	r3, [r3, #8]
 8006bca:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006bce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bd2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	6959      	ldr	r1, [r3, #20]
 8006bda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bde:	b29b      	uxth	r3, r3
 8006be0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006be4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006be8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006bec:	6800      	ldr	r0, [r0, #0]
 8006bee:	f000 fe43 	bl	8007878 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006bf2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bf6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006bfa:	681a      	ldr	r2, [r3, #0]
 8006bfc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	781b      	ldrb	r3, [r3, #0]
 8006c08:	009b      	lsls	r3, r3, #2
 8006c0a:	4413      	add	r3, r2
 8006c0c:	881b      	ldrh	r3, [r3, #0]
 8006c0e:	b29b      	uxth	r3, r3
 8006c10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c18:	817b      	strh	r3, [r7, #10]
 8006c1a:	897b      	ldrh	r3, [r7, #10]
 8006c1c:	f083 0310 	eor.w	r3, r3, #16
 8006c20:	817b      	strh	r3, [r7, #10]
 8006c22:	897b      	ldrh	r3, [r7, #10]
 8006c24:	f083 0320 	eor.w	r3, r3, #32
 8006c28:	817b      	strh	r3, [r7, #10]
 8006c2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c2e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c32:	681a      	ldr	r2, [r3, #0]
 8006c34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	781b      	ldrb	r3, [r3, #0]
 8006c40:	009b      	lsls	r3, r3, #2
 8006c42:	441a      	add	r2, r3
 8006c44:	897b      	ldrh	r3, [r7, #10]
 8006c46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c56:	b29b      	uxth	r3, r3
 8006c58:	8013      	strh	r3, [r2, #0]
 8006c5a:	f000 bcde 	b.w	800761a <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006c5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	7b1b      	ldrb	r3, [r3, #12]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	f040 80bb 	bne.w	8006de6 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006c70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	699a      	ldr	r2, [r3, #24]
 8006c7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	691b      	ldr	r3, [r3, #16]
 8006c88:	429a      	cmp	r2, r3
 8006c8a:	d917      	bls.n	8006cbc <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8006c8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	691b      	ldr	r3, [r3, #16]
 8006c98:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8006c9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ca0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	699a      	ldr	r2, [r3, #24]
 8006ca8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cac:	1ad2      	subs	r2, r2, r3
 8006cae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cb2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	619a      	str	r2, [r3, #24]
 8006cba:	e00e      	b.n	8006cda <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8006cbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cc0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	699b      	ldr	r3, [r3, #24]
 8006cc8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8006ccc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cd0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006cda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cde:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006ce8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006cf6:	b29b      	uxth	r3, r3
 8006cf8:	461a      	mov	r2, r3
 8006cfa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006cfe:	4413      	add	r3, r2
 8006d00:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006d04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	781b      	ldrb	r3, [r3, #0]
 8006d10:	011a      	lsls	r2, r3, #4
 8006d12:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006d16:	4413      	add	r3, r2
 8006d18:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006d1c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006d20:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006d24:	881b      	ldrh	r3, [r3, #0]
 8006d26:	b29b      	uxth	r3, r3
 8006d28:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006d2c:	b29a      	uxth	r2, r3
 8006d2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006d32:	801a      	strh	r2, [r3, #0]
 8006d34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d38:	2b3e      	cmp	r3, #62	; 0x3e
 8006d3a:	d924      	bls.n	8006d86 <USB_EPStartXfer+0xec2>
 8006d3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d40:	095b      	lsrs	r3, r3, #5
 8006d42:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006d46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d4a:	f003 031f 	and.w	r3, r3, #31
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d104      	bne.n	8006d5c <USB_EPStartXfer+0xe98>
 8006d52:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006d56:	3b01      	subs	r3, #1
 8006d58:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006d5c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006d60:	881b      	ldrh	r3, [r3, #0]
 8006d62:	b29a      	uxth	r2, r3
 8006d64:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006d68:	b29b      	uxth	r3, r3
 8006d6a:	029b      	lsls	r3, r3, #10
 8006d6c:	b29b      	uxth	r3, r3
 8006d6e:	4313      	orrs	r3, r2
 8006d70:	b29b      	uxth	r3, r3
 8006d72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d7a:	b29a      	uxth	r2, r3
 8006d7c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006d80:	801a      	strh	r2, [r3, #0]
 8006d82:	f000 bc10 	b.w	80075a6 <USB_EPStartXfer+0x16e2>
 8006d86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d10c      	bne.n	8006da8 <USB_EPStartXfer+0xee4>
 8006d8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006d92:	881b      	ldrh	r3, [r3, #0]
 8006d94:	b29b      	uxth	r3, r3
 8006d96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d9e:	b29a      	uxth	r2, r3
 8006da0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006da4:	801a      	strh	r2, [r3, #0]
 8006da6:	e3fe      	b.n	80075a6 <USB_EPStartXfer+0x16e2>
 8006da8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006dac:	085b      	lsrs	r3, r3, #1
 8006dae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006db2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006db6:	f003 0301 	and.w	r3, r3, #1
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d004      	beq.n	8006dc8 <USB_EPStartXfer+0xf04>
 8006dbe:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006dc2:	3301      	adds	r3, #1
 8006dc4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006dc8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006dcc:	881b      	ldrh	r3, [r3, #0]
 8006dce:	b29a      	uxth	r2, r3
 8006dd0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006dd4:	b29b      	uxth	r3, r3
 8006dd6:	029b      	lsls	r3, r3, #10
 8006dd8:	b29b      	uxth	r3, r3
 8006dda:	4313      	orrs	r3, r2
 8006ddc:	b29a      	uxth	r2, r3
 8006dde:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006de2:	801a      	strh	r2, [r3, #0]
 8006de4:	e3df      	b.n	80075a6 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006de6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	78db      	ldrb	r3, [r3, #3]
 8006df2:	2b02      	cmp	r3, #2
 8006df4:	f040 8218 	bne.w	8007228 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006df8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dfc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	785b      	ldrb	r3, [r3, #1]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	f040 809d 	bne.w	8006f44 <USB_EPStartXfer+0x1080>
 8006e0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e0e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006e18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e1c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e26:	b29b      	uxth	r3, r3
 8006e28:	461a      	mov	r2, r3
 8006e2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006e2e:	4413      	add	r3, r2
 8006e30:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006e34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	781b      	ldrb	r3, [r3, #0]
 8006e40:	011a      	lsls	r2, r3, #4
 8006e42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006e46:	4413      	add	r3, r2
 8006e48:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006e4c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006e50:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006e54:	881b      	ldrh	r3, [r3, #0]
 8006e56:	b29b      	uxth	r3, r3
 8006e58:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006e5c:	b29a      	uxth	r2, r3
 8006e5e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006e62:	801a      	strh	r2, [r3, #0]
 8006e64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	691b      	ldr	r3, [r3, #16]
 8006e70:	2b3e      	cmp	r3, #62	; 0x3e
 8006e72:	d92b      	bls.n	8006ecc <USB_EPStartXfer+0x1008>
 8006e74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	691b      	ldr	r3, [r3, #16]
 8006e80:	095b      	lsrs	r3, r3, #5
 8006e82:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006e86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	691b      	ldr	r3, [r3, #16]
 8006e92:	f003 031f 	and.w	r3, r3, #31
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d104      	bne.n	8006ea4 <USB_EPStartXfer+0xfe0>
 8006e9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e9e:	3b01      	subs	r3, #1
 8006ea0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006ea4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006ea8:	881b      	ldrh	r3, [r3, #0]
 8006eaa:	b29a      	uxth	r2, r3
 8006eac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006eb0:	b29b      	uxth	r3, r3
 8006eb2:	029b      	lsls	r3, r3, #10
 8006eb4:	b29b      	uxth	r3, r3
 8006eb6:	4313      	orrs	r3, r2
 8006eb8:	b29b      	uxth	r3, r3
 8006eba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ebe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ec2:	b29a      	uxth	r2, r3
 8006ec4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006ec8:	801a      	strh	r2, [r3, #0]
 8006eca:	e070      	b.n	8006fae <USB_EPStartXfer+0x10ea>
 8006ecc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ed0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	691b      	ldr	r3, [r3, #16]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d10c      	bne.n	8006ef6 <USB_EPStartXfer+0x1032>
 8006edc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006ee0:	881b      	ldrh	r3, [r3, #0]
 8006ee2:	b29b      	uxth	r3, r3
 8006ee4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ee8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006eec:	b29a      	uxth	r2, r3
 8006eee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006ef2:	801a      	strh	r2, [r3, #0]
 8006ef4:	e05b      	b.n	8006fae <USB_EPStartXfer+0x10ea>
 8006ef6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006efa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	691b      	ldr	r3, [r3, #16]
 8006f02:	085b      	lsrs	r3, r3, #1
 8006f04:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006f08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	691b      	ldr	r3, [r3, #16]
 8006f14:	f003 0301 	and.w	r3, r3, #1
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d004      	beq.n	8006f26 <USB_EPStartXfer+0x1062>
 8006f1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f20:	3301      	adds	r3, #1
 8006f22:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006f26:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006f2a:	881b      	ldrh	r3, [r3, #0]
 8006f2c:	b29a      	uxth	r2, r3
 8006f2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f32:	b29b      	uxth	r3, r3
 8006f34:	029b      	lsls	r3, r3, #10
 8006f36:	b29b      	uxth	r3, r3
 8006f38:	4313      	orrs	r3, r2
 8006f3a:	b29a      	uxth	r2, r3
 8006f3c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006f40:	801a      	strh	r2, [r3, #0]
 8006f42:	e034      	b.n	8006fae <USB_EPStartXfer+0x10ea>
 8006f44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	785b      	ldrb	r3, [r3, #1]
 8006f50:	2b01      	cmp	r3, #1
 8006f52:	d12c      	bne.n	8006fae <USB_EPStartXfer+0x10ea>
 8006f54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f58:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006f62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f66:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f70:	b29b      	uxth	r3, r3
 8006f72:	461a      	mov	r2, r3
 8006f74:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006f78:	4413      	add	r3, r2
 8006f7a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006f7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	781b      	ldrb	r3, [r3, #0]
 8006f8a:	011a      	lsls	r2, r3, #4
 8006f8c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006f90:	4413      	add	r3, r2
 8006f92:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006f96:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006f9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	691b      	ldr	r3, [r3, #16]
 8006fa6:	b29a      	uxth	r2, r3
 8006fa8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006fac:	801a      	strh	r2, [r3, #0]
 8006fae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fb2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006fbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fc0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	785b      	ldrb	r3, [r3, #1]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	f040 809d 	bne.w	8007108 <USB_EPStartXfer+0x1244>
 8006fce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fd2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006fdc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fe0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006fea:	b29b      	uxth	r3, r3
 8006fec:	461a      	mov	r2, r3
 8006fee:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006ff2:	4413      	add	r3, r2
 8006ff4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006ff8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ffc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	781b      	ldrb	r3, [r3, #0]
 8007004:	011a      	lsls	r2, r3, #4
 8007006:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800700a:	4413      	add	r3, r2
 800700c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007010:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007014:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007018:	881b      	ldrh	r3, [r3, #0]
 800701a:	b29b      	uxth	r3, r3
 800701c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007020:	b29a      	uxth	r2, r3
 8007022:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007026:	801a      	strh	r2, [r3, #0]
 8007028:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800702c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	691b      	ldr	r3, [r3, #16]
 8007034:	2b3e      	cmp	r3, #62	; 0x3e
 8007036:	d92b      	bls.n	8007090 <USB_EPStartXfer+0x11cc>
 8007038:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800703c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	691b      	ldr	r3, [r3, #16]
 8007044:	095b      	lsrs	r3, r3, #5
 8007046:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800704a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800704e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	691b      	ldr	r3, [r3, #16]
 8007056:	f003 031f 	and.w	r3, r3, #31
 800705a:	2b00      	cmp	r3, #0
 800705c:	d104      	bne.n	8007068 <USB_EPStartXfer+0x11a4>
 800705e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007062:	3b01      	subs	r3, #1
 8007064:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007068:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800706c:	881b      	ldrh	r3, [r3, #0]
 800706e:	b29a      	uxth	r2, r3
 8007070:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007074:	b29b      	uxth	r3, r3
 8007076:	029b      	lsls	r3, r3, #10
 8007078:	b29b      	uxth	r3, r3
 800707a:	4313      	orrs	r3, r2
 800707c:	b29b      	uxth	r3, r3
 800707e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007082:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007086:	b29a      	uxth	r2, r3
 8007088:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800708c:	801a      	strh	r2, [r3, #0]
 800708e:	e069      	b.n	8007164 <USB_EPStartXfer+0x12a0>
 8007090:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007094:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	691b      	ldr	r3, [r3, #16]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d10c      	bne.n	80070ba <USB_EPStartXfer+0x11f6>
 80070a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80070a4:	881b      	ldrh	r3, [r3, #0]
 80070a6:	b29b      	uxth	r3, r3
 80070a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070b0:	b29a      	uxth	r2, r3
 80070b2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80070b6:	801a      	strh	r2, [r3, #0]
 80070b8:	e054      	b.n	8007164 <USB_EPStartXfer+0x12a0>
 80070ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	691b      	ldr	r3, [r3, #16]
 80070c6:	085b      	lsrs	r3, r3, #1
 80070c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80070cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	691b      	ldr	r3, [r3, #16]
 80070d8:	f003 0301 	and.w	r3, r3, #1
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d004      	beq.n	80070ea <USB_EPStartXfer+0x1226>
 80070e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070e4:	3301      	adds	r3, #1
 80070e6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80070ea:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80070ee:	881b      	ldrh	r3, [r3, #0]
 80070f0:	b29a      	uxth	r2, r3
 80070f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070f6:	b29b      	uxth	r3, r3
 80070f8:	029b      	lsls	r3, r3, #10
 80070fa:	b29b      	uxth	r3, r3
 80070fc:	4313      	orrs	r3, r2
 80070fe:	b29a      	uxth	r2, r3
 8007100:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007104:	801a      	strh	r2, [r3, #0]
 8007106:	e02d      	b.n	8007164 <USB_EPStartXfer+0x12a0>
 8007108:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800710c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	785b      	ldrb	r3, [r3, #1]
 8007114:	2b01      	cmp	r3, #1
 8007116:	d125      	bne.n	8007164 <USB_EPStartXfer+0x12a0>
 8007118:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800711c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007126:	b29b      	uxth	r3, r3
 8007128:	461a      	mov	r2, r3
 800712a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800712e:	4413      	add	r3, r2
 8007130:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007134:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007138:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	781b      	ldrb	r3, [r3, #0]
 8007140:	011a      	lsls	r2, r3, #4
 8007142:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007146:	4413      	add	r3, r2
 8007148:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800714c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007150:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007154:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	691b      	ldr	r3, [r3, #16]
 800715c:	b29a      	uxth	r2, r3
 800715e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007162:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007164:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007168:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	69db      	ldr	r3, [r3, #28]
 8007170:	2b00      	cmp	r3, #0
 8007172:	f000 8218 	beq.w	80075a6 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007176:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800717a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800717e:	681a      	ldr	r2, [r3, #0]
 8007180:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007184:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	781b      	ldrb	r3, [r3, #0]
 800718c:	009b      	lsls	r3, r3, #2
 800718e:	4413      	add	r3, r2
 8007190:	881b      	ldrh	r3, [r3, #0]
 8007192:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007196:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800719a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d005      	beq.n	80071ae <USB_EPStartXfer+0x12ea>
 80071a2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80071a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d10d      	bne.n	80071ca <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80071ae:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80071b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	f040 81f5 	bne.w	80075a6 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80071bc:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80071c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	f040 81ee 	bne.w	80075a6 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80071ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80071d2:	681a      	ldr	r2, [r3, #0]
 80071d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	781b      	ldrb	r3, [r3, #0]
 80071e0:	009b      	lsls	r3, r3, #2
 80071e2:	4413      	add	r3, r2
 80071e4:	881b      	ldrh	r3, [r3, #0]
 80071e6:	b29b      	uxth	r3, r3
 80071e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071f0:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 80071f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80071fc:	681a      	ldr	r2, [r3, #0]
 80071fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007202:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	781b      	ldrb	r3, [r3, #0]
 800720a:	009b      	lsls	r3, r3, #2
 800720c:	441a      	add	r2, r3
 800720e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8007212:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007216:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800721a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800721e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007222:	b29b      	uxth	r3, r3
 8007224:	8013      	strh	r3, [r2, #0]
 8007226:	e1be      	b.n	80075a6 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007228:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800722c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	78db      	ldrb	r3, [r3, #3]
 8007234:	2b01      	cmp	r3, #1
 8007236:	f040 81b4 	bne.w	80075a2 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800723a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800723e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	699a      	ldr	r2, [r3, #24]
 8007246:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800724a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	691b      	ldr	r3, [r3, #16]
 8007252:	429a      	cmp	r2, r3
 8007254:	d917      	bls.n	8007286 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8007256:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800725a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	691b      	ldr	r3, [r3, #16]
 8007262:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8007266:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800726a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	699a      	ldr	r2, [r3, #24]
 8007272:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007276:	1ad2      	subs	r2, r2, r3
 8007278:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800727c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	619a      	str	r2, [r3, #24]
 8007284:	e00e      	b.n	80072a4 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8007286:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800728a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	699b      	ldr	r3, [r3, #24]
 8007292:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8007296:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800729a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	2200      	movs	r2, #0
 80072a2:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80072a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	785b      	ldrb	r3, [r3, #1]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	f040 8085 	bne.w	80073c0 <USB_EPStartXfer+0x14fc>
 80072b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80072c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072c8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80072d2:	b29b      	uxth	r3, r3
 80072d4:	461a      	mov	r2, r3
 80072d6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80072da:	4413      	add	r3, r2
 80072dc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80072e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	781b      	ldrb	r3, [r3, #0]
 80072ec:	011a      	lsls	r2, r3, #4
 80072ee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80072f2:	4413      	add	r3, r2
 80072f4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80072f8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80072fc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007300:	881b      	ldrh	r3, [r3, #0]
 8007302:	b29b      	uxth	r3, r3
 8007304:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007308:	b29a      	uxth	r2, r3
 800730a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800730e:	801a      	strh	r2, [r3, #0]
 8007310:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007314:	2b3e      	cmp	r3, #62	; 0x3e
 8007316:	d923      	bls.n	8007360 <USB_EPStartXfer+0x149c>
 8007318:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800731c:	095b      	lsrs	r3, r3, #5
 800731e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007322:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007326:	f003 031f 	and.w	r3, r3, #31
 800732a:	2b00      	cmp	r3, #0
 800732c:	d104      	bne.n	8007338 <USB_EPStartXfer+0x1474>
 800732e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007332:	3b01      	subs	r3, #1
 8007334:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007338:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800733c:	881b      	ldrh	r3, [r3, #0]
 800733e:	b29a      	uxth	r2, r3
 8007340:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007344:	b29b      	uxth	r3, r3
 8007346:	029b      	lsls	r3, r3, #10
 8007348:	b29b      	uxth	r3, r3
 800734a:	4313      	orrs	r3, r2
 800734c:	b29b      	uxth	r3, r3
 800734e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007352:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007356:	b29a      	uxth	r2, r3
 8007358:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800735c:	801a      	strh	r2, [r3, #0]
 800735e:	e060      	b.n	8007422 <USB_EPStartXfer+0x155e>
 8007360:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007364:	2b00      	cmp	r3, #0
 8007366:	d10c      	bne.n	8007382 <USB_EPStartXfer+0x14be>
 8007368:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800736c:	881b      	ldrh	r3, [r3, #0]
 800736e:	b29b      	uxth	r3, r3
 8007370:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007374:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007378:	b29a      	uxth	r2, r3
 800737a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800737e:	801a      	strh	r2, [r3, #0]
 8007380:	e04f      	b.n	8007422 <USB_EPStartXfer+0x155e>
 8007382:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007386:	085b      	lsrs	r3, r3, #1
 8007388:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800738c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007390:	f003 0301 	and.w	r3, r3, #1
 8007394:	2b00      	cmp	r3, #0
 8007396:	d004      	beq.n	80073a2 <USB_EPStartXfer+0x14de>
 8007398:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800739c:	3301      	adds	r3, #1
 800739e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80073a2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80073a6:	881b      	ldrh	r3, [r3, #0]
 80073a8:	b29a      	uxth	r2, r3
 80073aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80073ae:	b29b      	uxth	r3, r3
 80073b0:	029b      	lsls	r3, r3, #10
 80073b2:	b29b      	uxth	r3, r3
 80073b4:	4313      	orrs	r3, r2
 80073b6:	b29a      	uxth	r2, r3
 80073b8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80073bc:	801a      	strh	r2, [r3, #0]
 80073be:	e030      	b.n	8007422 <USB_EPStartXfer+0x155e>
 80073c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	785b      	ldrb	r3, [r3, #1]
 80073cc:	2b01      	cmp	r3, #1
 80073ce:	d128      	bne.n	8007422 <USB_EPStartXfer+0x155e>
 80073d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073d4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80073de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80073ec:	b29b      	uxth	r3, r3
 80073ee:	461a      	mov	r2, r3
 80073f0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80073f4:	4413      	add	r3, r2
 80073f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80073fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	781b      	ldrb	r3, [r3, #0]
 8007406:	011a      	lsls	r2, r3, #4
 8007408:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800740c:	4413      	add	r3, r2
 800740e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007412:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007416:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800741a:	b29a      	uxth	r2, r3
 800741c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007420:	801a      	strh	r2, [r3, #0]
 8007422:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007426:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007430:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007434:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	785b      	ldrb	r3, [r3, #1]
 800743c:	2b00      	cmp	r3, #0
 800743e:	f040 8085 	bne.w	800754c <USB_EPStartXfer+0x1688>
 8007442:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007446:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007450:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007454:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800745e:	b29b      	uxth	r3, r3
 8007460:	461a      	mov	r2, r3
 8007462:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007466:	4413      	add	r3, r2
 8007468:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800746c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007470:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	781b      	ldrb	r3, [r3, #0]
 8007478:	011a      	lsls	r2, r3, #4
 800747a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800747e:	4413      	add	r3, r2
 8007480:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007484:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007488:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800748c:	881b      	ldrh	r3, [r3, #0]
 800748e:	b29b      	uxth	r3, r3
 8007490:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007494:	b29a      	uxth	r2, r3
 8007496:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800749a:	801a      	strh	r2, [r3, #0]
 800749c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074a0:	2b3e      	cmp	r3, #62	; 0x3e
 80074a2:	d923      	bls.n	80074ec <USB_EPStartXfer+0x1628>
 80074a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074a8:	095b      	lsrs	r3, r3, #5
 80074aa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80074ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074b2:	f003 031f 	and.w	r3, r3, #31
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d104      	bne.n	80074c4 <USB_EPStartXfer+0x1600>
 80074ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80074be:	3b01      	subs	r3, #1
 80074c0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80074c4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80074c8:	881b      	ldrh	r3, [r3, #0]
 80074ca:	b29a      	uxth	r2, r3
 80074cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80074d0:	b29b      	uxth	r3, r3
 80074d2:	029b      	lsls	r3, r3, #10
 80074d4:	b29b      	uxth	r3, r3
 80074d6:	4313      	orrs	r3, r2
 80074d8:	b29b      	uxth	r3, r3
 80074da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074e2:	b29a      	uxth	r2, r3
 80074e4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80074e8:	801a      	strh	r2, [r3, #0]
 80074ea:	e05c      	b.n	80075a6 <USB_EPStartXfer+0x16e2>
 80074ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d10c      	bne.n	800750e <USB_EPStartXfer+0x164a>
 80074f4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80074f8:	881b      	ldrh	r3, [r3, #0]
 80074fa:	b29b      	uxth	r3, r3
 80074fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007500:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007504:	b29a      	uxth	r2, r3
 8007506:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800750a:	801a      	strh	r2, [r3, #0]
 800750c:	e04b      	b.n	80075a6 <USB_EPStartXfer+0x16e2>
 800750e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007512:	085b      	lsrs	r3, r3, #1
 8007514:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007518:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800751c:	f003 0301 	and.w	r3, r3, #1
 8007520:	2b00      	cmp	r3, #0
 8007522:	d004      	beq.n	800752e <USB_EPStartXfer+0x166a>
 8007524:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007528:	3301      	adds	r3, #1
 800752a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800752e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007532:	881b      	ldrh	r3, [r3, #0]
 8007534:	b29a      	uxth	r2, r3
 8007536:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800753a:	b29b      	uxth	r3, r3
 800753c:	029b      	lsls	r3, r3, #10
 800753e:	b29b      	uxth	r3, r3
 8007540:	4313      	orrs	r3, r2
 8007542:	b29a      	uxth	r2, r3
 8007544:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007548:	801a      	strh	r2, [r3, #0]
 800754a:	e02c      	b.n	80075a6 <USB_EPStartXfer+0x16e2>
 800754c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007550:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	785b      	ldrb	r3, [r3, #1]
 8007558:	2b01      	cmp	r3, #1
 800755a:	d124      	bne.n	80075a6 <USB_EPStartXfer+0x16e2>
 800755c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007560:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800756a:	b29b      	uxth	r3, r3
 800756c:	461a      	mov	r2, r3
 800756e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007572:	4413      	add	r3, r2
 8007574:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007578:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800757c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	781b      	ldrb	r3, [r3, #0]
 8007584:	011a      	lsls	r2, r3, #4
 8007586:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800758a:	4413      	add	r3, r2
 800758c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007590:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007594:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007598:	b29a      	uxth	r2, r3
 800759a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800759e:	801a      	strh	r2, [r3, #0]
 80075a0:	e001      	b.n	80075a6 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 80075a2:	2301      	movs	r3, #1
 80075a4:	e03a      	b.n	800761c <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80075a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80075ae:	681a      	ldr	r2, [r3, #0]
 80075b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	781b      	ldrb	r3, [r3, #0]
 80075bc:	009b      	lsls	r3, r3, #2
 80075be:	4413      	add	r3, r2
 80075c0:	881b      	ldrh	r3, [r3, #0]
 80075c2:	b29b      	uxth	r3, r3
 80075c4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80075c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075cc:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80075d0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80075d4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80075d8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80075dc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80075e0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80075e4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80075e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80075f0:	681a      	ldr	r2, [r3, #0]
 80075f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	781b      	ldrb	r3, [r3, #0]
 80075fe:	009b      	lsls	r3, r3, #2
 8007600:	441a      	add	r2, r3
 8007602:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007606:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800760a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800760e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007612:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007616:	b29b      	uxth	r3, r3
 8007618:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800761a:	2300      	movs	r3, #0
}
 800761c:	4618      	mov	r0, r3
 800761e:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8007622:	46bd      	mov	sp, r7
 8007624:	bd80      	pop	{r7, pc}

08007626 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007626:	b480      	push	{r7}
 8007628:	b085      	sub	sp, #20
 800762a:	af00      	add	r7, sp, #0
 800762c:	6078      	str	r0, [r7, #4]
 800762e:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	785b      	ldrb	r3, [r3, #1]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d020      	beq.n	800767a <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007638:	687a      	ldr	r2, [r7, #4]
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	781b      	ldrb	r3, [r3, #0]
 800763e:	009b      	lsls	r3, r3, #2
 8007640:	4413      	add	r3, r2
 8007642:	881b      	ldrh	r3, [r3, #0]
 8007644:	b29b      	uxth	r3, r3
 8007646:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800764a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800764e:	81bb      	strh	r3, [r7, #12]
 8007650:	89bb      	ldrh	r3, [r7, #12]
 8007652:	f083 0310 	eor.w	r3, r3, #16
 8007656:	81bb      	strh	r3, [r7, #12]
 8007658:	687a      	ldr	r2, [r7, #4]
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	781b      	ldrb	r3, [r3, #0]
 800765e:	009b      	lsls	r3, r3, #2
 8007660:	441a      	add	r2, r3
 8007662:	89bb      	ldrh	r3, [r7, #12]
 8007664:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007668:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800766c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007670:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007674:	b29b      	uxth	r3, r3
 8007676:	8013      	strh	r3, [r2, #0]
 8007678:	e01f      	b.n	80076ba <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800767a:	687a      	ldr	r2, [r7, #4]
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	781b      	ldrb	r3, [r3, #0]
 8007680:	009b      	lsls	r3, r3, #2
 8007682:	4413      	add	r3, r2
 8007684:	881b      	ldrh	r3, [r3, #0]
 8007686:	b29b      	uxth	r3, r3
 8007688:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800768c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007690:	81fb      	strh	r3, [r7, #14]
 8007692:	89fb      	ldrh	r3, [r7, #14]
 8007694:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007698:	81fb      	strh	r3, [r7, #14]
 800769a:	687a      	ldr	r2, [r7, #4]
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	781b      	ldrb	r3, [r3, #0]
 80076a0:	009b      	lsls	r3, r3, #2
 80076a2:	441a      	add	r2, r3
 80076a4:	89fb      	ldrh	r3, [r7, #14]
 80076a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80076b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076b6:	b29b      	uxth	r3, r3
 80076b8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80076ba:	2300      	movs	r3, #0
}
 80076bc:	4618      	mov	r0, r3
 80076be:	3714      	adds	r7, #20
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bc80      	pop	{r7}
 80076c4:	4770      	bx	lr

080076c6 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80076c6:	b480      	push	{r7}
 80076c8:	b087      	sub	sp, #28
 80076ca:	af00      	add	r7, sp, #0
 80076cc:	6078      	str	r0, [r7, #4]
 80076ce:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	7b1b      	ldrb	r3, [r3, #12]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	f040 809d 	bne.w	8007814 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	785b      	ldrb	r3, [r3, #1]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d04c      	beq.n	800777c <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80076e2:	687a      	ldr	r2, [r7, #4]
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	781b      	ldrb	r3, [r3, #0]
 80076e8:	009b      	lsls	r3, r3, #2
 80076ea:	4413      	add	r3, r2
 80076ec:	881b      	ldrh	r3, [r3, #0]
 80076ee:	823b      	strh	r3, [r7, #16]
 80076f0:	8a3b      	ldrh	r3, [r7, #16]
 80076f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d01b      	beq.n	8007732 <USB_EPClearStall+0x6c>
 80076fa:	687a      	ldr	r2, [r7, #4]
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	781b      	ldrb	r3, [r3, #0]
 8007700:	009b      	lsls	r3, r3, #2
 8007702:	4413      	add	r3, r2
 8007704:	881b      	ldrh	r3, [r3, #0]
 8007706:	b29b      	uxth	r3, r3
 8007708:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800770c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007710:	81fb      	strh	r3, [r7, #14]
 8007712:	687a      	ldr	r2, [r7, #4]
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	781b      	ldrb	r3, [r3, #0]
 8007718:	009b      	lsls	r3, r3, #2
 800771a:	441a      	add	r2, r3
 800771c:	89fb      	ldrh	r3, [r7, #14]
 800771e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007722:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007726:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800772a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800772e:	b29b      	uxth	r3, r3
 8007730:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	78db      	ldrb	r3, [r3, #3]
 8007736:	2b01      	cmp	r3, #1
 8007738:	d06c      	beq.n	8007814 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800773a:	687a      	ldr	r2, [r7, #4]
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	781b      	ldrb	r3, [r3, #0]
 8007740:	009b      	lsls	r3, r3, #2
 8007742:	4413      	add	r3, r2
 8007744:	881b      	ldrh	r3, [r3, #0]
 8007746:	b29b      	uxth	r3, r3
 8007748:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800774c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007750:	81bb      	strh	r3, [r7, #12]
 8007752:	89bb      	ldrh	r3, [r7, #12]
 8007754:	f083 0320 	eor.w	r3, r3, #32
 8007758:	81bb      	strh	r3, [r7, #12]
 800775a:	687a      	ldr	r2, [r7, #4]
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	781b      	ldrb	r3, [r3, #0]
 8007760:	009b      	lsls	r3, r3, #2
 8007762:	441a      	add	r2, r3
 8007764:	89bb      	ldrh	r3, [r7, #12]
 8007766:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800776a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800776e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007772:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007776:	b29b      	uxth	r3, r3
 8007778:	8013      	strh	r3, [r2, #0]
 800777a:	e04b      	b.n	8007814 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800777c:	687a      	ldr	r2, [r7, #4]
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	781b      	ldrb	r3, [r3, #0]
 8007782:	009b      	lsls	r3, r3, #2
 8007784:	4413      	add	r3, r2
 8007786:	881b      	ldrh	r3, [r3, #0]
 8007788:	82fb      	strh	r3, [r7, #22]
 800778a:	8afb      	ldrh	r3, [r7, #22]
 800778c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007790:	2b00      	cmp	r3, #0
 8007792:	d01b      	beq.n	80077cc <USB_EPClearStall+0x106>
 8007794:	687a      	ldr	r2, [r7, #4]
 8007796:	683b      	ldr	r3, [r7, #0]
 8007798:	781b      	ldrb	r3, [r3, #0]
 800779a:	009b      	lsls	r3, r3, #2
 800779c:	4413      	add	r3, r2
 800779e:	881b      	ldrh	r3, [r3, #0]
 80077a0:	b29b      	uxth	r3, r3
 80077a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077aa:	82bb      	strh	r3, [r7, #20]
 80077ac:	687a      	ldr	r2, [r7, #4]
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	781b      	ldrb	r3, [r3, #0]
 80077b2:	009b      	lsls	r3, r3, #2
 80077b4:	441a      	add	r2, r3
 80077b6:	8abb      	ldrh	r3, [r7, #20]
 80077b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80077bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80077c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80077c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077c8:	b29b      	uxth	r3, r3
 80077ca:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80077cc:	687a      	ldr	r2, [r7, #4]
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	781b      	ldrb	r3, [r3, #0]
 80077d2:	009b      	lsls	r3, r3, #2
 80077d4:	4413      	add	r3, r2
 80077d6:	881b      	ldrh	r3, [r3, #0]
 80077d8:	b29b      	uxth	r3, r3
 80077da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80077de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077e2:	827b      	strh	r3, [r7, #18]
 80077e4:	8a7b      	ldrh	r3, [r7, #18]
 80077e6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80077ea:	827b      	strh	r3, [r7, #18]
 80077ec:	8a7b      	ldrh	r3, [r7, #18]
 80077ee:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80077f2:	827b      	strh	r3, [r7, #18]
 80077f4:	687a      	ldr	r2, [r7, #4]
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	781b      	ldrb	r3, [r3, #0]
 80077fa:	009b      	lsls	r3, r3, #2
 80077fc:	441a      	add	r2, r3
 80077fe:	8a7b      	ldrh	r3, [r7, #18]
 8007800:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007804:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007808:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800780c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007810:	b29b      	uxth	r3, r3
 8007812:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007814:	2300      	movs	r3, #0
}
 8007816:	4618      	mov	r0, r3
 8007818:	371c      	adds	r7, #28
 800781a:	46bd      	mov	sp, r7
 800781c:	bc80      	pop	{r7}
 800781e:	4770      	bx	lr

08007820 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007820:	b480      	push	{r7}
 8007822:	b083      	sub	sp, #12
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
 8007828:	460b      	mov	r3, r1
 800782a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800782c:	78fb      	ldrb	r3, [r7, #3]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d103      	bne.n	800783a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2280      	movs	r2, #128	; 0x80
 8007836:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800783a:	2300      	movs	r3, #0
}
 800783c:	4618      	mov	r0, r3
 800783e:	370c      	adds	r7, #12
 8007840:	46bd      	mov	sp, r7
 8007842:	bc80      	pop	{r7}
 8007844:	4770      	bx	lr

08007846 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007846:	b480      	push	{r7}
 8007848:	b083      	sub	sp, #12
 800784a:	af00      	add	r7, sp, #0
 800784c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800784e:	2300      	movs	r3, #0
}
 8007850:	4618      	mov	r0, r3
 8007852:	370c      	adds	r7, #12
 8007854:	46bd      	mov	sp, r7
 8007856:	bc80      	pop	{r7}
 8007858:	4770      	bx	lr

0800785a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800785a:	b480      	push	{r7}
 800785c:	b085      	sub	sp, #20
 800785e:	af00      	add	r7, sp, #0
 8007860:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007868:	b29b      	uxth	r3, r3
 800786a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800786c:	68fb      	ldr	r3, [r7, #12]
}
 800786e:	4618      	mov	r0, r3
 8007870:	3714      	adds	r7, #20
 8007872:	46bd      	mov	sp, r7
 8007874:	bc80      	pop	{r7}
 8007876:	4770      	bx	lr

08007878 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007878:	b480      	push	{r7}
 800787a:	b08b      	sub	sp, #44	; 0x2c
 800787c:	af00      	add	r7, sp, #0
 800787e:	60f8      	str	r0, [r7, #12]
 8007880:	60b9      	str	r1, [r7, #8]
 8007882:	4611      	mov	r1, r2
 8007884:	461a      	mov	r2, r3
 8007886:	460b      	mov	r3, r1
 8007888:	80fb      	strh	r3, [r7, #6]
 800788a:	4613      	mov	r3, r2
 800788c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800788e:	88bb      	ldrh	r3, [r7, #4]
 8007890:	3301      	adds	r3, #1
 8007892:	085b      	lsrs	r3, r3, #1
 8007894:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800789a:	68bb      	ldr	r3, [r7, #8]
 800789c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800789e:	88fb      	ldrh	r3, [r7, #6]
 80078a0:	005a      	lsls	r2, r3, #1
 80078a2:	697b      	ldr	r3, [r7, #20]
 80078a4:	4413      	add	r3, r2
 80078a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80078aa:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80078ac:	69bb      	ldr	r3, [r7, #24]
 80078ae:	627b      	str	r3, [r7, #36]	; 0x24
 80078b0:	e01e      	b.n	80078f0 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 80078b2:	69fb      	ldr	r3, [r7, #28]
 80078b4:	781b      	ldrb	r3, [r3, #0]
 80078b6:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80078b8:	69fb      	ldr	r3, [r7, #28]
 80078ba:	3301      	adds	r3, #1
 80078bc:	781b      	ldrb	r3, [r3, #0]
 80078be:	021b      	lsls	r3, r3, #8
 80078c0:	b21a      	sxth	r2, r3
 80078c2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80078c6:	4313      	orrs	r3, r2
 80078c8:	b21b      	sxth	r3, r3
 80078ca:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 80078cc:	6a3b      	ldr	r3, [r7, #32]
 80078ce:	8a7a      	ldrh	r2, [r7, #18]
 80078d0:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80078d2:	6a3b      	ldr	r3, [r7, #32]
 80078d4:	3302      	adds	r3, #2
 80078d6:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 80078d8:	6a3b      	ldr	r3, [r7, #32]
 80078da:	3302      	adds	r3, #2
 80078dc:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 80078de:	69fb      	ldr	r3, [r7, #28]
 80078e0:	3301      	adds	r3, #1
 80078e2:	61fb      	str	r3, [r7, #28]
    pBuf++;
 80078e4:	69fb      	ldr	r3, [r7, #28]
 80078e6:	3301      	adds	r3, #1
 80078e8:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80078ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ec:	3b01      	subs	r3, #1
 80078ee:	627b      	str	r3, [r7, #36]	; 0x24
 80078f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d1dd      	bne.n	80078b2 <USB_WritePMA+0x3a>
  }
}
 80078f6:	bf00      	nop
 80078f8:	bf00      	nop
 80078fa:	372c      	adds	r7, #44	; 0x2c
 80078fc:	46bd      	mov	sp, r7
 80078fe:	bc80      	pop	{r7}
 8007900:	4770      	bx	lr

08007902 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007902:	b480      	push	{r7}
 8007904:	b08b      	sub	sp, #44	; 0x2c
 8007906:	af00      	add	r7, sp, #0
 8007908:	60f8      	str	r0, [r7, #12]
 800790a:	60b9      	str	r1, [r7, #8]
 800790c:	4611      	mov	r1, r2
 800790e:	461a      	mov	r2, r3
 8007910:	460b      	mov	r3, r1
 8007912:	80fb      	strh	r3, [r7, #6]
 8007914:	4613      	mov	r3, r2
 8007916:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007918:	88bb      	ldrh	r3, [r7, #4]
 800791a:	085b      	lsrs	r3, r3, #1
 800791c:	b29b      	uxth	r3, r3
 800791e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007924:	68bb      	ldr	r3, [r7, #8]
 8007926:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007928:	88fb      	ldrh	r3, [r7, #6]
 800792a:	005a      	lsls	r2, r3, #1
 800792c:	697b      	ldr	r3, [r7, #20]
 800792e:	4413      	add	r3, r2
 8007930:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007934:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007936:	69bb      	ldr	r3, [r7, #24]
 8007938:	627b      	str	r3, [r7, #36]	; 0x24
 800793a:	e01b      	b.n	8007974 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800793c:	6a3b      	ldr	r3, [r7, #32]
 800793e:	881b      	ldrh	r3, [r3, #0]
 8007940:	b29b      	uxth	r3, r3
 8007942:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007944:	6a3b      	ldr	r3, [r7, #32]
 8007946:	3302      	adds	r3, #2
 8007948:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800794a:	693b      	ldr	r3, [r7, #16]
 800794c:	b2da      	uxtb	r2, r3
 800794e:	69fb      	ldr	r3, [r7, #28]
 8007950:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007952:	69fb      	ldr	r3, [r7, #28]
 8007954:	3301      	adds	r3, #1
 8007956:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8007958:	693b      	ldr	r3, [r7, #16]
 800795a:	0a1b      	lsrs	r3, r3, #8
 800795c:	b2da      	uxtb	r2, r3
 800795e:	69fb      	ldr	r3, [r7, #28]
 8007960:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007962:	69fb      	ldr	r3, [r7, #28]
 8007964:	3301      	adds	r3, #1
 8007966:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007968:	6a3b      	ldr	r3, [r7, #32]
 800796a:	3302      	adds	r3, #2
 800796c:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 800796e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007970:	3b01      	subs	r3, #1
 8007972:	627b      	str	r3, [r7, #36]	; 0x24
 8007974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007976:	2b00      	cmp	r3, #0
 8007978:	d1e0      	bne.n	800793c <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800797a:	88bb      	ldrh	r3, [r7, #4]
 800797c:	f003 0301 	and.w	r3, r3, #1
 8007980:	b29b      	uxth	r3, r3
 8007982:	2b00      	cmp	r3, #0
 8007984:	d007      	beq.n	8007996 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8007986:	6a3b      	ldr	r3, [r7, #32]
 8007988:	881b      	ldrh	r3, [r3, #0]
 800798a:	b29b      	uxth	r3, r3
 800798c:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800798e:	693b      	ldr	r3, [r7, #16]
 8007990:	b2da      	uxtb	r2, r3
 8007992:	69fb      	ldr	r3, [r7, #28]
 8007994:	701a      	strb	r2, [r3, #0]
  }
}
 8007996:	bf00      	nop
 8007998:	372c      	adds	r7, #44	; 0x2c
 800799a:	46bd      	mov	sp, r7
 800799c:	bc80      	pop	{r7}
 800799e:	4770      	bx	lr

080079a0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b084      	sub	sp, #16
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
 80079a8:	460b      	mov	r3, r1
 80079aa:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80079ac:	2300      	movs	r3, #0
 80079ae:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	7c1b      	ldrb	r3, [r3, #16]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d115      	bne.n	80079e4 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80079b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80079bc:	2202      	movs	r2, #2
 80079be:	2181      	movs	r1, #129	; 0x81
 80079c0:	6878      	ldr	r0, [r7, #4]
 80079c2:	f001 fe40 	bl	8009646 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	2201      	movs	r2, #1
 80079ca:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80079cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80079d0:	2202      	movs	r2, #2
 80079d2:	2101      	movs	r1, #1
 80079d4:	6878      	ldr	r0, [r7, #4]
 80079d6:	f001 fe36 	bl	8009646 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	2201      	movs	r2, #1
 80079de:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 80079e2:	e012      	b.n	8007a0a <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80079e4:	2340      	movs	r3, #64	; 0x40
 80079e6:	2202      	movs	r2, #2
 80079e8:	2181      	movs	r1, #129	; 0x81
 80079ea:	6878      	ldr	r0, [r7, #4]
 80079ec:	f001 fe2b 	bl	8009646 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2201      	movs	r2, #1
 80079f4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80079f6:	2340      	movs	r3, #64	; 0x40
 80079f8:	2202      	movs	r2, #2
 80079fa:	2101      	movs	r1, #1
 80079fc:	6878      	ldr	r0, [r7, #4]
 80079fe:	f001 fe22 	bl	8009646 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2201      	movs	r2, #1
 8007a06:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007a0a:	2308      	movs	r3, #8
 8007a0c:	2203      	movs	r2, #3
 8007a0e:	2182      	movs	r1, #130	; 0x82
 8007a10:	6878      	ldr	r0, [r7, #4]
 8007a12:	f001 fe18 	bl	8009646 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2201      	movs	r2, #1
 8007a1a:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8007a1c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007a20:	f001 ff38 	bl	8009894 <USBD_static_malloc>
 8007a24:	4602      	mov	r2, r0
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d102      	bne.n	8007a3c <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8007a36:	2301      	movs	r3, #1
 8007a38:	73fb      	strb	r3, [r7, #15]
 8007a3a:	e026      	b.n	8007a8a <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007a42:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8007a4e:	68bb      	ldr	r3, [r7, #8]
 8007a50:	2200      	movs	r2, #0
 8007a52:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8007a56:	68bb      	ldr	r3, [r7, #8]
 8007a58:	2200      	movs	r2, #0
 8007a5a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	7c1b      	ldrb	r3, [r3, #16]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d109      	bne.n	8007a7a <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007a66:	68bb      	ldr	r3, [r7, #8]
 8007a68:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007a6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007a70:	2101      	movs	r1, #1
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	f001 fed8 	bl	8009828 <USBD_LL_PrepareReceive>
 8007a78:	e007      	b.n	8007a8a <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007a7a:	68bb      	ldr	r3, [r7, #8]
 8007a7c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007a80:	2340      	movs	r3, #64	; 0x40
 8007a82:	2101      	movs	r1, #1
 8007a84:	6878      	ldr	r0, [r7, #4]
 8007a86:	f001 fecf 	bl	8009828 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8007a8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	3710      	adds	r7, #16
 8007a90:	46bd      	mov	sp, r7
 8007a92:	bd80      	pop	{r7, pc}

08007a94 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b084      	sub	sp, #16
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
 8007a9c:	460b      	mov	r3, r1
 8007a9e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007aa4:	2181      	movs	r1, #129	; 0x81
 8007aa6:	6878      	ldr	r0, [r7, #4]
 8007aa8:	f001 fdf3 	bl	8009692 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2200      	movs	r2, #0
 8007ab0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007ab2:	2101      	movs	r1, #1
 8007ab4:	6878      	ldr	r0, [r7, #4]
 8007ab6:	f001 fdec 	bl	8009692 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2200      	movs	r2, #0
 8007abe:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007ac2:	2182      	movs	r1, #130	; 0x82
 8007ac4:	6878      	ldr	r0, [r7, #4]
 8007ac6:	f001 fde4 	bl	8009692 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2200      	movs	r2, #0
 8007ace:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d00e      	beq.n	8007af8 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007ae0:	685b      	ldr	r3, [r3, #4]
 8007ae2:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007aea:	4618      	mov	r0, r3
 8007aec:	f001 fede 	bl	80098ac <USBD_static_free>
    pdev->pClassData = NULL;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2200      	movs	r2, #0
 8007af4:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 8007af8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007afa:	4618      	mov	r0, r3
 8007afc:	3710      	adds	r7, #16
 8007afe:	46bd      	mov	sp, r7
 8007b00:	bd80      	pop	{r7, pc}

08007b02 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 8007b02:	b580      	push	{r7, lr}
 8007b04:	b086      	sub	sp, #24
 8007b06:	af00      	add	r7, sp, #0
 8007b08:	6078      	str	r0, [r7, #4]
 8007b0a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007b12:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007b14:	2300      	movs	r3, #0
 8007b16:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007b18:	2300      	movs	r3, #0
 8007b1a:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	781b      	ldrb	r3, [r3, #0]
 8007b24:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d039      	beq.n	8007ba0 <USBD_CDC_Setup+0x9e>
 8007b2c:	2b20      	cmp	r3, #32
 8007b2e:	d17f      	bne.n	8007c30 <USBD_CDC_Setup+0x12e>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	88db      	ldrh	r3, [r3, #6]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d029      	beq.n	8007b8c <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	781b      	ldrb	r3, [r3, #0]
 8007b3c:	b25b      	sxtb	r3, r3
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	da11      	bge.n	8007b66 <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007b48:	689b      	ldr	r3, [r3, #8]
 8007b4a:	683a      	ldr	r2, [r7, #0]
 8007b4c:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 8007b4e:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007b50:	683a      	ldr	r2, [r7, #0]
 8007b52:	88d2      	ldrh	r2, [r2, #6]
 8007b54:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007b56:	6939      	ldr	r1, [r7, #16]
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	88db      	ldrh	r3, [r3, #6]
 8007b5c:	461a      	mov	r2, r3
 8007b5e:	6878      	ldr	r0, [r7, #4]
 8007b60:	f001 f993 	bl	8008e8a <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 8007b64:	e06b      	b.n	8007c3e <USBD_CDC_Setup+0x13c>
        hcdc->CmdOpCode = req->bRequest;
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	785a      	ldrb	r2, [r3, #1]
 8007b6a:	693b      	ldr	r3, [r7, #16]
 8007b6c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	88db      	ldrh	r3, [r3, #6]
 8007b74:	b2da      	uxtb	r2, r3
 8007b76:	693b      	ldr	r3, [r7, #16]
 8007b78:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007b7c:	6939      	ldr	r1, [r7, #16]
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	88db      	ldrh	r3, [r3, #6]
 8007b82:	461a      	mov	r2, r3
 8007b84:	6878      	ldr	r0, [r7, #4]
 8007b86:	f001 f9ae 	bl	8008ee6 <USBD_CtlPrepareRx>
    break;
 8007b8a:	e058      	b.n	8007c3e <USBD_CDC_Setup+0x13c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007b92:	689b      	ldr	r3, [r3, #8]
 8007b94:	683a      	ldr	r2, [r7, #0]
 8007b96:	7850      	ldrb	r0, [r2, #1]
 8007b98:	2200      	movs	r2, #0
 8007b9a:	6839      	ldr	r1, [r7, #0]
 8007b9c:	4798      	blx	r3
    break;
 8007b9e:	e04e      	b.n	8007c3e <USBD_CDC_Setup+0x13c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	785b      	ldrb	r3, [r3, #1]
 8007ba4:	2b0b      	cmp	r3, #11
 8007ba6:	d02e      	beq.n	8007c06 <USBD_CDC_Setup+0x104>
 8007ba8:	2b0b      	cmp	r3, #11
 8007baa:	dc38      	bgt.n	8007c1e <USBD_CDC_Setup+0x11c>
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d002      	beq.n	8007bb6 <USBD_CDC_Setup+0xb4>
 8007bb0:	2b0a      	cmp	r3, #10
 8007bb2:	d014      	beq.n	8007bde <USBD_CDC_Setup+0xdc>
 8007bb4:	e033      	b.n	8007c1e <USBD_CDC_Setup+0x11c>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007bbc:	2b03      	cmp	r3, #3
 8007bbe:	d107      	bne.n	8007bd0 <USBD_CDC_Setup+0xce>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 8007bc0:	f107 030c 	add.w	r3, r7, #12
 8007bc4:	2202      	movs	r2, #2
 8007bc6:	4619      	mov	r1, r3
 8007bc8:	6878      	ldr	r0, [r7, #4]
 8007bca:	f001 f95e 	bl	8008e8a <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8007bce:	e02e      	b.n	8007c2e <USBD_CDC_Setup+0x12c>
        USBD_CtlError (pdev, req);
 8007bd0:	6839      	ldr	r1, [r7, #0]
 8007bd2:	6878      	ldr	r0, [r7, #4]
 8007bd4:	f001 f8ef 	bl	8008db6 <USBD_CtlError>
			  ret = USBD_FAIL;
 8007bd8:	2302      	movs	r3, #2
 8007bda:	75fb      	strb	r3, [r7, #23]
      break;
 8007bdc:	e027      	b.n	8007c2e <USBD_CDC_Setup+0x12c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007be4:	2b03      	cmp	r3, #3
 8007be6:	d107      	bne.n	8007bf8 <USBD_CDC_Setup+0xf6>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 8007be8:	f107 030f 	add.w	r3, r7, #15
 8007bec:	2201      	movs	r2, #1
 8007bee:	4619      	mov	r1, r3
 8007bf0:	6878      	ldr	r0, [r7, #4]
 8007bf2:	f001 f94a 	bl	8008e8a <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8007bf6:	e01a      	b.n	8007c2e <USBD_CDC_Setup+0x12c>
        USBD_CtlError (pdev, req);
 8007bf8:	6839      	ldr	r1, [r7, #0]
 8007bfa:	6878      	ldr	r0, [r7, #4]
 8007bfc:	f001 f8db 	bl	8008db6 <USBD_CtlError>
			  ret = USBD_FAIL;
 8007c00:	2302      	movs	r3, #2
 8007c02:	75fb      	strb	r3, [r7, #23]
      break;
 8007c04:	e013      	b.n	8007c2e <USBD_CDC_Setup+0x12c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007c0c:	2b03      	cmp	r3, #3
 8007c0e:	d00d      	beq.n	8007c2c <USBD_CDC_Setup+0x12a>
      {
        USBD_CtlError (pdev, req);
 8007c10:	6839      	ldr	r1, [r7, #0]
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	f001 f8cf 	bl	8008db6 <USBD_CtlError>
			  ret = USBD_FAIL;
 8007c18:	2302      	movs	r3, #2
 8007c1a:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8007c1c:	e006      	b.n	8007c2c <USBD_CDC_Setup+0x12a>

    default:
      USBD_CtlError (pdev, req);
 8007c1e:	6839      	ldr	r1, [r7, #0]
 8007c20:	6878      	ldr	r0, [r7, #4]
 8007c22:	f001 f8c8 	bl	8008db6 <USBD_CtlError>
      ret = USBD_FAIL;
 8007c26:	2302      	movs	r3, #2
 8007c28:	75fb      	strb	r3, [r7, #23]
      break;
 8007c2a:	e000      	b.n	8007c2e <USBD_CDC_Setup+0x12c>
      break;
 8007c2c:	bf00      	nop
    }
    break;
 8007c2e:	e006      	b.n	8007c3e <USBD_CDC_Setup+0x13c>

  default:
    USBD_CtlError (pdev, req);
 8007c30:	6839      	ldr	r1, [r7, #0]
 8007c32:	6878      	ldr	r0, [r7, #4]
 8007c34:	f001 f8bf 	bl	8008db6 <USBD_CtlError>
    ret = USBD_FAIL;
 8007c38:	2302      	movs	r3, #2
 8007c3a:	75fb      	strb	r3, [r7, #23]
    break;
 8007c3c:	bf00      	nop
  }

  return ret;
 8007c3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c40:	4618      	mov	r0, r3
 8007c42:	3718      	adds	r7, #24
 8007c44:	46bd      	mov	sp, r7
 8007c46:	bd80      	pop	{r7, pc}

08007c48 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b084      	sub	sp, #16
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
 8007c50:	460b      	mov	r3, r1
 8007c52:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007c5a:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8007c62:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d03a      	beq.n	8007ce4 <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007c6e:	78fa      	ldrb	r2, [r7, #3]
 8007c70:	6879      	ldr	r1, [r7, #4]
 8007c72:	4613      	mov	r3, r2
 8007c74:	009b      	lsls	r3, r3, #2
 8007c76:	4413      	add	r3, r2
 8007c78:	009b      	lsls	r3, r3, #2
 8007c7a:	440b      	add	r3, r1
 8007c7c:	331c      	adds	r3, #28
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d029      	beq.n	8007cd8 <USBD_CDC_DataIn+0x90>
 8007c84:	78fa      	ldrb	r2, [r7, #3]
 8007c86:	6879      	ldr	r1, [r7, #4]
 8007c88:	4613      	mov	r3, r2
 8007c8a:	009b      	lsls	r3, r3, #2
 8007c8c:	4413      	add	r3, r2
 8007c8e:	009b      	lsls	r3, r3, #2
 8007c90:	440b      	add	r3, r1
 8007c92:	331c      	adds	r3, #28
 8007c94:	681a      	ldr	r2, [r3, #0]
 8007c96:	78f9      	ldrb	r1, [r7, #3]
 8007c98:	68b8      	ldr	r0, [r7, #8]
 8007c9a:	460b      	mov	r3, r1
 8007c9c:	009b      	lsls	r3, r3, #2
 8007c9e:	440b      	add	r3, r1
 8007ca0:	00db      	lsls	r3, r3, #3
 8007ca2:	4403      	add	r3, r0
 8007ca4:	3338      	adds	r3, #56	; 0x38
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	fbb2 f1f3 	udiv	r1, r2, r3
 8007cac:	fb01 f303 	mul.w	r3, r1, r3
 8007cb0:	1ad3      	subs	r3, r2, r3
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d110      	bne.n	8007cd8 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8007cb6:	78fa      	ldrb	r2, [r7, #3]
 8007cb8:	6879      	ldr	r1, [r7, #4]
 8007cba:	4613      	mov	r3, r2
 8007cbc:	009b      	lsls	r3, r3, #2
 8007cbe:	4413      	add	r3, r2
 8007cc0:	009b      	lsls	r3, r3, #2
 8007cc2:	440b      	add	r3, r1
 8007cc4:	331c      	adds	r3, #28
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 8007cca:	78f9      	ldrb	r1, [r7, #3]
 8007ccc:	2300      	movs	r3, #0
 8007cce:	2200      	movs	r2, #0
 8007cd0:	6878      	ldr	r0, [r7, #4]
 8007cd2:	f001 fd86 	bl	80097e2 <USBD_LL_Transmit>
 8007cd6:	e003      	b.n	8007ce0 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	2200      	movs	r2, #0
 8007cdc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	e000      	b.n	8007ce6 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8007ce4:	2302      	movs	r3, #2
  }
}
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	3710      	adds	r7, #16
 8007cea:	46bd      	mov	sp, r7
 8007cec:	bd80      	pop	{r7, pc}

08007cee <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007cee:	b580      	push	{r7, lr}
 8007cf0:	b084      	sub	sp, #16
 8007cf2:	af00      	add	r7, sp, #0
 8007cf4:	6078      	str	r0, [r7, #4]
 8007cf6:	460b      	mov	r3, r1
 8007cf8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007d00:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8007d02:	78fb      	ldrb	r3, [r7, #3]
 8007d04:	4619      	mov	r1, r3
 8007d06:	6878      	ldr	r0, [r7, #4]
 8007d08:	f001 fdb1 	bl	800986e <USBD_LL_GetRxDataSize>
 8007d0c:	4602      	mov	r2, r0
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d00d      	beq.n	8007d3a <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007d24:	68db      	ldr	r3, [r3, #12]
 8007d26:	68fa      	ldr	r2, [r7, #12]
 8007d28:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007d2c:	68fa      	ldr	r2, [r7, #12]
 8007d2e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007d32:	4611      	mov	r1, r2
 8007d34:	4798      	blx	r3

    return USBD_OK;
 8007d36:	2300      	movs	r3, #0
 8007d38:	e000      	b.n	8007d3c <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8007d3a:	2302      	movs	r3, #2
  }
}
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	3710      	adds	r7, #16
 8007d40:	46bd      	mov	sp, r7
 8007d42:	bd80      	pop	{r7, pc}

08007d44 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b084      	sub	sp, #16
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007d52:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d015      	beq.n	8007d8a <USBD_CDC_EP0_RxReady+0x46>
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007d64:	2bff      	cmp	r3, #255	; 0xff
 8007d66:	d010      	beq.n	8007d8a <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007d6e:	689b      	ldr	r3, [r3, #8]
 8007d70:	68fa      	ldr	r2, [r7, #12]
 8007d72:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8007d76:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007d78:	68fa      	ldr	r2, [r7, #12]
 8007d7a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007d7e:	b292      	uxth	r2, r2
 8007d80:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	22ff      	movs	r2, #255	; 0xff
 8007d86:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8007d8a:	2300      	movs	r3, #0
}
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	3710      	adds	r7, #16
 8007d90:	46bd      	mov	sp, r7
 8007d92:	bd80      	pop	{r7, pc}

08007d94 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 8007d94:	b480      	push	{r7}
 8007d96:	b083      	sub	sp, #12
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2243      	movs	r2, #67	; 0x43
 8007da0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8007da2:	4b03      	ldr	r3, [pc, #12]	; (8007db0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007da4:	4618      	mov	r0, r3
 8007da6:	370c      	adds	r7, #12
 8007da8:	46bd      	mov	sp, r7
 8007daa:	bc80      	pop	{r7}
 8007dac:	4770      	bx	lr
 8007dae:	bf00      	nop
 8007db0:	20000094 	.word	0x20000094

08007db4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 8007db4:	b480      	push	{r7}
 8007db6:	b083      	sub	sp, #12
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2243      	movs	r2, #67	; 0x43
 8007dc0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8007dc2:	4b03      	ldr	r3, [pc, #12]	; (8007dd0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	370c      	adds	r7, #12
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	bc80      	pop	{r7}
 8007dcc:	4770      	bx	lr
 8007dce:	bf00      	nop
 8007dd0:	20000050 	.word	0x20000050

08007dd4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 8007dd4:	b480      	push	{r7}
 8007dd6:	b083      	sub	sp, #12
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2243      	movs	r2, #67	; 0x43
 8007de0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8007de2:	4b03      	ldr	r3, [pc, #12]	; (8007df0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007de4:	4618      	mov	r0, r3
 8007de6:	370c      	adds	r7, #12
 8007de8:	46bd      	mov	sp, r7
 8007dea:	bc80      	pop	{r7}
 8007dec:	4770      	bx	lr
 8007dee:	bf00      	nop
 8007df0:	200000d8 	.word	0x200000d8

08007df4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 8007df4:	b480      	push	{r7}
 8007df6:	b083      	sub	sp, #12
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	220a      	movs	r2, #10
 8007e00:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8007e02:	4b03      	ldr	r3, [pc, #12]	; (8007e10 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007e04:	4618      	mov	r0, r3
 8007e06:	370c      	adds	r7, #12
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	bc80      	pop	{r7}
 8007e0c:	4770      	bx	lr
 8007e0e:	bf00      	nop
 8007e10:	2000000c 	.word	0x2000000c

08007e14 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 8007e14:	b480      	push	{r7}
 8007e16:	b085      	sub	sp, #20
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
 8007e1c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8007e1e:	2302      	movs	r3, #2
 8007e20:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d005      	beq.n	8007e34 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	683a      	ldr	r2, [r7, #0]
 8007e2c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 8007e30:	2300      	movs	r3, #0
 8007e32:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007e34:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e36:	4618      	mov	r0, r3
 8007e38:	3714      	adds	r7, #20
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	bc80      	pop	{r7}
 8007e3e:	4770      	bx	lr

08007e40 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 8007e40:	b480      	push	{r7}
 8007e42:	b087      	sub	sp, #28
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	60f8      	str	r0, [r7, #12]
 8007e48:	60b9      	str	r1, [r7, #8]
 8007e4a:	4613      	mov	r3, r2
 8007e4c:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007e54:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007e56:	697b      	ldr	r3, [r7, #20]
 8007e58:	68ba      	ldr	r2, [r7, #8]
 8007e5a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007e5e:	88fa      	ldrh	r2, [r7, #6]
 8007e60:	697b      	ldr	r3, [r7, #20]
 8007e62:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8007e66:	2300      	movs	r3, #0
}
 8007e68:	4618      	mov	r0, r3
 8007e6a:	371c      	adds	r7, #28
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	bc80      	pop	{r7}
 8007e70:	4770      	bx	lr

08007e72 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 8007e72:	b480      	push	{r7}
 8007e74:	b085      	sub	sp, #20
 8007e76:	af00      	add	r7, sp, #0
 8007e78:	6078      	str	r0, [r7, #4]
 8007e7a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007e82:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	683a      	ldr	r2, [r7, #0]
 8007e88:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8007e8c:	2300      	movs	r3, #0
}
 8007e8e:	4618      	mov	r0, r3
 8007e90:	3714      	adds	r7, #20
 8007e92:	46bd      	mov	sp, r7
 8007e94:	bc80      	pop	{r7}
 8007e96:	4770      	bx	lr

08007e98 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b084      	sub	sp, #16
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007ea6:	60fb      	str	r3, [r7, #12]

  if(pdev->pClassData != NULL)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d01c      	beq.n	8007eec <USBD_CDC_TransmitPacket+0x54>
  {
    if(hcdc->TxState == 0U)
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d115      	bne.n	8007ee8 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	2201      	movs	r2, #1
 8007ec0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007eda:	b29b      	uxth	r3, r3
 8007edc:	2181      	movs	r1, #129	; 0x81
 8007ede:	6878      	ldr	r0, [r7, #4]
 8007ee0:	f001 fc7f 	bl	80097e2 <USBD_LL_Transmit>

      return USBD_OK;
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	e002      	b.n	8007eee <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8007ee8:	2301      	movs	r3, #1
 8007eea:	e000      	b.n	8007eee <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8007eec:	2302      	movs	r3, #2
  }
}
 8007eee:	4618      	mov	r0, r3
 8007ef0:	3710      	adds	r7, #16
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	bd80      	pop	{r7, pc}

08007ef6 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007ef6:	b580      	push	{r7, lr}
 8007ef8:	b084      	sub	sp, #16
 8007efa:	af00      	add	r7, sp, #0
 8007efc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007f04:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d017      	beq.n	8007f40 <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	7c1b      	ldrb	r3, [r3, #16]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d109      	bne.n	8007f2c <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007f1e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007f22:	2101      	movs	r1, #1
 8007f24:	6878      	ldr	r0, [r7, #4]
 8007f26:	f001 fc7f 	bl	8009828 <USBD_LL_PrepareReceive>
 8007f2a:	e007      	b.n	8007f3c <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007f32:	2340      	movs	r3, #64	; 0x40
 8007f34:	2101      	movs	r1, #1
 8007f36:	6878      	ldr	r0, [r7, #4]
 8007f38:	f001 fc76 	bl	8009828 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	e000      	b.n	8007f42 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8007f40:	2302      	movs	r3, #2
  }
}
 8007f42:	4618      	mov	r0, r3
 8007f44:	3710      	adds	r7, #16
 8007f46:	46bd      	mov	sp, r7
 8007f48:	bd80      	pop	{r7, pc}

08007f4a <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007f4a:	b580      	push	{r7, lr}
 8007f4c:	b084      	sub	sp, #16
 8007f4e:	af00      	add	r7, sp, #0
 8007f50:	60f8      	str	r0, [r7, #12]
 8007f52:	60b9      	str	r1, [r7, #8]
 8007f54:	4613      	mov	r3, r2
 8007f56:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d101      	bne.n	8007f62 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007f5e:	2302      	movs	r3, #2
 8007f60:	e01a      	b.n	8007f98 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d003      	beq.n	8007f74 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	2200      	movs	r2, #0
 8007f70:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8007f74:	68bb      	ldr	r3, [r7, #8]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d003      	beq.n	8007f82 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	68ba      	ldr	r2, [r7, #8]
 8007f7e:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	2201      	movs	r2, #1
 8007f86:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	79fa      	ldrb	r2, [r7, #7]
 8007f8e:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007f90:	68f8      	ldr	r0, [r7, #12]
 8007f92:	f001 fae3 	bl	800955c <USBD_LL_Init>

  return USBD_OK;
 8007f96:	2300      	movs	r3, #0
}
 8007f98:	4618      	mov	r0, r3
 8007f9a:	3710      	adds	r7, #16
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	bd80      	pop	{r7, pc}

08007fa0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007fa0:	b480      	push	{r7}
 8007fa2:	b085      	sub	sp, #20
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
 8007fa8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 8007faa:	2300      	movs	r3, #0
 8007fac:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d006      	beq.n	8007fc2 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	683a      	ldr	r2, [r7, #0]
 8007fb8:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	73fb      	strb	r3, [r7, #15]
 8007fc0:	e001      	b.n	8007fc6 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8007fc2:	2302      	movs	r3, #2
 8007fc4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007fc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fc8:	4618      	mov	r0, r3
 8007fca:	3714      	adds	r7, #20
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	bc80      	pop	{r7}
 8007fd0:	4770      	bx	lr

08007fd2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8007fd2:	b580      	push	{r7, lr}
 8007fd4:	b082      	sub	sp, #8
 8007fd6:	af00      	add	r7, sp, #0
 8007fd8:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007fda:	6878      	ldr	r0, [r7, #4]
 8007fdc:	f001 fb18 	bl	8009610 <USBD_LL_Start>

  return USBD_OK;
 8007fe0:	2300      	movs	r3, #0
}
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	3708      	adds	r7, #8
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	bd80      	pop	{r7, pc}

08007fea <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 8007fea:	b480      	push	{r7}
 8007fec:	b083      	sub	sp, #12
 8007fee:	af00      	add	r7, sp, #0
 8007ff0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007ff2:	2300      	movs	r3, #0
}
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	370c      	adds	r7, #12
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	bc80      	pop	{r7}
 8007ffc:	4770      	bx	lr

08007ffe <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007ffe:	b580      	push	{r7, lr}
 8008000:	b084      	sub	sp, #16
 8008002:	af00      	add	r7, sp, #0
 8008004:	6078      	str	r0, [r7, #4]
 8008006:	460b      	mov	r3, r1
 8008008:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 800800a:	2302      	movs	r3, #2
 800800c:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008014:	2b00      	cmp	r3, #0
 8008016:	d00c      	beq.n	8008032 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	78fa      	ldrb	r2, [r7, #3]
 8008022:	4611      	mov	r1, r2
 8008024:	6878      	ldr	r0, [r7, #4]
 8008026:	4798      	blx	r3
 8008028:	4603      	mov	r3, r0
 800802a:	2b00      	cmp	r3, #0
 800802c:	d101      	bne.n	8008032 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800802e:	2300      	movs	r3, #0
 8008030:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8008032:	7bfb      	ldrb	r3, [r7, #15]
}
 8008034:	4618      	mov	r0, r3
 8008036:	3710      	adds	r7, #16
 8008038:	46bd      	mov	sp, r7
 800803a:	bd80      	pop	{r7, pc}

0800803c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800803c:	b580      	push	{r7, lr}
 800803e:	b082      	sub	sp, #8
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
 8008044:	460b      	mov	r3, r1
 8008046:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800804e:	685b      	ldr	r3, [r3, #4]
 8008050:	78fa      	ldrb	r2, [r7, #3]
 8008052:	4611      	mov	r1, r2
 8008054:	6878      	ldr	r0, [r7, #4]
 8008056:	4798      	blx	r3
  return USBD_OK;
 8008058:	2300      	movs	r3, #0
}
 800805a:	4618      	mov	r0, r3
 800805c:	3708      	adds	r7, #8
 800805e:	46bd      	mov	sp, r7
 8008060:	bd80      	pop	{r7, pc}

08008062 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008062:	b580      	push	{r7, lr}
 8008064:	b082      	sub	sp, #8
 8008066:	af00      	add	r7, sp, #0
 8008068:	6078      	str	r0, [r7, #4]
 800806a:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008072:	6839      	ldr	r1, [r7, #0]
 8008074:	4618      	mov	r0, r3
 8008076:	f000 fe62 	bl	8008d3e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	2201      	movs	r2, #1
 800807e:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 8008088:	461a      	mov	r2, r3
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8008096:	f003 031f 	and.w	r3, r3, #31
 800809a:	2b02      	cmp	r3, #2
 800809c:	d016      	beq.n	80080cc <USBD_LL_SetupStage+0x6a>
 800809e:	2b02      	cmp	r3, #2
 80080a0:	d81c      	bhi.n	80080dc <USBD_LL_SetupStage+0x7a>
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d002      	beq.n	80080ac <USBD_LL_SetupStage+0x4a>
 80080a6:	2b01      	cmp	r3, #1
 80080a8:	d008      	beq.n	80080bc <USBD_LL_SetupStage+0x5a>
 80080aa:	e017      	b.n	80080dc <USBD_LL_SetupStage+0x7a>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80080b2:	4619      	mov	r1, r3
 80080b4:	6878      	ldr	r0, [r7, #4]
 80080b6:	f000 f9c5 	bl	8008444 <USBD_StdDevReq>
    break;
 80080ba:	e01a      	b.n	80080f2 <USBD_LL_SetupStage+0x90>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80080c2:	4619      	mov	r1, r3
 80080c4:	6878      	ldr	r0, [r7, #4]
 80080c6:	f000 fa27 	bl	8008518 <USBD_StdItfReq>
    break;
 80080ca:	e012      	b.n	80080f2 <USBD_LL_SetupStage+0x90>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80080d2:	4619      	mov	r1, r3
 80080d4:	6878      	ldr	r0, [r7, #4]
 80080d6:	f000 fa67 	bl	80085a8 <USBD_StdEPReq>
    break;
 80080da:	e00a      	b.n	80080f2 <USBD_LL_SetupStage+0x90>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 80080e2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80080e6:	b2db      	uxtb	r3, r3
 80080e8:	4619      	mov	r1, r3
 80080ea:	6878      	ldr	r0, [r7, #4]
 80080ec:	f001 faf0 	bl	80096d0 <USBD_LL_StallEP>
    break;
 80080f0:	bf00      	nop
  }

  return USBD_OK;
 80080f2:	2300      	movs	r3, #0
}
 80080f4:	4618      	mov	r0, r3
 80080f6:	3708      	adds	r7, #8
 80080f8:	46bd      	mov	sp, r7
 80080fa:	bd80      	pop	{r7, pc}

080080fc <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b086      	sub	sp, #24
 8008100:	af00      	add	r7, sp, #0
 8008102:	60f8      	str	r0, [r7, #12]
 8008104:	460b      	mov	r3, r1
 8008106:	607a      	str	r2, [r7, #4]
 8008108:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 800810a:	7afb      	ldrb	r3, [r7, #11]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d14b      	bne.n	80081a8 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8008116:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800811e:	2b03      	cmp	r3, #3
 8008120:	d134      	bne.n	800818c <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 8008122:	697b      	ldr	r3, [r7, #20]
 8008124:	68da      	ldr	r2, [r3, #12]
 8008126:	697b      	ldr	r3, [r7, #20]
 8008128:	691b      	ldr	r3, [r3, #16]
 800812a:	429a      	cmp	r2, r3
 800812c:	d919      	bls.n	8008162 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 800812e:	697b      	ldr	r3, [r7, #20]
 8008130:	68da      	ldr	r2, [r3, #12]
 8008132:	697b      	ldr	r3, [r7, #20]
 8008134:	691b      	ldr	r3, [r3, #16]
 8008136:	1ad2      	subs	r2, r2, r3
 8008138:	697b      	ldr	r3, [r7, #20]
 800813a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800813c:	697b      	ldr	r3, [r7, #20]
 800813e:	68da      	ldr	r2, [r3, #12]
 8008140:	697b      	ldr	r3, [r7, #20]
 8008142:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8008144:	429a      	cmp	r2, r3
 8008146:	d203      	bcs.n	8008150 <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008148:	697b      	ldr	r3, [r7, #20]
 800814a:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 800814c:	b29b      	uxth	r3, r3
 800814e:	e002      	b.n	8008156 <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008150:	697b      	ldr	r3, [r7, #20]
 8008152:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8008154:	b29b      	uxth	r3, r3
 8008156:	461a      	mov	r2, r3
 8008158:	6879      	ldr	r1, [r7, #4]
 800815a:	68f8      	ldr	r0, [r7, #12]
 800815c:	f000 fee1 	bl	8008f22 <USBD_CtlContinueRx>
 8008160:	e038      	b.n	80081d4 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008168:	691b      	ldr	r3, [r3, #16]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d00a      	beq.n	8008184 <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8008174:	2b03      	cmp	r3, #3
 8008176:	d105      	bne.n	8008184 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800817e:	691b      	ldr	r3, [r3, #16]
 8008180:	68f8      	ldr	r0, [r7, #12]
 8008182:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8008184:	68f8      	ldr	r0, [r7, #12]
 8008186:	f000 fede 	bl	8008f46 <USBD_CtlSendStatus>
 800818a:	e023      	b.n	80081d4 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8008192:	2b05      	cmp	r3, #5
 8008194:	d11e      	bne.n	80081d4 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	2200      	movs	r2, #0
 800819a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 800819e:	2100      	movs	r1, #0
 80081a0:	68f8      	ldr	r0, [r7, #12]
 80081a2:	f001 fa95 	bl	80096d0 <USBD_LL_StallEP>
 80081a6:	e015      	b.n	80081d4 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80081ae:	699b      	ldr	r3, [r3, #24]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d00d      	beq.n	80081d0 <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 80081ba:	2b03      	cmp	r3, #3
 80081bc:	d108      	bne.n	80081d0 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80081c4:	699b      	ldr	r3, [r3, #24]
 80081c6:	7afa      	ldrb	r2, [r7, #11]
 80081c8:	4611      	mov	r1, r2
 80081ca:	68f8      	ldr	r0, [r7, #12]
 80081cc:	4798      	blx	r3
 80081ce:	e001      	b.n	80081d4 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80081d0:	2302      	movs	r3, #2
 80081d2:	e000      	b.n	80081d6 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80081d4:	2300      	movs	r3, #0
}
 80081d6:	4618      	mov	r0, r3
 80081d8:	3718      	adds	r7, #24
 80081da:	46bd      	mov	sp, r7
 80081dc:	bd80      	pop	{r7, pc}

080081de <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 80081de:	b580      	push	{r7, lr}
 80081e0:	b086      	sub	sp, #24
 80081e2:	af00      	add	r7, sp, #0
 80081e4:	60f8      	str	r0, [r7, #12]
 80081e6:	460b      	mov	r3, r1
 80081e8:	607a      	str	r2, [r7, #4]
 80081ea:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 80081ec:	7afb      	ldrb	r3, [r7, #11]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d17f      	bne.n	80082f2 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	3314      	adds	r3, #20
 80081f6:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 80081fe:	2b02      	cmp	r3, #2
 8008200:	d15c      	bne.n	80082bc <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 8008202:	697b      	ldr	r3, [r7, #20]
 8008204:	68da      	ldr	r2, [r3, #12]
 8008206:	697b      	ldr	r3, [r7, #20]
 8008208:	691b      	ldr	r3, [r3, #16]
 800820a:	429a      	cmp	r2, r3
 800820c:	d915      	bls.n	800823a <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800820e:	697b      	ldr	r3, [r7, #20]
 8008210:	68da      	ldr	r2, [r3, #12]
 8008212:	697b      	ldr	r3, [r7, #20]
 8008214:	691b      	ldr	r3, [r3, #16]
 8008216:	1ad2      	subs	r2, r2, r3
 8008218:	697b      	ldr	r3, [r7, #20]
 800821a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 800821c:	697b      	ldr	r3, [r7, #20]
 800821e:	68db      	ldr	r3, [r3, #12]
 8008220:	b29b      	uxth	r3, r3
 8008222:	461a      	mov	r2, r3
 8008224:	6879      	ldr	r1, [r7, #4]
 8008226:	68f8      	ldr	r0, [r7, #12]
 8008228:	f000 fe4b 	bl	8008ec2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800822c:	2300      	movs	r3, #0
 800822e:	2200      	movs	r2, #0
 8008230:	2100      	movs	r1, #0
 8008232:	68f8      	ldr	r0, [r7, #12]
 8008234:	f001 faf8 	bl	8009828 <USBD_LL_PrepareReceive>
 8008238:	e04e      	b.n	80082d8 <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 800823a:	697b      	ldr	r3, [r7, #20]
 800823c:	689b      	ldr	r3, [r3, #8]
 800823e:	697a      	ldr	r2, [r7, #20]
 8008240:	6912      	ldr	r2, [r2, #16]
 8008242:	fbb3 f1f2 	udiv	r1, r3, r2
 8008246:	fb01 f202 	mul.w	r2, r1, r2
 800824a:	1a9b      	subs	r3, r3, r2
 800824c:	2b00      	cmp	r3, #0
 800824e:	d11c      	bne.n	800828a <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 8008250:	697b      	ldr	r3, [r7, #20]
 8008252:	689a      	ldr	r2, [r3, #8]
 8008254:	697b      	ldr	r3, [r7, #20]
 8008256:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 8008258:	429a      	cmp	r2, r3
 800825a:	d316      	bcc.n	800828a <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 800825c:	697b      	ldr	r3, [r7, #20]
 800825e:	689a      	ldr	r2, [r3, #8]
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 8008266:	429a      	cmp	r2, r3
 8008268:	d20f      	bcs.n	800828a <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800826a:	2200      	movs	r2, #0
 800826c:	2100      	movs	r1, #0
 800826e:	68f8      	ldr	r0, [r7, #12]
 8008270:	f000 fe27 	bl	8008ec2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	2200      	movs	r2, #0
 8008278:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800827c:	2300      	movs	r3, #0
 800827e:	2200      	movs	r2, #0
 8008280:	2100      	movs	r1, #0
 8008282:	68f8      	ldr	r0, [r7, #12]
 8008284:	f001 fad0 	bl	8009828 <USBD_LL_PrepareReceive>
 8008288:	e026      	b.n	80082d8 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008290:	68db      	ldr	r3, [r3, #12]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d00a      	beq.n	80082ac <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800829c:	2b03      	cmp	r3, #3
 800829e:	d105      	bne.n	80082ac <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80082a6:	68db      	ldr	r3, [r3, #12]
 80082a8:	68f8      	ldr	r0, [r7, #12]
 80082aa:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80082ac:	2180      	movs	r1, #128	; 0x80
 80082ae:	68f8      	ldr	r0, [r7, #12]
 80082b0:	f001 fa0e 	bl	80096d0 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80082b4:	68f8      	ldr	r0, [r7, #12]
 80082b6:	f000 fe59 	bl	8008f6c <USBD_CtlReceiveStatus>
 80082ba:	e00d      	b.n	80082d8 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 80082c2:	2b04      	cmp	r3, #4
 80082c4:	d004      	beq.n	80082d0 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d103      	bne.n	80082d8 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80082d0:	2180      	movs	r1, #128	; 0x80
 80082d2:	68f8      	ldr	r0, [r7, #12]
 80082d4:	f001 f9fc 	bl	80096d0 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 80082de:	2b01      	cmp	r3, #1
 80082e0:	d11d      	bne.n	800831e <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80082e2:	68f8      	ldr	r0, [r7, #12]
 80082e4:	f7ff fe81 	bl	8007fea <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	2200      	movs	r2, #0
 80082ec:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 80082f0:	e015      	b.n	800831e <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80082f8:	695b      	ldr	r3, [r3, #20]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d00d      	beq.n	800831a <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 8008304:	2b03      	cmp	r3, #3
 8008306:	d108      	bne.n	800831a <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800830e:	695b      	ldr	r3, [r3, #20]
 8008310:	7afa      	ldrb	r2, [r7, #11]
 8008312:	4611      	mov	r1, r2
 8008314:	68f8      	ldr	r0, [r7, #12]
 8008316:	4798      	blx	r3
 8008318:	e001      	b.n	800831e <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800831a:	2302      	movs	r3, #2
 800831c:	e000      	b.n	8008320 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800831e:	2300      	movs	r3, #0
}
 8008320:	4618      	mov	r0, r3
 8008322:	3718      	adds	r7, #24
 8008324:	46bd      	mov	sp, r7
 8008326:	bd80      	pop	{r7, pc}

08008328 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8008328:	b580      	push	{r7, lr}
 800832a:	b082      	sub	sp, #8
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008330:	2340      	movs	r3, #64	; 0x40
 8008332:	2200      	movs	r2, #0
 8008334:	2100      	movs	r1, #0
 8008336:	6878      	ldr	r0, [r7, #4]
 8008338:	f001 f985 	bl	8009646 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2201      	movs	r2, #1
 8008340:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2240      	movs	r2, #64	; 0x40
 8008348:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800834c:	2340      	movs	r3, #64	; 0x40
 800834e:	2200      	movs	r2, #0
 8008350:	2180      	movs	r1, #128	; 0x80
 8008352:	6878      	ldr	r0, [r7, #4]
 8008354:	f001 f977 	bl	8009646 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	2201      	movs	r2, #1
 800835c:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	2240      	movs	r2, #64	; 0x40
 8008362:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2201      	movs	r2, #1
 8008368:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2200      	movs	r2, #0
 8008370:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2200      	movs	r2, #0
 8008378:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	2200      	movs	r2, #0
 800837e:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008388:	2b00      	cmp	r3, #0
 800838a:	d009      	beq.n	80083a0 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008392:	685b      	ldr	r3, [r3, #4]
 8008394:	687a      	ldr	r2, [r7, #4]
 8008396:	6852      	ldr	r2, [r2, #4]
 8008398:	b2d2      	uxtb	r2, r2
 800839a:	4611      	mov	r1, r2
 800839c:	6878      	ldr	r0, [r7, #4]
 800839e:	4798      	blx	r3
  }

  return USBD_OK;
 80083a0:	2300      	movs	r3, #0
}
 80083a2:	4618      	mov	r0, r3
 80083a4:	3708      	adds	r7, #8
 80083a6:	46bd      	mov	sp, r7
 80083a8:	bd80      	pop	{r7, pc}

080083aa <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 80083aa:	b480      	push	{r7}
 80083ac:	b083      	sub	sp, #12
 80083ae:	af00      	add	r7, sp, #0
 80083b0:	6078      	str	r0, [r7, #4]
 80083b2:	460b      	mov	r3, r1
 80083b4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	78fa      	ldrb	r2, [r7, #3]
 80083ba:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 80083bc:	2300      	movs	r3, #0
}
 80083be:	4618      	mov	r0, r3
 80083c0:	370c      	adds	r7, #12
 80083c2:	46bd      	mov	sp, r7
 80083c4:	bc80      	pop	{r7}
 80083c6:	4770      	bx	lr

080083c8 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 80083c8:	b480      	push	{r7}
 80083ca:	b083      	sub	sp, #12
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2204      	movs	r2, #4
 80083e0:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 80083e4:	2300      	movs	r3, #0
}
 80083e6:	4618      	mov	r0, r3
 80083e8:	370c      	adds	r7, #12
 80083ea:	46bd      	mov	sp, r7
 80083ec:	bc80      	pop	{r7}
 80083ee:	4770      	bx	lr

080083f0 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 80083f0:	b480      	push	{r7}
 80083f2:	b083      	sub	sp, #12
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8008404:	2300      	movs	r3, #0
}
 8008406:	4618      	mov	r0, r3
 8008408:	370c      	adds	r7, #12
 800840a:	46bd      	mov	sp, r7
 800840c:	bc80      	pop	{r7}
 800840e:	4770      	bx	lr

08008410 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8008410:	b580      	push	{r7, lr}
 8008412:	b082      	sub	sp, #8
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800841e:	2b03      	cmp	r3, #3
 8008420:	d10b      	bne.n	800843a <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008428:	69db      	ldr	r3, [r3, #28]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d005      	beq.n	800843a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008434:	69db      	ldr	r3, [r3, #28]
 8008436:	6878      	ldr	r0, [r7, #4]
 8008438:	4798      	blx	r3
    }
  }
  return USBD_OK;
 800843a:	2300      	movs	r3, #0
}
 800843c:	4618      	mov	r0, r3
 800843e:	3708      	adds	r7, #8
 8008440:	46bd      	mov	sp, r7
 8008442:	bd80      	pop	{r7, pc}

08008444 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8008444:	b580      	push	{r7, lr}
 8008446:	b084      	sub	sp, #16
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
 800844c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800844e:	2300      	movs	r3, #0
 8008450:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008452:	683b      	ldr	r3, [r7, #0]
 8008454:	781b      	ldrb	r3, [r3, #0]
 8008456:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800845a:	2b40      	cmp	r3, #64	; 0x40
 800845c:	d005      	beq.n	800846a <USBD_StdDevReq+0x26>
 800845e:	2b40      	cmp	r3, #64	; 0x40
 8008460:	d84f      	bhi.n	8008502 <USBD_StdDevReq+0xbe>
 8008462:	2b00      	cmp	r3, #0
 8008464:	d009      	beq.n	800847a <USBD_StdDevReq+0x36>
 8008466:	2b20      	cmp	r3, #32
 8008468:	d14b      	bne.n	8008502 <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008470:	689b      	ldr	r3, [r3, #8]
 8008472:	6839      	ldr	r1, [r7, #0]
 8008474:	6878      	ldr	r0, [r7, #4]
 8008476:	4798      	blx	r3
    break;
 8008478:	e048      	b.n	800850c <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	785b      	ldrb	r3, [r3, #1]
 800847e:	2b09      	cmp	r3, #9
 8008480:	d839      	bhi.n	80084f6 <USBD_StdDevReq+0xb2>
 8008482:	a201      	add	r2, pc, #4	; (adr r2, 8008488 <USBD_StdDevReq+0x44>)
 8008484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008488:	080084d9 	.word	0x080084d9
 800848c:	080084ed 	.word	0x080084ed
 8008490:	080084f7 	.word	0x080084f7
 8008494:	080084e3 	.word	0x080084e3
 8008498:	080084f7 	.word	0x080084f7
 800849c:	080084bb 	.word	0x080084bb
 80084a0:	080084b1 	.word	0x080084b1
 80084a4:	080084f7 	.word	0x080084f7
 80084a8:	080084cf 	.word	0x080084cf
 80084ac:	080084c5 	.word	0x080084c5
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 80084b0:	6839      	ldr	r1, [r7, #0]
 80084b2:	6878      	ldr	r0, [r7, #4]
 80084b4:	f000 f9da 	bl	800886c <USBD_GetDescriptor>
      break;
 80084b8:	e022      	b.n	8008500 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 80084ba:	6839      	ldr	r1, [r7, #0]
 80084bc:	6878      	ldr	r0, [r7, #4]
 80084be:	f000 facf 	bl	8008a60 <USBD_SetAddress>
      break;
 80084c2:	e01d      	b.n	8008500 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 80084c4:	6839      	ldr	r1, [r7, #0]
 80084c6:	6878      	ldr	r0, [r7, #4]
 80084c8:	f000 fb0e 	bl	8008ae8 <USBD_SetConfig>
      break;
 80084cc:	e018      	b.n	8008500 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 80084ce:	6839      	ldr	r1, [r7, #0]
 80084d0:	6878      	ldr	r0, [r7, #4]
 80084d2:	f000 fb97 	bl	8008c04 <USBD_GetConfig>
      break;
 80084d6:	e013      	b.n	8008500 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 80084d8:	6839      	ldr	r1, [r7, #0]
 80084da:	6878      	ldr	r0, [r7, #4]
 80084dc:	f000 fbc7 	bl	8008c6e <USBD_GetStatus>
      break;
 80084e0:	e00e      	b.n	8008500 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 80084e2:	6839      	ldr	r1, [r7, #0]
 80084e4:	6878      	ldr	r0, [r7, #4]
 80084e6:	f000 fbf5 	bl	8008cd4 <USBD_SetFeature>
      break;
 80084ea:	e009      	b.n	8008500 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 80084ec:	6839      	ldr	r1, [r7, #0]
 80084ee:	6878      	ldr	r0, [r7, #4]
 80084f0:	f000 fc04 	bl	8008cfc <USBD_ClrFeature>
      break;
 80084f4:	e004      	b.n	8008500 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 80084f6:	6839      	ldr	r1, [r7, #0]
 80084f8:	6878      	ldr	r0, [r7, #4]
 80084fa:	f000 fc5c 	bl	8008db6 <USBD_CtlError>
      break;
 80084fe:	bf00      	nop
    }
    break;
 8008500:	e004      	b.n	800850c <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 8008502:	6839      	ldr	r1, [r7, #0]
 8008504:	6878      	ldr	r0, [r7, #4]
 8008506:	f000 fc56 	bl	8008db6 <USBD_CtlError>
    break;
 800850a:	bf00      	nop
  }

  return ret;
 800850c:	7bfb      	ldrb	r3, [r7, #15]
}
 800850e:	4618      	mov	r0, r3
 8008510:	3710      	adds	r7, #16
 8008512:	46bd      	mov	sp, r7
 8008514:	bd80      	pop	{r7, pc}
 8008516:	bf00      	nop

08008518 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8008518:	b580      	push	{r7, lr}
 800851a:	b084      	sub	sp, #16
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
 8008520:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008522:	2300      	movs	r3, #0
 8008524:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008526:	683b      	ldr	r3, [r7, #0]
 8008528:	781b      	ldrb	r3, [r3, #0]
 800852a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800852e:	2b40      	cmp	r3, #64	; 0x40
 8008530:	d005      	beq.n	800853e <USBD_StdItfReq+0x26>
 8008532:	2b40      	cmp	r3, #64	; 0x40
 8008534:	d82e      	bhi.n	8008594 <USBD_StdItfReq+0x7c>
 8008536:	2b00      	cmp	r3, #0
 8008538:	d001      	beq.n	800853e <USBD_StdItfReq+0x26>
 800853a:	2b20      	cmp	r3, #32
 800853c:	d12a      	bne.n	8008594 <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008544:	3b01      	subs	r3, #1
 8008546:	2b02      	cmp	r3, #2
 8008548:	d81d      	bhi.n	8008586 <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800854a:	683b      	ldr	r3, [r7, #0]
 800854c:	889b      	ldrh	r3, [r3, #4]
 800854e:	b2db      	uxtb	r3, r3
 8008550:	2b01      	cmp	r3, #1
 8008552:	d813      	bhi.n	800857c <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800855a:	689b      	ldr	r3, [r3, #8]
 800855c:	6839      	ldr	r1, [r7, #0]
 800855e:	6878      	ldr	r0, [r7, #4]
 8008560:	4798      	blx	r3
 8008562:	4603      	mov	r3, r0
 8008564:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	88db      	ldrh	r3, [r3, #6]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d110      	bne.n	8008590 <USBD_StdItfReq+0x78>
 800856e:	7bfb      	ldrb	r3, [r7, #15]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d10d      	bne.n	8008590 <USBD_StdItfReq+0x78>
        {
          USBD_CtlSendStatus(pdev);
 8008574:	6878      	ldr	r0, [r7, #4]
 8008576:	f000 fce6 	bl	8008f46 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800857a:	e009      	b.n	8008590 <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 800857c:	6839      	ldr	r1, [r7, #0]
 800857e:	6878      	ldr	r0, [r7, #4]
 8008580:	f000 fc19 	bl	8008db6 <USBD_CtlError>
      break;
 8008584:	e004      	b.n	8008590 <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 8008586:	6839      	ldr	r1, [r7, #0]
 8008588:	6878      	ldr	r0, [r7, #4]
 800858a:	f000 fc14 	bl	8008db6 <USBD_CtlError>
      break;
 800858e:	e000      	b.n	8008592 <USBD_StdItfReq+0x7a>
      break;
 8008590:	bf00      	nop
    }
    break;
 8008592:	e004      	b.n	800859e <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 8008594:	6839      	ldr	r1, [r7, #0]
 8008596:	6878      	ldr	r0, [r7, #4]
 8008598:	f000 fc0d 	bl	8008db6 <USBD_CtlError>
    break;
 800859c:	bf00      	nop
  }

  return USBD_OK;
 800859e:	2300      	movs	r3, #0
}
 80085a0:	4618      	mov	r0, r3
 80085a2:	3710      	adds	r7, #16
 80085a4:	46bd      	mov	sp, r7
 80085a6:	bd80      	pop	{r7, pc}

080085a8 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b084      	sub	sp, #16
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
 80085b0:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80085b2:	2300      	movs	r3, #0
 80085b4:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 80085b6:	683b      	ldr	r3, [r7, #0]
 80085b8:	889b      	ldrh	r3, [r3, #4]
 80085ba:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	781b      	ldrb	r3, [r3, #0]
 80085c0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80085c4:	2b40      	cmp	r3, #64	; 0x40
 80085c6:	d007      	beq.n	80085d8 <USBD_StdEPReq+0x30>
 80085c8:	2b40      	cmp	r3, #64	; 0x40
 80085ca:	f200 8144 	bhi.w	8008856 <USBD_StdEPReq+0x2ae>
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d00a      	beq.n	80085e8 <USBD_StdEPReq+0x40>
 80085d2:	2b20      	cmp	r3, #32
 80085d4:	f040 813f 	bne.w	8008856 <USBD_StdEPReq+0x2ae>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80085de:	689b      	ldr	r3, [r3, #8]
 80085e0:	6839      	ldr	r1, [r7, #0]
 80085e2:	6878      	ldr	r0, [r7, #4]
 80085e4:	4798      	blx	r3
    break;
 80085e6:	e13b      	b.n	8008860 <USBD_StdEPReq+0x2b8>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	781b      	ldrb	r3, [r3, #0]
 80085ec:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80085f0:	2b20      	cmp	r3, #32
 80085f2:	d10a      	bne.n	800860a <USBD_StdEPReq+0x62>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80085fa:	689b      	ldr	r3, [r3, #8]
 80085fc:	6839      	ldr	r1, [r7, #0]
 80085fe:	6878      	ldr	r0, [r7, #4]
 8008600:	4798      	blx	r3
 8008602:	4603      	mov	r3, r0
 8008604:	73fb      	strb	r3, [r7, #15]

      return ret;
 8008606:	7bfb      	ldrb	r3, [r7, #15]
 8008608:	e12b      	b.n	8008862 <USBD_StdEPReq+0x2ba>
    }

    switch (req->bRequest)
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	785b      	ldrb	r3, [r3, #1]
 800860e:	2b03      	cmp	r3, #3
 8008610:	d007      	beq.n	8008622 <USBD_StdEPReq+0x7a>
 8008612:	2b03      	cmp	r3, #3
 8008614:	f300 8119 	bgt.w	800884a <USBD_StdEPReq+0x2a2>
 8008618:	2b00      	cmp	r3, #0
 800861a:	d072      	beq.n	8008702 <USBD_StdEPReq+0x15a>
 800861c:	2b01      	cmp	r3, #1
 800861e:	d03a      	beq.n	8008696 <USBD_StdEPReq+0xee>
 8008620:	e113      	b.n	800884a <USBD_StdEPReq+0x2a2>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008628:	2b02      	cmp	r3, #2
 800862a:	d002      	beq.n	8008632 <USBD_StdEPReq+0x8a>
 800862c:	2b03      	cmp	r3, #3
 800862e:	d015      	beq.n	800865c <USBD_StdEPReq+0xb4>
 8008630:	e02b      	b.n	800868a <USBD_StdEPReq+0xe2>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008632:	7bbb      	ldrb	r3, [r7, #14]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d00c      	beq.n	8008652 <USBD_StdEPReq+0xaa>
 8008638:	7bbb      	ldrb	r3, [r7, #14]
 800863a:	2b80      	cmp	r3, #128	; 0x80
 800863c:	d009      	beq.n	8008652 <USBD_StdEPReq+0xaa>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800863e:	7bbb      	ldrb	r3, [r7, #14]
 8008640:	4619      	mov	r1, r3
 8008642:	6878      	ldr	r0, [r7, #4]
 8008644:	f001 f844 	bl	80096d0 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8008648:	2180      	movs	r1, #128	; 0x80
 800864a:	6878      	ldr	r0, [r7, #4]
 800864c:	f001 f840 	bl	80096d0 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8008650:	e020      	b.n	8008694 <USBD_StdEPReq+0xec>
          USBD_CtlError(pdev, req);
 8008652:	6839      	ldr	r1, [r7, #0]
 8008654:	6878      	ldr	r0, [r7, #4]
 8008656:	f000 fbae 	bl	8008db6 <USBD_CtlError>
        break;
 800865a:	e01b      	b.n	8008694 <USBD_StdEPReq+0xec>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	885b      	ldrh	r3, [r3, #2]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d10e      	bne.n	8008682 <USBD_StdEPReq+0xda>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008664:	7bbb      	ldrb	r3, [r7, #14]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d00b      	beq.n	8008682 <USBD_StdEPReq+0xda>
 800866a:	7bbb      	ldrb	r3, [r7, #14]
 800866c:	2b80      	cmp	r3, #128	; 0x80
 800866e:	d008      	beq.n	8008682 <USBD_StdEPReq+0xda>
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	88db      	ldrh	r3, [r3, #6]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d104      	bne.n	8008682 <USBD_StdEPReq+0xda>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 8008678:	7bbb      	ldrb	r3, [r7, #14]
 800867a:	4619      	mov	r1, r3
 800867c:	6878      	ldr	r0, [r7, #4]
 800867e:	f001 f827 	bl	80096d0 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 8008682:	6878      	ldr	r0, [r7, #4]
 8008684:	f000 fc5f 	bl	8008f46 <USBD_CtlSendStatus>

        break;
 8008688:	e004      	b.n	8008694 <USBD_StdEPReq+0xec>

      default:
        USBD_CtlError(pdev, req);
 800868a:	6839      	ldr	r1, [r7, #0]
 800868c:	6878      	ldr	r0, [r7, #4]
 800868e:	f000 fb92 	bl	8008db6 <USBD_CtlError>
        break;
 8008692:	bf00      	nop
      }
      break;
 8008694:	e0de      	b.n	8008854 <USBD_StdEPReq+0x2ac>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800869c:	2b02      	cmp	r3, #2
 800869e:	d002      	beq.n	80086a6 <USBD_StdEPReq+0xfe>
 80086a0:	2b03      	cmp	r3, #3
 80086a2:	d015      	beq.n	80086d0 <USBD_StdEPReq+0x128>
 80086a4:	e026      	b.n	80086f4 <USBD_StdEPReq+0x14c>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80086a6:	7bbb      	ldrb	r3, [r7, #14]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d00c      	beq.n	80086c6 <USBD_StdEPReq+0x11e>
 80086ac:	7bbb      	ldrb	r3, [r7, #14]
 80086ae:	2b80      	cmp	r3, #128	; 0x80
 80086b0:	d009      	beq.n	80086c6 <USBD_StdEPReq+0x11e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 80086b2:	7bbb      	ldrb	r3, [r7, #14]
 80086b4:	4619      	mov	r1, r3
 80086b6:	6878      	ldr	r0, [r7, #4]
 80086b8:	f001 f80a 	bl	80096d0 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 80086bc:	2180      	movs	r1, #128	; 0x80
 80086be:	6878      	ldr	r0, [r7, #4]
 80086c0:	f001 f806 	bl	80096d0 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80086c4:	e01c      	b.n	8008700 <USBD_StdEPReq+0x158>
          USBD_CtlError(pdev, req);
 80086c6:	6839      	ldr	r1, [r7, #0]
 80086c8:	6878      	ldr	r0, [r7, #4]
 80086ca:	f000 fb74 	bl	8008db6 <USBD_CtlError>
        break;
 80086ce:	e017      	b.n	8008700 <USBD_StdEPReq+0x158>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80086d0:	683b      	ldr	r3, [r7, #0]
 80086d2:	885b      	ldrh	r3, [r3, #2]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d112      	bne.n	80086fe <USBD_StdEPReq+0x156>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 80086d8:	7bbb      	ldrb	r3, [r7, #14]
 80086da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d004      	beq.n	80086ec <USBD_StdEPReq+0x144>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 80086e2:	7bbb      	ldrb	r3, [r7, #14]
 80086e4:	4619      	mov	r1, r3
 80086e6:	6878      	ldr	r0, [r7, #4]
 80086e8:	f001 f811 	bl	800970e <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 80086ec:	6878      	ldr	r0, [r7, #4]
 80086ee:	f000 fc2a 	bl	8008f46 <USBD_CtlSendStatus>
        }
        break;
 80086f2:	e004      	b.n	80086fe <USBD_StdEPReq+0x156>

      default:
        USBD_CtlError(pdev, req);
 80086f4:	6839      	ldr	r1, [r7, #0]
 80086f6:	6878      	ldr	r0, [r7, #4]
 80086f8:	f000 fb5d 	bl	8008db6 <USBD_CtlError>
        break;
 80086fc:	e000      	b.n	8008700 <USBD_StdEPReq+0x158>
        break;
 80086fe:	bf00      	nop
      }
      break;
 8008700:	e0a8      	b.n	8008854 <USBD_StdEPReq+0x2ac>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008708:	2b02      	cmp	r3, #2
 800870a:	d002      	beq.n	8008712 <USBD_StdEPReq+0x16a>
 800870c:	2b03      	cmp	r3, #3
 800870e:	d031      	beq.n	8008774 <USBD_StdEPReq+0x1cc>
 8008710:	e095      	b.n	800883e <USBD_StdEPReq+0x296>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008712:	7bbb      	ldrb	r3, [r7, #14]
 8008714:	2b00      	cmp	r3, #0
 8008716:	d007      	beq.n	8008728 <USBD_StdEPReq+0x180>
 8008718:	7bbb      	ldrb	r3, [r7, #14]
 800871a:	2b80      	cmp	r3, #128	; 0x80
 800871c:	d004      	beq.n	8008728 <USBD_StdEPReq+0x180>
        {
          USBD_CtlError(pdev, req);
 800871e:	6839      	ldr	r1, [r7, #0]
 8008720:	6878      	ldr	r0, [r7, #4]
 8008722:	f000 fb48 	bl	8008db6 <USBD_CtlError>
          break;
 8008726:	e08f      	b.n	8008848 <USBD_StdEPReq+0x2a0>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8008728:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800872c:	2b00      	cmp	r3, #0
 800872e:	da0b      	bge.n	8008748 <USBD_StdEPReq+0x1a0>
 8008730:	7bbb      	ldrb	r3, [r7, #14]
 8008732:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008736:	4613      	mov	r3, r2
 8008738:	009b      	lsls	r3, r3, #2
 800873a:	4413      	add	r3, r2
 800873c:	009b      	lsls	r3, r3, #2
 800873e:	3310      	adds	r3, #16
 8008740:	687a      	ldr	r2, [r7, #4]
 8008742:	4413      	add	r3, r2
 8008744:	3304      	adds	r3, #4
 8008746:	e00a      	b.n	800875e <USBD_StdEPReq+0x1b6>
          &pdev->ep_out[ep_addr & 0x7FU];
 8008748:	7bbb      	ldrb	r3, [r7, #14]
 800874a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800874e:	4613      	mov	r3, r2
 8008750:	009b      	lsls	r3, r3, #2
 8008752:	4413      	add	r3, r2
 8008754:	009b      	lsls	r3, r3, #2
 8008756:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800875a:	687a      	ldr	r2, [r7, #4]
 800875c:	4413      	add	r3, r2
 800875e:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 8008760:	68bb      	ldr	r3, [r7, #8]
 8008762:	2200      	movs	r2, #0
 8008764:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008766:	68bb      	ldr	r3, [r7, #8]
 8008768:	2202      	movs	r2, #2
 800876a:	4619      	mov	r1, r3
 800876c:	6878      	ldr	r0, [r7, #4]
 800876e:	f000 fb8c 	bl	8008e8a <USBD_CtlSendData>
          break;
 8008772:	e069      	b.n	8008848 <USBD_StdEPReq+0x2a0>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 8008774:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008778:	2b00      	cmp	r3, #0
 800877a:	da11      	bge.n	80087a0 <USBD_StdEPReq+0x1f8>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800877c:	7bbb      	ldrb	r3, [r7, #14]
 800877e:	f003 020f 	and.w	r2, r3, #15
 8008782:	6879      	ldr	r1, [r7, #4]
 8008784:	4613      	mov	r3, r2
 8008786:	009b      	lsls	r3, r3, #2
 8008788:	4413      	add	r3, r2
 800878a:	009b      	lsls	r3, r3, #2
 800878c:	440b      	add	r3, r1
 800878e:	3318      	adds	r3, #24
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d117      	bne.n	80087c6 <USBD_StdEPReq+0x21e>
          {
            USBD_CtlError(pdev, req);
 8008796:	6839      	ldr	r1, [r7, #0]
 8008798:	6878      	ldr	r0, [r7, #4]
 800879a:	f000 fb0c 	bl	8008db6 <USBD_CtlError>
            break;
 800879e:	e053      	b.n	8008848 <USBD_StdEPReq+0x2a0>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80087a0:	7bbb      	ldrb	r3, [r7, #14]
 80087a2:	f003 020f 	and.w	r2, r3, #15
 80087a6:	6879      	ldr	r1, [r7, #4]
 80087a8:	4613      	mov	r3, r2
 80087aa:	009b      	lsls	r3, r3, #2
 80087ac:	4413      	add	r3, r2
 80087ae:	009b      	lsls	r3, r3, #2
 80087b0:	440b      	add	r3, r1
 80087b2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d104      	bne.n	80087c6 <USBD_StdEPReq+0x21e>
          {
            USBD_CtlError(pdev, req);
 80087bc:	6839      	ldr	r1, [r7, #0]
 80087be:	6878      	ldr	r0, [r7, #4]
 80087c0:	f000 faf9 	bl	8008db6 <USBD_CtlError>
            break;
 80087c4:	e040      	b.n	8008848 <USBD_StdEPReq+0x2a0>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80087c6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	da0b      	bge.n	80087e6 <USBD_StdEPReq+0x23e>
 80087ce:	7bbb      	ldrb	r3, [r7, #14]
 80087d0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80087d4:	4613      	mov	r3, r2
 80087d6:	009b      	lsls	r3, r3, #2
 80087d8:	4413      	add	r3, r2
 80087da:	009b      	lsls	r3, r3, #2
 80087dc:	3310      	adds	r3, #16
 80087de:	687a      	ldr	r2, [r7, #4]
 80087e0:	4413      	add	r3, r2
 80087e2:	3304      	adds	r3, #4
 80087e4:	e00a      	b.n	80087fc <USBD_StdEPReq+0x254>
          &pdev->ep_out[ep_addr & 0x7FU];
 80087e6:	7bbb      	ldrb	r3, [r7, #14]
 80087e8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80087ec:	4613      	mov	r3, r2
 80087ee:	009b      	lsls	r3, r3, #2
 80087f0:	4413      	add	r3, r2
 80087f2:	009b      	lsls	r3, r3, #2
 80087f4:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80087f8:	687a      	ldr	r2, [r7, #4]
 80087fa:	4413      	add	r3, r2
 80087fc:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80087fe:	7bbb      	ldrb	r3, [r7, #14]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d002      	beq.n	800880a <USBD_StdEPReq+0x262>
 8008804:	7bbb      	ldrb	r3, [r7, #14]
 8008806:	2b80      	cmp	r3, #128	; 0x80
 8008808:	d103      	bne.n	8008812 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0000U;
 800880a:	68bb      	ldr	r3, [r7, #8]
 800880c:	2200      	movs	r2, #0
 800880e:	601a      	str	r2, [r3, #0]
 8008810:	e00e      	b.n	8008830 <USBD_StdEPReq+0x288>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 8008812:	7bbb      	ldrb	r3, [r7, #14]
 8008814:	4619      	mov	r1, r3
 8008816:	6878      	ldr	r0, [r7, #4]
 8008818:	f000 ff98 	bl	800974c <USBD_LL_IsStallEP>
 800881c:	4603      	mov	r3, r0
 800881e:	2b00      	cmp	r3, #0
 8008820:	d003      	beq.n	800882a <USBD_StdEPReq+0x282>
          {
            pep->status = 0x0001U;
 8008822:	68bb      	ldr	r3, [r7, #8]
 8008824:	2201      	movs	r2, #1
 8008826:	601a      	str	r2, [r3, #0]
 8008828:	e002      	b.n	8008830 <USBD_StdEPReq+0x288>
          }
          else
          {
            pep->status = 0x0000U;
 800882a:	68bb      	ldr	r3, [r7, #8]
 800882c:	2200      	movs	r2, #0
 800882e:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008830:	68bb      	ldr	r3, [r7, #8]
 8008832:	2202      	movs	r2, #2
 8008834:	4619      	mov	r1, r3
 8008836:	6878      	ldr	r0, [r7, #4]
 8008838:	f000 fb27 	bl	8008e8a <USBD_CtlSendData>
          break;
 800883c:	e004      	b.n	8008848 <USBD_StdEPReq+0x2a0>

      default:
        USBD_CtlError(pdev, req);
 800883e:	6839      	ldr	r1, [r7, #0]
 8008840:	6878      	ldr	r0, [r7, #4]
 8008842:	f000 fab8 	bl	8008db6 <USBD_CtlError>
        break;
 8008846:	bf00      	nop
      }
      break;
 8008848:	e004      	b.n	8008854 <USBD_StdEPReq+0x2ac>

    default:
      USBD_CtlError(pdev, req);
 800884a:	6839      	ldr	r1, [r7, #0]
 800884c:	6878      	ldr	r0, [r7, #4]
 800884e:	f000 fab2 	bl	8008db6 <USBD_CtlError>
      break;
 8008852:	bf00      	nop
    }
    break;
 8008854:	e004      	b.n	8008860 <USBD_StdEPReq+0x2b8>

  default:
    USBD_CtlError(pdev, req);
 8008856:	6839      	ldr	r1, [r7, #0]
 8008858:	6878      	ldr	r0, [r7, #4]
 800885a:	f000 faac 	bl	8008db6 <USBD_CtlError>
    break;
 800885e:	bf00      	nop
  }

  return ret;
 8008860:	7bfb      	ldrb	r3, [r7, #15]
}
 8008862:	4618      	mov	r0, r3
 8008864:	3710      	adds	r7, #16
 8008866:	46bd      	mov	sp, r7
 8008868:	bd80      	pop	{r7, pc}
	...

0800886c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 800886c:	b580      	push	{r7, lr}
 800886e:	b084      	sub	sp, #16
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
 8008874:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	885b      	ldrh	r3, [r3, #2]
 800887a:	0a1b      	lsrs	r3, r3, #8
 800887c:	b29b      	uxth	r3, r3
 800887e:	3b01      	subs	r3, #1
 8008880:	2b06      	cmp	r3, #6
 8008882:	f200 80c9 	bhi.w	8008a18 <USBD_GetDescriptor+0x1ac>
 8008886:	a201      	add	r2, pc, #4	; (adr r2, 800888c <USBD_GetDescriptor+0x20>)
 8008888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800888c:	080088a9 	.word	0x080088a9
 8008890:	080088c1 	.word	0x080088c1
 8008894:	08008901 	.word	0x08008901
 8008898:	08008a19 	.word	0x08008a19
 800889c:	08008a19 	.word	0x08008a19
 80088a0:	080089c5 	.word	0x080089c5
 80088a4:	080089eb 	.word	0x080089eb
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	687a      	ldr	r2, [r7, #4]
 80088b2:	7c12      	ldrb	r2, [r2, #16]
 80088b4:	f107 010a 	add.w	r1, r7, #10
 80088b8:	4610      	mov	r0, r2
 80088ba:	4798      	blx	r3
 80088bc:	60f8      	str	r0, [r7, #12]
    break;
 80088be:	e0b0      	b.n	8008a22 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	7c1b      	ldrb	r3, [r3, #16]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d10d      	bne.n	80088e4 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80088ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088d0:	f107 020a 	add.w	r2, r7, #10
 80088d4:	4610      	mov	r0, r2
 80088d6:	4798      	blx	r3
 80088d8:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	3301      	adds	r3, #1
 80088de:	2202      	movs	r2, #2
 80088e0:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 80088e2:	e09e      	b.n	8008a22 <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80088ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088ec:	f107 020a 	add.w	r2, r7, #10
 80088f0:	4610      	mov	r0, r2
 80088f2:	4798      	blx	r3
 80088f4:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	3301      	adds	r3, #1
 80088fa:	2202      	movs	r2, #2
 80088fc:	701a      	strb	r2, [r3, #0]
    break;
 80088fe:	e090      	b.n	8008a22 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	885b      	ldrh	r3, [r3, #2]
 8008904:	b2db      	uxtb	r3, r3
 8008906:	2b05      	cmp	r3, #5
 8008908:	d856      	bhi.n	80089b8 <USBD_GetDescriptor+0x14c>
 800890a:	a201      	add	r2, pc, #4	; (adr r2, 8008910 <USBD_GetDescriptor+0xa4>)
 800890c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008910:	08008929 	.word	0x08008929
 8008914:	08008941 	.word	0x08008941
 8008918:	08008959 	.word	0x08008959
 800891c:	08008971 	.word	0x08008971
 8008920:	08008989 	.word	0x08008989
 8008924:	080089a1 	.word	0x080089a1
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800892e:	685b      	ldr	r3, [r3, #4]
 8008930:	687a      	ldr	r2, [r7, #4]
 8008932:	7c12      	ldrb	r2, [r2, #16]
 8008934:	f107 010a 	add.w	r1, r7, #10
 8008938:	4610      	mov	r0, r2
 800893a:	4798      	blx	r3
 800893c:	60f8      	str	r0, [r7, #12]
      break;
 800893e:	e040      	b.n	80089c2 <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8008946:	689b      	ldr	r3, [r3, #8]
 8008948:	687a      	ldr	r2, [r7, #4]
 800894a:	7c12      	ldrb	r2, [r2, #16]
 800894c:	f107 010a 	add.w	r1, r7, #10
 8008950:	4610      	mov	r0, r2
 8008952:	4798      	blx	r3
 8008954:	60f8      	str	r0, [r7, #12]
      break;
 8008956:	e034      	b.n	80089c2 <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800895e:	68db      	ldr	r3, [r3, #12]
 8008960:	687a      	ldr	r2, [r7, #4]
 8008962:	7c12      	ldrb	r2, [r2, #16]
 8008964:	f107 010a 	add.w	r1, r7, #10
 8008968:	4610      	mov	r0, r2
 800896a:	4798      	blx	r3
 800896c:	60f8      	str	r0, [r7, #12]
      break;
 800896e:	e028      	b.n	80089c2 <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8008976:	691b      	ldr	r3, [r3, #16]
 8008978:	687a      	ldr	r2, [r7, #4]
 800897a:	7c12      	ldrb	r2, [r2, #16]
 800897c:	f107 010a 	add.w	r1, r7, #10
 8008980:	4610      	mov	r0, r2
 8008982:	4798      	blx	r3
 8008984:	60f8      	str	r0, [r7, #12]
      break;
 8008986:	e01c      	b.n	80089c2 <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800898e:	695b      	ldr	r3, [r3, #20]
 8008990:	687a      	ldr	r2, [r7, #4]
 8008992:	7c12      	ldrb	r2, [r2, #16]
 8008994:	f107 010a 	add.w	r1, r7, #10
 8008998:	4610      	mov	r0, r2
 800899a:	4798      	blx	r3
 800899c:	60f8      	str	r0, [r7, #12]
      break;
 800899e:	e010      	b.n	80089c2 <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80089a6:	699b      	ldr	r3, [r3, #24]
 80089a8:	687a      	ldr	r2, [r7, #4]
 80089aa:	7c12      	ldrb	r2, [r2, #16]
 80089ac:	f107 010a 	add.w	r1, r7, #10
 80089b0:	4610      	mov	r0, r2
 80089b2:	4798      	blx	r3
 80089b4:	60f8      	str	r0, [r7, #12]
      break;
 80089b6:	e004      	b.n	80089c2 <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 80089b8:	6839      	ldr	r1, [r7, #0]
 80089ba:	6878      	ldr	r0, [r7, #4]
 80089bc:	f000 f9fb 	bl	8008db6 <USBD_CtlError>
      return;
 80089c0:	e04b      	b.n	8008a5a <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 80089c2:	e02e      	b.n	8008a22 <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	7c1b      	ldrb	r3, [r3, #16]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d109      	bne.n	80089e0 <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80089d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089d4:	f107 020a 	add.w	r2, r7, #10
 80089d8:	4610      	mov	r0, r2
 80089da:	4798      	blx	r3
 80089dc:	60f8      	str	r0, [r7, #12]
      break;
 80089de:	e020      	b.n	8008a22 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 80089e0:	6839      	ldr	r1, [r7, #0]
 80089e2:	6878      	ldr	r0, [r7, #4]
 80089e4:	f000 f9e7 	bl	8008db6 <USBD_CtlError>
      return;
 80089e8:	e037      	b.n	8008a5a <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	7c1b      	ldrb	r3, [r3, #16]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d10d      	bne.n	8008a0e <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80089f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089fa:	f107 020a 	add.w	r2, r7, #10
 80089fe:	4610      	mov	r0, r2
 8008a00:	4798      	blx	r3
 8008a02:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	3301      	adds	r3, #1
 8008a08:	2207      	movs	r2, #7
 8008a0a:	701a      	strb	r2, [r3, #0]
      break;
 8008a0c:	e009      	b.n	8008a22 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8008a0e:	6839      	ldr	r1, [r7, #0]
 8008a10:	6878      	ldr	r0, [r7, #4]
 8008a12:	f000 f9d0 	bl	8008db6 <USBD_CtlError>
      return;
 8008a16:	e020      	b.n	8008a5a <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 8008a18:	6839      	ldr	r1, [r7, #0]
 8008a1a:	6878      	ldr	r0, [r7, #4]
 8008a1c:	f000 f9cb 	bl	8008db6 <USBD_CtlError>
    return;
 8008a20:	e01b      	b.n	8008a5a <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 8008a22:	897b      	ldrh	r3, [r7, #10]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d011      	beq.n	8008a4c <USBD_GetDescriptor+0x1e0>
 8008a28:	683b      	ldr	r3, [r7, #0]
 8008a2a:	88db      	ldrh	r3, [r3, #6]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d00d      	beq.n	8008a4c <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 8008a30:	683b      	ldr	r3, [r7, #0]
 8008a32:	88da      	ldrh	r2, [r3, #6]
 8008a34:	897b      	ldrh	r3, [r7, #10]
 8008a36:	4293      	cmp	r3, r2
 8008a38:	bf28      	it	cs
 8008a3a:	4613      	movcs	r3, r2
 8008a3c:	b29b      	uxth	r3, r3
 8008a3e:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 8008a40:	897b      	ldrh	r3, [r7, #10]
 8008a42:	461a      	mov	r2, r3
 8008a44:	68f9      	ldr	r1, [r7, #12]
 8008a46:	6878      	ldr	r0, [r7, #4]
 8008a48:	f000 fa1f 	bl	8008e8a <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	88db      	ldrh	r3, [r3, #6]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d102      	bne.n	8008a5a <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 8008a54:	6878      	ldr	r0, [r7, #4]
 8008a56:	f000 fa76 	bl	8008f46 <USBD_CtlSendStatus>
  }
}
 8008a5a:	3710      	adds	r7, #16
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	bd80      	pop	{r7, pc}

08008a60 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b084      	sub	sp, #16
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
 8008a68:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008a6a:	683b      	ldr	r3, [r7, #0]
 8008a6c:	889b      	ldrh	r3, [r3, #4]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d130      	bne.n	8008ad4 <USBD_SetAddress+0x74>
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	88db      	ldrh	r3, [r3, #6]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d12c      	bne.n	8008ad4 <USBD_SetAddress+0x74>
 8008a7a:	683b      	ldr	r3, [r7, #0]
 8008a7c:	885b      	ldrh	r3, [r3, #2]
 8008a7e:	2b7f      	cmp	r3, #127	; 0x7f
 8008a80:	d828      	bhi.n	8008ad4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	885b      	ldrh	r3, [r3, #2]
 8008a86:	b2db      	uxtb	r3, r3
 8008a88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a8c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008a94:	2b03      	cmp	r3, #3
 8008a96:	d104      	bne.n	8008aa2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 8008a98:	6839      	ldr	r1, [r7, #0]
 8008a9a:	6878      	ldr	r0, [r7, #4]
 8008a9c:	f000 f98b 	bl	8008db6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008aa0:	e01d      	b.n	8008ade <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	7bfa      	ldrb	r2, [r7, #15]
 8008aa6:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008aaa:	7bfb      	ldrb	r3, [r7, #15]
 8008aac:	4619      	mov	r1, r3
 8008aae:	6878      	ldr	r0, [r7, #4]
 8008ab0:	f000 fe78 	bl	80097a4 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008ab4:	6878      	ldr	r0, [r7, #4]
 8008ab6:	f000 fa46 	bl	8008f46 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008aba:	7bfb      	ldrb	r3, [r7, #15]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d004      	beq.n	8008aca <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	2202      	movs	r2, #2
 8008ac4:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ac8:	e009      	b.n	8008ade <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	2201      	movs	r2, #1
 8008ace:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ad2:	e004      	b.n	8008ade <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008ad4:	6839      	ldr	r1, [r7, #0]
 8008ad6:	6878      	ldr	r0, [r7, #4]
 8008ad8:	f000 f96d 	bl	8008db6 <USBD_CtlError>
  }
}
 8008adc:	bf00      	nop
 8008ade:	bf00      	nop
 8008ae0:	3710      	adds	r7, #16
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	bd80      	pop	{r7, pc}
	...

08008ae8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b082      	sub	sp, #8
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
 8008af0:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	885b      	ldrh	r3, [r3, #2]
 8008af6:	b2da      	uxtb	r2, r3
 8008af8:	4b41      	ldr	r3, [pc, #260]	; (8008c00 <USBD_SetConfig+0x118>)
 8008afa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008afc:	4b40      	ldr	r3, [pc, #256]	; (8008c00 <USBD_SetConfig+0x118>)
 8008afe:	781b      	ldrb	r3, [r3, #0]
 8008b00:	2b01      	cmp	r3, #1
 8008b02:	d904      	bls.n	8008b0e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008b04:	6839      	ldr	r1, [r7, #0]
 8008b06:	6878      	ldr	r0, [r7, #4]
 8008b08:	f000 f955 	bl	8008db6 <USBD_CtlError>
 8008b0c:	e075      	b.n	8008bfa <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008b14:	2b02      	cmp	r3, #2
 8008b16:	d002      	beq.n	8008b1e <USBD_SetConfig+0x36>
 8008b18:	2b03      	cmp	r3, #3
 8008b1a:	d023      	beq.n	8008b64 <USBD_SetConfig+0x7c>
 8008b1c:	e062      	b.n	8008be4 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 8008b1e:	4b38      	ldr	r3, [pc, #224]	; (8008c00 <USBD_SetConfig+0x118>)
 8008b20:	781b      	ldrb	r3, [r3, #0]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d01a      	beq.n	8008b5c <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 8008b26:	4b36      	ldr	r3, [pc, #216]	; (8008c00 <USBD_SetConfig+0x118>)
 8008b28:	781b      	ldrb	r3, [r3, #0]
 8008b2a:	461a      	mov	r2, r3
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	2203      	movs	r2, #3
 8008b34:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008b38:	4b31      	ldr	r3, [pc, #196]	; (8008c00 <USBD_SetConfig+0x118>)
 8008b3a:	781b      	ldrb	r3, [r3, #0]
 8008b3c:	4619      	mov	r1, r3
 8008b3e:	6878      	ldr	r0, [r7, #4]
 8008b40:	f7ff fa5d 	bl	8007ffe <USBD_SetClassConfig>
 8008b44:	4603      	mov	r3, r0
 8008b46:	2b02      	cmp	r3, #2
 8008b48:	d104      	bne.n	8008b54 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 8008b4a:	6839      	ldr	r1, [r7, #0]
 8008b4c:	6878      	ldr	r0, [r7, #4]
 8008b4e:	f000 f932 	bl	8008db6 <USBD_CtlError>
          return;
 8008b52:	e052      	b.n	8008bfa <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 8008b54:	6878      	ldr	r0, [r7, #4]
 8008b56:	f000 f9f6 	bl	8008f46 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8008b5a:	e04e      	b.n	8008bfa <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8008b5c:	6878      	ldr	r0, [r7, #4]
 8008b5e:	f000 f9f2 	bl	8008f46 <USBD_CtlSendStatus>
      break;
 8008b62:	e04a      	b.n	8008bfa <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008b64:	4b26      	ldr	r3, [pc, #152]	; (8008c00 <USBD_SetConfig+0x118>)
 8008b66:	781b      	ldrb	r3, [r3, #0]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d112      	bne.n	8008b92 <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2202      	movs	r2, #2
 8008b70:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 8008b74:	4b22      	ldr	r3, [pc, #136]	; (8008c00 <USBD_SetConfig+0x118>)
 8008b76:	781b      	ldrb	r3, [r3, #0]
 8008b78:	461a      	mov	r2, r3
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 8008b7e:	4b20      	ldr	r3, [pc, #128]	; (8008c00 <USBD_SetConfig+0x118>)
 8008b80:	781b      	ldrb	r3, [r3, #0]
 8008b82:	4619      	mov	r1, r3
 8008b84:	6878      	ldr	r0, [r7, #4]
 8008b86:	f7ff fa59 	bl	800803c <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 8008b8a:	6878      	ldr	r0, [r7, #4]
 8008b8c:	f000 f9db 	bl	8008f46 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8008b90:	e033      	b.n	8008bfa <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 8008b92:	4b1b      	ldr	r3, [pc, #108]	; (8008c00 <USBD_SetConfig+0x118>)
 8008b94:	781b      	ldrb	r3, [r3, #0]
 8008b96:	461a      	mov	r2, r3
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	685b      	ldr	r3, [r3, #4]
 8008b9c:	429a      	cmp	r2, r3
 8008b9e:	d01d      	beq.n	8008bdc <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	685b      	ldr	r3, [r3, #4]
 8008ba4:	b2db      	uxtb	r3, r3
 8008ba6:	4619      	mov	r1, r3
 8008ba8:	6878      	ldr	r0, [r7, #4]
 8008baa:	f7ff fa47 	bl	800803c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008bae:	4b14      	ldr	r3, [pc, #80]	; (8008c00 <USBD_SetConfig+0x118>)
 8008bb0:	781b      	ldrb	r3, [r3, #0]
 8008bb2:	461a      	mov	r2, r3
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008bb8:	4b11      	ldr	r3, [pc, #68]	; (8008c00 <USBD_SetConfig+0x118>)
 8008bba:	781b      	ldrb	r3, [r3, #0]
 8008bbc:	4619      	mov	r1, r3
 8008bbe:	6878      	ldr	r0, [r7, #4]
 8008bc0:	f7ff fa1d 	bl	8007ffe <USBD_SetClassConfig>
 8008bc4:	4603      	mov	r3, r0
 8008bc6:	2b02      	cmp	r3, #2
 8008bc8:	d104      	bne.n	8008bd4 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 8008bca:	6839      	ldr	r1, [r7, #0]
 8008bcc:	6878      	ldr	r0, [r7, #4]
 8008bce:	f000 f8f2 	bl	8008db6 <USBD_CtlError>
          return;
 8008bd2:	e012      	b.n	8008bfa <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8008bd4:	6878      	ldr	r0, [r7, #4]
 8008bd6:	f000 f9b6 	bl	8008f46 <USBD_CtlSendStatus>
      break;
 8008bda:	e00e      	b.n	8008bfa <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8008bdc:	6878      	ldr	r0, [r7, #4]
 8008bde:	f000 f9b2 	bl	8008f46 <USBD_CtlSendStatus>
      break;
 8008be2:	e00a      	b.n	8008bfa <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 8008be4:	6839      	ldr	r1, [r7, #0]
 8008be6:	6878      	ldr	r0, [r7, #4]
 8008be8:	f000 f8e5 	bl	8008db6 <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 8008bec:	4b04      	ldr	r3, [pc, #16]	; (8008c00 <USBD_SetConfig+0x118>)
 8008bee:	781b      	ldrb	r3, [r3, #0]
 8008bf0:	4619      	mov	r1, r3
 8008bf2:	6878      	ldr	r0, [r7, #4]
 8008bf4:	f7ff fa22 	bl	800803c <USBD_ClrClassConfig>
      break;
 8008bf8:	bf00      	nop
    }
  }
}
 8008bfa:	3708      	adds	r7, #8
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	bd80      	pop	{r7, pc}
 8008c00:	2000024c 	.word	0x2000024c

08008c04 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b082      	sub	sp, #8
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
 8008c0c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008c0e:	683b      	ldr	r3, [r7, #0]
 8008c10:	88db      	ldrh	r3, [r3, #6]
 8008c12:	2b01      	cmp	r3, #1
 8008c14:	d004      	beq.n	8008c20 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 8008c16:	6839      	ldr	r1, [r7, #0]
 8008c18:	6878      	ldr	r0, [r7, #4]
 8008c1a:	f000 f8cc 	bl	8008db6 <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 8008c1e:	e022      	b.n	8008c66 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008c26:	2b02      	cmp	r3, #2
 8008c28:	dc02      	bgt.n	8008c30 <USBD_GetConfig+0x2c>
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	dc03      	bgt.n	8008c36 <USBD_GetConfig+0x32>
 8008c2e:	e015      	b.n	8008c5c <USBD_GetConfig+0x58>
 8008c30:	2b03      	cmp	r3, #3
 8008c32:	d00b      	beq.n	8008c4c <USBD_GetConfig+0x48>
 8008c34:	e012      	b.n	8008c5c <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	2200      	movs	r2, #0
 8008c3a:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	3308      	adds	r3, #8
 8008c40:	2201      	movs	r2, #1
 8008c42:	4619      	mov	r1, r3
 8008c44:	6878      	ldr	r0, [r7, #4]
 8008c46:	f000 f920 	bl	8008e8a <USBD_CtlSendData>
      break;
 8008c4a:	e00c      	b.n	8008c66 <USBD_GetConfig+0x62>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	3304      	adds	r3, #4
 8008c50:	2201      	movs	r2, #1
 8008c52:	4619      	mov	r1, r3
 8008c54:	6878      	ldr	r0, [r7, #4]
 8008c56:	f000 f918 	bl	8008e8a <USBD_CtlSendData>
      break;
 8008c5a:	e004      	b.n	8008c66 <USBD_GetConfig+0x62>
      USBD_CtlError(pdev , req);
 8008c5c:	6839      	ldr	r1, [r7, #0]
 8008c5e:	6878      	ldr	r0, [r7, #4]
 8008c60:	f000 f8a9 	bl	8008db6 <USBD_CtlError>
      break;
 8008c64:	bf00      	nop
}
 8008c66:	bf00      	nop
 8008c68:	3708      	adds	r7, #8
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	bd80      	pop	{r7, pc}

08008c6e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c6e:	b580      	push	{r7, lr}
 8008c70:	b082      	sub	sp, #8
 8008c72:	af00      	add	r7, sp, #0
 8008c74:	6078      	str	r0, [r7, #4]
 8008c76:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008c7e:	3b01      	subs	r3, #1
 8008c80:	2b02      	cmp	r3, #2
 8008c82:	d81e      	bhi.n	8008cc2 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 8008c84:	683b      	ldr	r3, [r7, #0]
 8008c86:	88db      	ldrh	r3, [r3, #6]
 8008c88:	2b02      	cmp	r3, #2
 8008c8a:	d004      	beq.n	8008c96 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8008c8c:	6839      	ldr	r1, [r7, #0]
 8008c8e:	6878      	ldr	r0, [r7, #4]
 8008c90:	f000 f891 	bl	8008db6 <USBD_CtlError>
      break;
 8008c94:	e01a      	b.n	8008ccc <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	2201      	movs	r2, #1
 8008c9a:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d005      	beq.n	8008cb2 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	68db      	ldr	r3, [r3, #12]
 8008caa:	f043 0202 	orr.w	r2, r3, #2
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	330c      	adds	r3, #12
 8008cb6:	2202      	movs	r2, #2
 8008cb8:	4619      	mov	r1, r3
 8008cba:	6878      	ldr	r0, [r7, #4]
 8008cbc:	f000 f8e5 	bl	8008e8a <USBD_CtlSendData>
    break;
 8008cc0:	e004      	b.n	8008ccc <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 8008cc2:	6839      	ldr	r1, [r7, #0]
 8008cc4:	6878      	ldr	r0, [r7, #4]
 8008cc6:	f000 f876 	bl	8008db6 <USBD_CtlError>
    break;
 8008cca:	bf00      	nop
  }
}
 8008ccc:	bf00      	nop
 8008cce:	3708      	adds	r7, #8
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	bd80      	pop	{r7, pc}

08008cd4 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	b082      	sub	sp, #8
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
 8008cdc:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008cde:	683b      	ldr	r3, [r7, #0]
 8008ce0:	885b      	ldrh	r3, [r3, #2]
 8008ce2:	2b01      	cmp	r3, #1
 8008ce4:	d106      	bne.n	8008cf4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	2201      	movs	r2, #1
 8008cea:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 8008cee:	6878      	ldr	r0, [r7, #4]
 8008cf0:	f000 f929 	bl	8008f46 <USBD_CtlSendStatus>
  }

}
 8008cf4:	bf00      	nop
 8008cf6:	3708      	adds	r7, #8
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	bd80      	pop	{r7, pc}

08008cfc <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b082      	sub	sp, #8
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
 8008d04:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008d0c:	3b01      	subs	r3, #1
 8008d0e:	2b02      	cmp	r3, #2
 8008d10:	d80b      	bhi.n	8008d2a <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008d12:	683b      	ldr	r3, [r7, #0]
 8008d14:	885b      	ldrh	r3, [r3, #2]
 8008d16:	2b01      	cmp	r3, #1
 8008d18:	d10c      	bne.n	8008d34 <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 8008d22:	6878      	ldr	r0, [r7, #4]
 8008d24:	f000 f90f 	bl	8008f46 <USBD_CtlSendStatus>
    }
    break;
 8008d28:	e004      	b.n	8008d34 <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 8008d2a:	6839      	ldr	r1, [r7, #0]
 8008d2c:	6878      	ldr	r0, [r7, #4]
 8008d2e:	f000 f842 	bl	8008db6 <USBD_CtlError>
    break;
 8008d32:	e000      	b.n	8008d36 <USBD_ClrFeature+0x3a>
    break;
 8008d34:	bf00      	nop
  }
}
 8008d36:	bf00      	nop
 8008d38:	3708      	adds	r7, #8
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	bd80      	pop	{r7, pc}

08008d3e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008d3e:	b480      	push	{r7}
 8008d40:	b083      	sub	sp, #12
 8008d42:	af00      	add	r7, sp, #0
 8008d44:	6078      	str	r0, [r7, #4]
 8008d46:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 8008d48:	683b      	ldr	r3, [r7, #0]
 8008d4a:	781a      	ldrb	r2, [r3, #0]
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8008d50:	683b      	ldr	r3, [r7, #0]
 8008d52:	785a      	ldrb	r2, [r3, #1]
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8008d58:	683b      	ldr	r3, [r7, #0]
 8008d5a:	3302      	adds	r3, #2
 8008d5c:	781b      	ldrb	r3, [r3, #0]
 8008d5e:	b29a      	uxth	r2, r3
 8008d60:	683b      	ldr	r3, [r7, #0]
 8008d62:	3303      	adds	r3, #3
 8008d64:	781b      	ldrb	r3, [r3, #0]
 8008d66:	b29b      	uxth	r3, r3
 8008d68:	021b      	lsls	r3, r3, #8
 8008d6a:	b29b      	uxth	r3, r3
 8008d6c:	4413      	add	r3, r2
 8008d6e:	b29a      	uxth	r2, r3
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8008d74:	683b      	ldr	r3, [r7, #0]
 8008d76:	3304      	adds	r3, #4
 8008d78:	781b      	ldrb	r3, [r3, #0]
 8008d7a:	b29a      	uxth	r2, r3
 8008d7c:	683b      	ldr	r3, [r7, #0]
 8008d7e:	3305      	adds	r3, #5
 8008d80:	781b      	ldrb	r3, [r3, #0]
 8008d82:	b29b      	uxth	r3, r3
 8008d84:	021b      	lsls	r3, r3, #8
 8008d86:	b29b      	uxth	r3, r3
 8008d88:	4413      	add	r3, r2
 8008d8a:	b29a      	uxth	r2, r3
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8008d90:	683b      	ldr	r3, [r7, #0]
 8008d92:	3306      	adds	r3, #6
 8008d94:	781b      	ldrb	r3, [r3, #0]
 8008d96:	b29a      	uxth	r2, r3
 8008d98:	683b      	ldr	r3, [r7, #0]
 8008d9a:	3307      	adds	r3, #7
 8008d9c:	781b      	ldrb	r3, [r3, #0]
 8008d9e:	b29b      	uxth	r3, r3
 8008da0:	021b      	lsls	r3, r3, #8
 8008da2:	b29b      	uxth	r3, r3
 8008da4:	4413      	add	r3, r2
 8008da6:	b29a      	uxth	r2, r3
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	80da      	strh	r2, [r3, #6]

}
 8008dac:	bf00      	nop
 8008dae:	370c      	adds	r7, #12
 8008db0:	46bd      	mov	sp, r7
 8008db2:	bc80      	pop	{r7}
 8008db4:	4770      	bx	lr

08008db6 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8008db6:	b580      	push	{r7, lr}
 8008db8:	b082      	sub	sp, #8
 8008dba:	af00      	add	r7, sp, #0
 8008dbc:	6078      	str	r0, [r7, #4]
 8008dbe:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 8008dc0:	2180      	movs	r1, #128	; 0x80
 8008dc2:	6878      	ldr	r0, [r7, #4]
 8008dc4:	f000 fc84 	bl	80096d0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8008dc8:	2100      	movs	r1, #0
 8008dca:	6878      	ldr	r0, [r7, #4]
 8008dcc:	f000 fc80 	bl	80096d0 <USBD_LL_StallEP>
}
 8008dd0:	bf00      	nop
 8008dd2:	3708      	adds	r7, #8
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	bd80      	pop	{r7, pc}

08008dd8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b086      	sub	sp, #24
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	60f8      	str	r0, [r7, #12]
 8008de0:	60b9      	str	r1, [r7, #8]
 8008de2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008de4:	2300      	movs	r3, #0
 8008de6:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d032      	beq.n	8008e54 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008dee:	68f8      	ldr	r0, [r7, #12]
 8008df0:	f000 f834 	bl	8008e5c <USBD_GetLen>
 8008df4:	4603      	mov	r3, r0
 8008df6:	3301      	adds	r3, #1
 8008df8:	b29b      	uxth	r3, r3
 8008dfa:	005b      	lsls	r3, r3, #1
 8008dfc:	b29a      	uxth	r2, r3
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008e02:	7dfb      	ldrb	r3, [r7, #23]
 8008e04:	1c5a      	adds	r2, r3, #1
 8008e06:	75fa      	strb	r2, [r7, #23]
 8008e08:	461a      	mov	r2, r3
 8008e0a:	68bb      	ldr	r3, [r7, #8]
 8008e0c:	4413      	add	r3, r2
 8008e0e:	687a      	ldr	r2, [r7, #4]
 8008e10:	7812      	ldrb	r2, [r2, #0]
 8008e12:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008e14:	7dfb      	ldrb	r3, [r7, #23]
 8008e16:	1c5a      	adds	r2, r3, #1
 8008e18:	75fa      	strb	r2, [r7, #23]
 8008e1a:	461a      	mov	r2, r3
 8008e1c:	68bb      	ldr	r3, [r7, #8]
 8008e1e:	4413      	add	r3, r2
 8008e20:	2203      	movs	r2, #3
 8008e22:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008e24:	e012      	b.n	8008e4c <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	1c5a      	adds	r2, r3, #1
 8008e2a:	60fa      	str	r2, [r7, #12]
 8008e2c:	7dfa      	ldrb	r2, [r7, #23]
 8008e2e:	1c51      	adds	r1, r2, #1
 8008e30:	75f9      	strb	r1, [r7, #23]
 8008e32:	4611      	mov	r1, r2
 8008e34:	68ba      	ldr	r2, [r7, #8]
 8008e36:	440a      	add	r2, r1
 8008e38:	781b      	ldrb	r3, [r3, #0]
 8008e3a:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008e3c:	7dfb      	ldrb	r3, [r7, #23]
 8008e3e:	1c5a      	adds	r2, r3, #1
 8008e40:	75fa      	strb	r2, [r7, #23]
 8008e42:	461a      	mov	r2, r3
 8008e44:	68bb      	ldr	r3, [r7, #8]
 8008e46:	4413      	add	r3, r2
 8008e48:	2200      	movs	r2, #0
 8008e4a:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	781b      	ldrb	r3, [r3, #0]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d1e8      	bne.n	8008e26 <USBD_GetString+0x4e>
    }
  }
}
 8008e54:	bf00      	nop
 8008e56:	3718      	adds	r7, #24
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	bd80      	pop	{r7, pc}

08008e5c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008e5c:	b480      	push	{r7}
 8008e5e:	b085      	sub	sp, #20
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 8008e64:	2300      	movs	r3, #0
 8008e66:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 8008e68:	e005      	b.n	8008e76 <USBD_GetLen+0x1a>
    {
        len++;
 8008e6a:	7bfb      	ldrb	r3, [r7, #15]
 8008e6c:	3301      	adds	r3, #1
 8008e6e:	73fb      	strb	r3, [r7, #15]
        buf++;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	3301      	adds	r3, #1
 8008e74:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	781b      	ldrb	r3, [r3, #0]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d1f5      	bne.n	8008e6a <USBD_GetLen+0xe>
    }

    return len;
 8008e7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e80:	4618      	mov	r0, r3
 8008e82:	3714      	adds	r7, #20
 8008e84:	46bd      	mov	sp, r7
 8008e86:	bc80      	pop	{r7}
 8008e88:	4770      	bx	lr

08008e8a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 8008e8a:	b580      	push	{r7, lr}
 8008e8c:	b084      	sub	sp, #16
 8008e8e:	af00      	add	r7, sp, #0
 8008e90:	60f8      	str	r0, [r7, #12]
 8008e92:	60b9      	str	r1, [r7, #8]
 8008e94:	4613      	mov	r3, r2
 8008e96:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	2202      	movs	r2, #2
 8008e9c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 8008ea0:	88fa      	ldrh	r2, [r7, #6]
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008ea6:	88fa      	ldrh	r2, [r7, #6]
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8008eac:	88fb      	ldrh	r3, [r7, #6]
 8008eae:	68ba      	ldr	r2, [r7, #8]
 8008eb0:	2100      	movs	r1, #0
 8008eb2:	68f8      	ldr	r0, [r7, #12]
 8008eb4:	f000 fc95 	bl	80097e2 <USBD_LL_Transmit>

  return USBD_OK;
 8008eb8:	2300      	movs	r3, #0
}
 8008eba:	4618      	mov	r0, r3
 8008ebc:	3710      	adds	r7, #16
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	bd80      	pop	{r7, pc}

08008ec2 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 8008ec2:	b580      	push	{r7, lr}
 8008ec4:	b084      	sub	sp, #16
 8008ec6:	af00      	add	r7, sp, #0
 8008ec8:	60f8      	str	r0, [r7, #12]
 8008eca:	60b9      	str	r1, [r7, #8]
 8008ecc:	4613      	mov	r3, r2
 8008ece:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8008ed0:	88fb      	ldrh	r3, [r7, #6]
 8008ed2:	68ba      	ldr	r2, [r7, #8]
 8008ed4:	2100      	movs	r1, #0
 8008ed6:	68f8      	ldr	r0, [r7, #12]
 8008ed8:	f000 fc83 	bl	80097e2 <USBD_LL_Transmit>

  return USBD_OK;
 8008edc:	2300      	movs	r3, #0
}
 8008ede:	4618      	mov	r0, r3
 8008ee0:	3710      	adds	r7, #16
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	bd80      	pop	{r7, pc}

08008ee6 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 8008ee6:	b580      	push	{r7, lr}
 8008ee8:	b084      	sub	sp, #16
 8008eea:	af00      	add	r7, sp, #0
 8008eec:	60f8      	str	r0, [r7, #12]
 8008eee:	60b9      	str	r1, [r7, #8]
 8008ef0:	4613      	mov	r3, r2
 8008ef2:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	2203      	movs	r2, #3
 8008ef8:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 8008efc:	88fa      	ldrh	r2, [r7, #6]
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 8008f04:	88fa      	ldrh	r2, [r7, #6]
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 8008f0c:	88fb      	ldrh	r3, [r7, #6]
 8008f0e:	68ba      	ldr	r2, [r7, #8]
 8008f10:	2100      	movs	r1, #0
 8008f12:	68f8      	ldr	r0, [r7, #12]
 8008f14:	f000 fc88 	bl	8009828 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008f18:	2300      	movs	r3, #0
}
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	3710      	adds	r7, #16
 8008f1e:	46bd      	mov	sp, r7
 8008f20:	bd80      	pop	{r7, pc}

08008f22 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 8008f22:	b580      	push	{r7, lr}
 8008f24:	b084      	sub	sp, #16
 8008f26:	af00      	add	r7, sp, #0
 8008f28:	60f8      	str	r0, [r7, #12]
 8008f2a:	60b9      	str	r1, [r7, #8]
 8008f2c:	4613      	mov	r3, r2
 8008f2e:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008f30:	88fb      	ldrh	r3, [r7, #6]
 8008f32:	68ba      	ldr	r2, [r7, #8]
 8008f34:	2100      	movs	r1, #0
 8008f36:	68f8      	ldr	r0, [r7, #12]
 8008f38:	f000 fc76 	bl	8009828 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008f3c:	2300      	movs	r3, #0
}
 8008f3e:	4618      	mov	r0, r3
 8008f40:	3710      	adds	r7, #16
 8008f42:	46bd      	mov	sp, r7
 8008f44:	bd80      	pop	{r7, pc}

08008f46 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 8008f46:	b580      	push	{r7, lr}
 8008f48:	b082      	sub	sp, #8
 8008f4a:	af00      	add	r7, sp, #0
 8008f4c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	2204      	movs	r2, #4
 8008f52:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008f56:	2300      	movs	r3, #0
 8008f58:	2200      	movs	r2, #0
 8008f5a:	2100      	movs	r1, #0
 8008f5c:	6878      	ldr	r0, [r7, #4]
 8008f5e:	f000 fc40 	bl	80097e2 <USBD_LL_Transmit>

  return USBD_OK;
 8008f62:	2300      	movs	r3, #0
}
 8008f64:	4618      	mov	r0, r3
 8008f66:	3708      	adds	r7, #8
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	bd80      	pop	{r7, pc}

08008f6c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b082      	sub	sp, #8
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2205      	movs	r2, #5
 8008f78:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	2200      	movs	r2, #0
 8008f80:	2100      	movs	r1, #0
 8008f82:	6878      	ldr	r0, [r7, #4]
 8008f84:	f000 fc50 	bl	8009828 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008f88:	2300      	movs	r3, #0
}
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	3708      	adds	r7, #8
 8008f8e:	46bd      	mov	sp, r7
 8008f90:	bd80      	pop	{r7, pc}
	...

08008f94 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008f98:	2200      	movs	r2, #0
 8008f9a:	4912      	ldr	r1, [pc, #72]	; (8008fe4 <MX_USB_DEVICE_Init+0x50>)
 8008f9c:	4812      	ldr	r0, [pc, #72]	; (8008fe8 <MX_USB_DEVICE_Init+0x54>)
 8008f9e:	f7fe ffd4 	bl	8007f4a <USBD_Init>
 8008fa2:	4603      	mov	r3, r0
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d001      	beq.n	8008fac <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008fa8:	f7f7 fd36 	bl	8000a18 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008fac:	490f      	ldr	r1, [pc, #60]	; (8008fec <MX_USB_DEVICE_Init+0x58>)
 8008fae:	480e      	ldr	r0, [pc, #56]	; (8008fe8 <MX_USB_DEVICE_Init+0x54>)
 8008fb0:	f7fe fff6 	bl	8007fa0 <USBD_RegisterClass>
 8008fb4:	4603      	mov	r3, r0
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d001      	beq.n	8008fbe <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008fba:	f7f7 fd2d 	bl	8000a18 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008fbe:	490c      	ldr	r1, [pc, #48]	; (8008ff0 <MX_USB_DEVICE_Init+0x5c>)
 8008fc0:	4809      	ldr	r0, [pc, #36]	; (8008fe8 <MX_USB_DEVICE_Init+0x54>)
 8008fc2:	f7fe ff27 	bl	8007e14 <USBD_CDC_RegisterInterface>
 8008fc6:	4603      	mov	r3, r0
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d001      	beq.n	8008fd0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008fcc:	f7f7 fd24 	bl	8000a18 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008fd0:	4805      	ldr	r0, [pc, #20]	; (8008fe8 <MX_USB_DEVICE_Init+0x54>)
 8008fd2:	f7fe fffe 	bl	8007fd2 <USBD_Start>
 8008fd6:	4603      	mov	r3, r0
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d001      	beq.n	8008fe0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008fdc:	f7f7 fd1c 	bl	8000a18 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008fe0:	bf00      	nop
 8008fe2:	bd80      	pop	{r7, pc}
 8008fe4:	2000012c 	.word	0x2000012c
 8008fe8:	20000250 	.word	0x20000250
 8008fec:	20000018 	.word	0x20000018
 8008ff0:	2000011c 	.word	0x2000011c

08008ff4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	4905      	ldr	r1, [pc, #20]	; (8009010 <CDC_Init_FS+0x1c>)
 8008ffc:	4805      	ldr	r0, [pc, #20]	; (8009014 <CDC_Init_FS+0x20>)
 8008ffe:	f7fe ff1f 	bl	8007e40 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009002:	4905      	ldr	r1, [pc, #20]	; (8009018 <CDC_Init_FS+0x24>)
 8009004:	4803      	ldr	r0, [pc, #12]	; (8009014 <CDC_Init_FS+0x20>)
 8009006:	f7fe ff34 	bl	8007e72 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800900a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800900c:	4618      	mov	r0, r3
 800900e:	bd80      	pop	{r7, pc}
 8009010:	200008d4 	.word	0x200008d4
 8009014:	20000250 	.word	0x20000250
 8009018:	200004ec 	.word	0x200004ec

0800901c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800901c:	b480      	push	{r7}
 800901e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009020:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009022:	4618      	mov	r0, r3
 8009024:	46bd      	mov	sp, r7
 8009026:	bc80      	pop	{r7}
 8009028:	4770      	bx	lr
	...

0800902c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800902c:	b480      	push	{r7}
 800902e:	b083      	sub	sp, #12
 8009030:	af00      	add	r7, sp, #0
 8009032:	4603      	mov	r3, r0
 8009034:	6039      	str	r1, [r7, #0]
 8009036:	71fb      	strb	r3, [r7, #7]
 8009038:	4613      	mov	r3, r2
 800903a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800903c:	79fb      	ldrb	r3, [r7, #7]
 800903e:	2b23      	cmp	r3, #35	; 0x23
 8009040:	d84a      	bhi.n	80090d8 <CDC_Control_FS+0xac>
 8009042:	a201      	add	r2, pc, #4	; (adr r2, 8009048 <CDC_Control_FS+0x1c>)
 8009044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009048:	080090d9 	.word	0x080090d9
 800904c:	080090d9 	.word	0x080090d9
 8009050:	080090d9 	.word	0x080090d9
 8009054:	080090d9 	.word	0x080090d9
 8009058:	080090d9 	.word	0x080090d9
 800905c:	080090d9 	.word	0x080090d9
 8009060:	080090d9 	.word	0x080090d9
 8009064:	080090d9 	.word	0x080090d9
 8009068:	080090d9 	.word	0x080090d9
 800906c:	080090d9 	.word	0x080090d9
 8009070:	080090d9 	.word	0x080090d9
 8009074:	080090d9 	.word	0x080090d9
 8009078:	080090d9 	.word	0x080090d9
 800907c:	080090d9 	.word	0x080090d9
 8009080:	080090d9 	.word	0x080090d9
 8009084:	080090d9 	.word	0x080090d9
 8009088:	080090d9 	.word	0x080090d9
 800908c:	080090d9 	.word	0x080090d9
 8009090:	080090d9 	.word	0x080090d9
 8009094:	080090d9 	.word	0x080090d9
 8009098:	080090d9 	.word	0x080090d9
 800909c:	080090d9 	.word	0x080090d9
 80090a0:	080090d9 	.word	0x080090d9
 80090a4:	080090d9 	.word	0x080090d9
 80090a8:	080090d9 	.word	0x080090d9
 80090ac:	080090d9 	.word	0x080090d9
 80090b0:	080090d9 	.word	0x080090d9
 80090b4:	080090d9 	.word	0x080090d9
 80090b8:	080090d9 	.word	0x080090d9
 80090bc:	080090d9 	.word	0x080090d9
 80090c0:	080090d9 	.word	0x080090d9
 80090c4:	080090d9 	.word	0x080090d9
 80090c8:	080090d9 	.word	0x080090d9
 80090cc:	080090d9 	.word	0x080090d9
 80090d0:	080090d9 	.word	0x080090d9
 80090d4:	080090d9 	.word	0x080090d9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80090d8:	bf00      	nop
  }

  return (USBD_OK);
 80090da:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80090dc:	4618      	mov	r0, r3
 80090de:	370c      	adds	r7, #12
 80090e0:	46bd      	mov	sp, r7
 80090e2:	bc80      	pop	{r7}
 80090e4:	4770      	bx	lr
 80090e6:	bf00      	nop

080090e8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b084      	sub	sp, #16
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
 80090f0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80090f2:	6879      	ldr	r1, [r7, #4]
 80090f4:	480e      	ldr	r0, [pc, #56]	; (8009130 <CDC_Receive_FS+0x48>)
 80090f6:	f7fe febc 	bl	8007e72 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80090fa:	480d      	ldr	r0, [pc, #52]	; (8009130 <CDC_Receive_FS+0x48>)
 80090fc:	f7fe fefb 	bl	8007ef6 <USBD_CDC_ReceivePacket>
  //ln = *Len;
   for(uint32_t i = 0; i< *Len; i++){
 8009100:	2300      	movs	r3, #0
 8009102:	60fb      	str	r3, [r7, #12]
 8009104:	e009      	b.n	800911a <CDC_Receive_FS+0x32>
 	  //byte = Buf[i];
 	  usb_recv(Buf[i]);
 8009106:	687a      	ldr	r2, [r7, #4]
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	4413      	add	r3, r2
 800910c:	781b      	ldrb	r3, [r3, #0]
 800910e:	4618      	mov	r0, r3
 8009110:	f000 ff76 	bl	800a000 <usb_recv>
   for(uint32_t i = 0; i< *Len; i++){
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	3301      	adds	r3, #1
 8009118:	60fb      	str	r3, [r7, #12]
 800911a:	683b      	ldr	r3, [r7, #0]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	68fa      	ldr	r2, [r7, #12]
 8009120:	429a      	cmp	r2, r3
 8009122:	d3f0      	bcc.n	8009106 <CDC_Receive_FS+0x1e>
   }

   return (USBD_OK);
 8009124:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009126:	4618      	mov	r0, r3
 8009128:	3710      	adds	r7, #16
 800912a:	46bd      	mov	sp, r7
 800912c:	bd80      	pop	{r7, pc}
 800912e:	bf00      	nop
 8009130:	20000250 	.word	0x20000250

08009134 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009134:	b580      	push	{r7, lr}
 8009136:	b084      	sub	sp, #16
 8009138:	af00      	add	r7, sp, #0
 800913a:	6078      	str	r0, [r7, #4]
 800913c:	460b      	mov	r3, r1
 800913e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009140:	2300      	movs	r3, #0
 8009142:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009144:	4b0d      	ldr	r3, [pc, #52]	; (800917c <CDC_Transmit_FS+0x48>)
 8009146:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800914a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800914c:	68bb      	ldr	r3, [r7, #8]
 800914e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009152:	2b00      	cmp	r3, #0
 8009154:	d001      	beq.n	800915a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009156:	2301      	movs	r3, #1
 8009158:	e00b      	b.n	8009172 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800915a:	887b      	ldrh	r3, [r7, #2]
 800915c:	461a      	mov	r2, r3
 800915e:	6879      	ldr	r1, [r7, #4]
 8009160:	4806      	ldr	r0, [pc, #24]	; (800917c <CDC_Transmit_FS+0x48>)
 8009162:	f7fe fe6d 	bl	8007e40 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009166:	4805      	ldr	r0, [pc, #20]	; (800917c <CDC_Transmit_FS+0x48>)
 8009168:	f7fe fe96 	bl	8007e98 <USBD_CDC_TransmitPacket>
 800916c:	4603      	mov	r3, r0
 800916e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009170:	7bfb      	ldrb	r3, [r7, #15]
}
 8009172:	4618      	mov	r0, r3
 8009174:	3710      	adds	r7, #16
 8009176:	46bd      	mov	sp, r7
 8009178:	bd80      	pop	{r7, pc}
 800917a:	bf00      	nop
 800917c:	20000250 	.word	0x20000250

08009180 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009180:	b480      	push	{r7}
 8009182:	b083      	sub	sp, #12
 8009184:	af00      	add	r7, sp, #0
 8009186:	4603      	mov	r3, r0
 8009188:	6039      	str	r1, [r7, #0]
 800918a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800918c:	683b      	ldr	r3, [r7, #0]
 800918e:	2212      	movs	r2, #18
 8009190:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009192:	4b03      	ldr	r3, [pc, #12]	; (80091a0 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009194:	4618      	mov	r0, r3
 8009196:	370c      	adds	r7, #12
 8009198:	46bd      	mov	sp, r7
 800919a:	bc80      	pop	{r7}
 800919c:	4770      	bx	lr
 800919e:	bf00      	nop
 80091a0:	20000148 	.word	0x20000148

080091a4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80091a4:	b480      	push	{r7}
 80091a6:	b083      	sub	sp, #12
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	4603      	mov	r3, r0
 80091ac:	6039      	str	r1, [r7, #0]
 80091ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80091b0:	683b      	ldr	r3, [r7, #0]
 80091b2:	2204      	movs	r2, #4
 80091b4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80091b6:	4b03      	ldr	r3, [pc, #12]	; (80091c4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80091b8:	4618      	mov	r0, r3
 80091ba:	370c      	adds	r7, #12
 80091bc:	46bd      	mov	sp, r7
 80091be:	bc80      	pop	{r7}
 80091c0:	4770      	bx	lr
 80091c2:	bf00      	nop
 80091c4:	2000015c 	.word	0x2000015c

080091c8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80091c8:	b580      	push	{r7, lr}
 80091ca:	b082      	sub	sp, #8
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	4603      	mov	r3, r0
 80091d0:	6039      	str	r1, [r7, #0]
 80091d2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80091d4:	79fb      	ldrb	r3, [r7, #7]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d105      	bne.n	80091e6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80091da:	683a      	ldr	r2, [r7, #0]
 80091dc:	4907      	ldr	r1, [pc, #28]	; (80091fc <USBD_FS_ProductStrDescriptor+0x34>)
 80091de:	4808      	ldr	r0, [pc, #32]	; (8009200 <USBD_FS_ProductStrDescriptor+0x38>)
 80091e0:	f7ff fdfa 	bl	8008dd8 <USBD_GetString>
 80091e4:	e004      	b.n	80091f0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80091e6:	683a      	ldr	r2, [r7, #0]
 80091e8:	4904      	ldr	r1, [pc, #16]	; (80091fc <USBD_FS_ProductStrDescriptor+0x34>)
 80091ea:	4805      	ldr	r0, [pc, #20]	; (8009200 <USBD_FS_ProductStrDescriptor+0x38>)
 80091ec:	f7ff fdf4 	bl	8008dd8 <USBD_GetString>
  }
  return USBD_StrDesc;
 80091f0:	4b02      	ldr	r3, [pc, #8]	; (80091fc <USBD_FS_ProductStrDescriptor+0x34>)
}
 80091f2:	4618      	mov	r0, r3
 80091f4:	3708      	adds	r7, #8
 80091f6:	46bd      	mov	sp, r7
 80091f8:	bd80      	pop	{r7, pc}
 80091fa:	bf00      	nop
 80091fc:	20000cbc 	.word	0x20000cbc
 8009200:	0800a2c8 	.word	0x0800a2c8

08009204 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009204:	b580      	push	{r7, lr}
 8009206:	b082      	sub	sp, #8
 8009208:	af00      	add	r7, sp, #0
 800920a:	4603      	mov	r3, r0
 800920c:	6039      	str	r1, [r7, #0]
 800920e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009210:	683a      	ldr	r2, [r7, #0]
 8009212:	4904      	ldr	r1, [pc, #16]	; (8009224 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009214:	4804      	ldr	r0, [pc, #16]	; (8009228 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009216:	f7ff fddf 	bl	8008dd8 <USBD_GetString>
  return USBD_StrDesc;
 800921a:	4b02      	ldr	r3, [pc, #8]	; (8009224 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800921c:	4618      	mov	r0, r3
 800921e:	3708      	adds	r7, #8
 8009220:	46bd      	mov	sp, r7
 8009222:	bd80      	pop	{r7, pc}
 8009224:	20000cbc 	.word	0x20000cbc
 8009228:	0800a2e0 	.word	0x0800a2e0

0800922c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800922c:	b580      	push	{r7, lr}
 800922e:	b082      	sub	sp, #8
 8009230:	af00      	add	r7, sp, #0
 8009232:	4603      	mov	r3, r0
 8009234:	6039      	str	r1, [r7, #0]
 8009236:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009238:	683b      	ldr	r3, [r7, #0]
 800923a:	221a      	movs	r2, #26
 800923c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800923e:	f000 f843 	bl	80092c8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009242:	4b02      	ldr	r3, [pc, #8]	; (800924c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009244:	4618      	mov	r0, r3
 8009246:	3708      	adds	r7, #8
 8009248:	46bd      	mov	sp, r7
 800924a:	bd80      	pop	{r7, pc}
 800924c:	20000160 	.word	0x20000160

08009250 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009250:	b580      	push	{r7, lr}
 8009252:	b082      	sub	sp, #8
 8009254:	af00      	add	r7, sp, #0
 8009256:	4603      	mov	r3, r0
 8009258:	6039      	str	r1, [r7, #0]
 800925a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800925c:	79fb      	ldrb	r3, [r7, #7]
 800925e:	2b00      	cmp	r3, #0
 8009260:	d105      	bne.n	800926e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009262:	683a      	ldr	r2, [r7, #0]
 8009264:	4907      	ldr	r1, [pc, #28]	; (8009284 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009266:	4808      	ldr	r0, [pc, #32]	; (8009288 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009268:	f7ff fdb6 	bl	8008dd8 <USBD_GetString>
 800926c:	e004      	b.n	8009278 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800926e:	683a      	ldr	r2, [r7, #0]
 8009270:	4904      	ldr	r1, [pc, #16]	; (8009284 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009272:	4805      	ldr	r0, [pc, #20]	; (8009288 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009274:	f7ff fdb0 	bl	8008dd8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009278:	4b02      	ldr	r3, [pc, #8]	; (8009284 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800927a:	4618      	mov	r0, r3
 800927c:	3708      	adds	r7, #8
 800927e:	46bd      	mov	sp, r7
 8009280:	bd80      	pop	{r7, pc}
 8009282:	bf00      	nop
 8009284:	20000cbc 	.word	0x20000cbc
 8009288:	0800a2f4 	.word	0x0800a2f4

0800928c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800928c:	b580      	push	{r7, lr}
 800928e:	b082      	sub	sp, #8
 8009290:	af00      	add	r7, sp, #0
 8009292:	4603      	mov	r3, r0
 8009294:	6039      	str	r1, [r7, #0]
 8009296:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009298:	79fb      	ldrb	r3, [r7, #7]
 800929a:	2b00      	cmp	r3, #0
 800929c:	d105      	bne.n	80092aa <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800929e:	683a      	ldr	r2, [r7, #0]
 80092a0:	4907      	ldr	r1, [pc, #28]	; (80092c0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80092a2:	4808      	ldr	r0, [pc, #32]	; (80092c4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80092a4:	f7ff fd98 	bl	8008dd8 <USBD_GetString>
 80092a8:	e004      	b.n	80092b4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80092aa:	683a      	ldr	r2, [r7, #0]
 80092ac:	4904      	ldr	r1, [pc, #16]	; (80092c0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80092ae:	4805      	ldr	r0, [pc, #20]	; (80092c4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80092b0:	f7ff fd92 	bl	8008dd8 <USBD_GetString>
  }
  return USBD_StrDesc;
 80092b4:	4b02      	ldr	r3, [pc, #8]	; (80092c0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80092b6:	4618      	mov	r0, r3
 80092b8:	3708      	adds	r7, #8
 80092ba:	46bd      	mov	sp, r7
 80092bc:	bd80      	pop	{r7, pc}
 80092be:	bf00      	nop
 80092c0:	20000cbc 	.word	0x20000cbc
 80092c4:	0800a300 	.word	0x0800a300

080092c8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b084      	sub	sp, #16
 80092cc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80092ce:	4b0f      	ldr	r3, [pc, #60]	; (800930c <Get_SerialNum+0x44>)
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80092d4:	4b0e      	ldr	r3, [pc, #56]	; (8009310 <Get_SerialNum+0x48>)
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80092da:	4b0e      	ldr	r3, [pc, #56]	; (8009314 <Get_SerialNum+0x4c>)
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80092e0:	68fa      	ldr	r2, [r7, #12]
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	4413      	add	r3, r2
 80092e6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d009      	beq.n	8009302 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80092ee:	2208      	movs	r2, #8
 80092f0:	4909      	ldr	r1, [pc, #36]	; (8009318 <Get_SerialNum+0x50>)
 80092f2:	68f8      	ldr	r0, [r7, #12]
 80092f4:	f000 f814 	bl	8009320 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80092f8:	2204      	movs	r2, #4
 80092fa:	4908      	ldr	r1, [pc, #32]	; (800931c <Get_SerialNum+0x54>)
 80092fc:	68b8      	ldr	r0, [r7, #8]
 80092fe:	f000 f80f 	bl	8009320 <IntToUnicode>
  }
}
 8009302:	bf00      	nop
 8009304:	3710      	adds	r7, #16
 8009306:	46bd      	mov	sp, r7
 8009308:	bd80      	pop	{r7, pc}
 800930a:	bf00      	nop
 800930c:	1ff80050 	.word	0x1ff80050
 8009310:	1ff80054 	.word	0x1ff80054
 8009314:	1ff80058 	.word	0x1ff80058
 8009318:	20000162 	.word	0x20000162
 800931c:	20000172 	.word	0x20000172

08009320 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009320:	b480      	push	{r7}
 8009322:	b087      	sub	sp, #28
 8009324:	af00      	add	r7, sp, #0
 8009326:	60f8      	str	r0, [r7, #12]
 8009328:	60b9      	str	r1, [r7, #8]
 800932a:	4613      	mov	r3, r2
 800932c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800932e:	2300      	movs	r3, #0
 8009330:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009332:	2300      	movs	r3, #0
 8009334:	75fb      	strb	r3, [r7, #23]
 8009336:	e027      	b.n	8009388 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	0f1b      	lsrs	r3, r3, #28
 800933c:	2b09      	cmp	r3, #9
 800933e:	d80b      	bhi.n	8009358 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	0f1b      	lsrs	r3, r3, #28
 8009344:	b2da      	uxtb	r2, r3
 8009346:	7dfb      	ldrb	r3, [r7, #23]
 8009348:	005b      	lsls	r3, r3, #1
 800934a:	4619      	mov	r1, r3
 800934c:	68bb      	ldr	r3, [r7, #8]
 800934e:	440b      	add	r3, r1
 8009350:	3230      	adds	r2, #48	; 0x30
 8009352:	b2d2      	uxtb	r2, r2
 8009354:	701a      	strb	r2, [r3, #0]
 8009356:	e00a      	b.n	800936e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	0f1b      	lsrs	r3, r3, #28
 800935c:	b2da      	uxtb	r2, r3
 800935e:	7dfb      	ldrb	r3, [r7, #23]
 8009360:	005b      	lsls	r3, r3, #1
 8009362:	4619      	mov	r1, r3
 8009364:	68bb      	ldr	r3, [r7, #8]
 8009366:	440b      	add	r3, r1
 8009368:	3237      	adds	r2, #55	; 0x37
 800936a:	b2d2      	uxtb	r2, r2
 800936c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	011b      	lsls	r3, r3, #4
 8009372:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009374:	7dfb      	ldrb	r3, [r7, #23]
 8009376:	005b      	lsls	r3, r3, #1
 8009378:	3301      	adds	r3, #1
 800937a:	68ba      	ldr	r2, [r7, #8]
 800937c:	4413      	add	r3, r2
 800937e:	2200      	movs	r2, #0
 8009380:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009382:	7dfb      	ldrb	r3, [r7, #23]
 8009384:	3301      	adds	r3, #1
 8009386:	75fb      	strb	r3, [r7, #23]
 8009388:	7dfa      	ldrb	r2, [r7, #23]
 800938a:	79fb      	ldrb	r3, [r7, #7]
 800938c:	429a      	cmp	r2, r3
 800938e:	d3d3      	bcc.n	8009338 <IntToUnicode+0x18>
  }
}
 8009390:	bf00      	nop
 8009392:	bf00      	nop
 8009394:	371c      	adds	r7, #28
 8009396:	46bd      	mov	sp, r7
 8009398:	bc80      	pop	{r7}
 800939a:	4770      	bx	lr

0800939c <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800939c:	b480      	push	{r7}
 800939e:	b083      	sub	sp, #12
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
 80093a4:	460b      	mov	r3, r1
 80093a6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN 6 */
  if (state == 1)
 80093a8:	78fb      	ldrb	r3, [r7, #3]
 80093aa:	2b01      	cmp	r3, #1
 80093ac:	d106      	bne.n	80093bc <HAL_PCDEx_SetConnectionState+0x20>
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_ENABLE();
 80093ae:	4b09      	ldr	r3, [pc, #36]	; (80093d4 <HAL_PCDEx_SetConnectionState+0x38>)
 80093b0:	685b      	ldr	r3, [r3, #4]
 80093b2:	4a08      	ldr	r2, [pc, #32]	; (80093d4 <HAL_PCDEx_SetConnectionState+0x38>)
 80093b4:	f043 0301 	orr.w	r3, r3, #1
 80093b8:	6053      	str	r3, [r2, #4]
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_DISABLE();
  }
  /* USER CODE END 6 */
}
 80093ba:	e005      	b.n	80093c8 <HAL_PCDEx_SetConnectionState+0x2c>
    __HAL_SYSCFG_USBPULLUP_DISABLE();
 80093bc:	4b05      	ldr	r3, [pc, #20]	; (80093d4 <HAL_PCDEx_SetConnectionState+0x38>)
 80093be:	685b      	ldr	r3, [r3, #4]
 80093c0:	4a04      	ldr	r2, [pc, #16]	; (80093d4 <HAL_PCDEx_SetConnectionState+0x38>)
 80093c2:	f023 0301 	bic.w	r3, r3, #1
 80093c6:	6053      	str	r3, [r2, #4]
}
 80093c8:	bf00      	nop
 80093ca:	370c      	adds	r7, #12
 80093cc:	46bd      	mov	sp, r7
 80093ce:	bc80      	pop	{r7}
 80093d0:	4770      	bx	lr
 80093d2:	bf00      	nop
 80093d4:	40010000 	.word	0x40010000

080093d8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80093d8:	b580      	push	{r7, lr}
 80093da:	b084      	sub	sp, #16
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	4a0d      	ldr	r2, [pc, #52]	; (800941c <HAL_PCD_MspInit+0x44>)
 80093e6:	4293      	cmp	r3, r2
 80093e8:	d113      	bne.n	8009412 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80093ea:	4b0d      	ldr	r3, [pc, #52]	; (8009420 <HAL_PCD_MspInit+0x48>)
 80093ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093ee:	4a0c      	ldr	r2, [pc, #48]	; (8009420 <HAL_PCD_MspInit+0x48>)
 80093f0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80093f4:	6253      	str	r3, [r2, #36]	; 0x24
 80093f6:	4b0a      	ldr	r3, [pc, #40]	; (8009420 <HAL_PCD_MspInit+0x48>)
 80093f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80093fe:	60fb      	str	r3, [r7, #12]
 8009400:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8009402:	2200      	movs	r2, #0
 8009404:	2100      	movs	r1, #0
 8009406:	2014      	movs	r0, #20
 8009408:	f7f8 fc52 	bl	8001cb0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800940c:	2014      	movs	r0, #20
 800940e:	f7f8 fc7b 	bl	8001d08 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009412:	bf00      	nop
 8009414:	3710      	adds	r7, #16
 8009416:	46bd      	mov	sp, r7
 8009418:	bd80      	pop	{r7, pc}
 800941a:	bf00      	nop
 800941c:	40005c00 	.word	0x40005c00
 8009420:	40023800 	.word	0x40023800

08009424 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009424:	b580      	push	{r7, lr}
 8009426:	b082      	sub	sp, #8
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8009438:	4619      	mov	r1, r3
 800943a:	4610      	mov	r0, r2
 800943c:	f7fe fe11 	bl	8008062 <USBD_LL_SetupStage>
}
 8009440:	bf00      	nop
 8009442:	3708      	adds	r7, #8
 8009444:	46bd      	mov	sp, r7
 8009446:	bd80      	pop	{r7, pc}

08009448 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009448:	b580      	push	{r7, lr}
 800944a:	b082      	sub	sp, #8
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
 8009450:	460b      	mov	r3, r1
 8009452:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800945a:	78fa      	ldrb	r2, [r7, #3]
 800945c:	6879      	ldr	r1, [r7, #4]
 800945e:	4613      	mov	r3, r2
 8009460:	009b      	lsls	r3, r3, #2
 8009462:	4413      	add	r3, r2
 8009464:	00db      	lsls	r3, r3, #3
 8009466:	440b      	add	r3, r1
 8009468:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800946c:	681a      	ldr	r2, [r3, #0]
 800946e:	78fb      	ldrb	r3, [r7, #3]
 8009470:	4619      	mov	r1, r3
 8009472:	f7fe fe43 	bl	80080fc <USBD_LL_DataOutStage>
}
 8009476:	bf00      	nop
 8009478:	3708      	adds	r7, #8
 800947a:	46bd      	mov	sp, r7
 800947c:	bd80      	pop	{r7, pc}

0800947e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800947e:	b580      	push	{r7, lr}
 8009480:	b082      	sub	sp, #8
 8009482:	af00      	add	r7, sp, #0
 8009484:	6078      	str	r0, [r7, #4]
 8009486:	460b      	mov	r3, r1
 8009488:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8009490:	78fa      	ldrb	r2, [r7, #3]
 8009492:	6879      	ldr	r1, [r7, #4]
 8009494:	4613      	mov	r3, r2
 8009496:	009b      	lsls	r3, r3, #2
 8009498:	4413      	add	r3, r2
 800949a:	00db      	lsls	r3, r3, #3
 800949c:	440b      	add	r3, r1
 800949e:	333c      	adds	r3, #60	; 0x3c
 80094a0:	681a      	ldr	r2, [r3, #0]
 80094a2:	78fb      	ldrb	r3, [r7, #3]
 80094a4:	4619      	mov	r1, r3
 80094a6:	f7fe fe9a 	bl	80081de <USBD_LL_DataInStage>
}
 80094aa:	bf00      	nop
 80094ac:	3708      	adds	r7, #8
 80094ae:	46bd      	mov	sp, r7
 80094b0:	bd80      	pop	{r7, pc}

080094b2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094b2:	b580      	push	{r7, lr}
 80094b4:	b082      	sub	sp, #8
 80094b6:	af00      	add	r7, sp, #0
 80094b8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80094c0:	4618      	mov	r0, r3
 80094c2:	f7fe ffa5 	bl	8008410 <USBD_LL_SOF>
}
 80094c6:	bf00      	nop
 80094c8:	3708      	adds	r7, #8
 80094ca:	46bd      	mov	sp, r7
 80094cc:	bd80      	pop	{r7, pc}

080094ce <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094ce:	b580      	push	{r7, lr}
 80094d0:	b084      	sub	sp, #16
 80094d2:	af00      	add	r7, sp, #0
 80094d4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80094d6:	2301      	movs	r3, #1
 80094d8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	689b      	ldr	r3, [r3, #8]
 80094de:	2b02      	cmp	r3, #2
 80094e0:	d001      	beq.n	80094e6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80094e2:	f7f7 fa99 	bl	8000a18 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80094ec:	7bfa      	ldrb	r2, [r7, #15]
 80094ee:	4611      	mov	r1, r2
 80094f0:	4618      	mov	r0, r3
 80094f2:	f7fe ff5a 	bl	80083aa <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80094fc:	4618      	mov	r0, r3
 80094fe:	f7fe ff13 	bl	8008328 <USBD_LL_Reset>
}
 8009502:	bf00      	nop
 8009504:	3710      	adds	r7, #16
 8009506:	46bd      	mov	sp, r7
 8009508:	bd80      	pop	{r7, pc}
	...

0800950c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800950c:	b580      	push	{r7, lr}
 800950e:	b082      	sub	sp, #8
 8009510:	af00      	add	r7, sp, #0
 8009512:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800951a:	4618      	mov	r0, r3
 800951c:	f7fe ff54 	bl	80083c8 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	699b      	ldr	r3, [r3, #24]
 8009524:	2b00      	cmp	r3, #0
 8009526:	d005      	beq.n	8009534 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009528:	4b04      	ldr	r3, [pc, #16]	; (800953c <HAL_PCD_SuspendCallback+0x30>)
 800952a:	691b      	ldr	r3, [r3, #16]
 800952c:	4a03      	ldr	r2, [pc, #12]	; (800953c <HAL_PCD_SuspendCallback+0x30>)
 800952e:	f043 0306 	orr.w	r3, r3, #6
 8009532:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009534:	bf00      	nop
 8009536:	3708      	adds	r7, #8
 8009538:	46bd      	mov	sp, r7
 800953a:	bd80      	pop	{r7, pc}
 800953c:	e000ed00 	.word	0xe000ed00

08009540 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009540:	b580      	push	{r7, lr}
 8009542:	b082      	sub	sp, #8
 8009544:	af00      	add	r7, sp, #0
 8009546:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800954e:	4618      	mov	r0, r3
 8009550:	f7fe ff4e 	bl	80083f0 <USBD_LL_Resume>
}
 8009554:	bf00      	nop
 8009556:	3708      	adds	r7, #8
 8009558:	46bd      	mov	sp, r7
 800955a:	bd80      	pop	{r7, pc}

0800955c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800955c:	b580      	push	{r7, lr}
 800955e:	b082      	sub	sp, #8
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8009564:	4a28      	ldr	r2, [pc, #160]	; (8009608 <USBD_LL_Init+0xac>)
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	4a26      	ldr	r2, [pc, #152]	; (8009608 <USBD_LL_Init+0xac>)
 8009570:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  hpcd_USB_FS.Instance = USB;
 8009574:	4b24      	ldr	r3, [pc, #144]	; (8009608 <USBD_LL_Init+0xac>)
 8009576:	4a25      	ldr	r2, [pc, #148]	; (800960c <USBD_LL_Init+0xb0>)
 8009578:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800957a:	4b23      	ldr	r3, [pc, #140]	; (8009608 <USBD_LL_Init+0xac>)
 800957c:	2208      	movs	r2, #8
 800957e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009580:	4b21      	ldr	r3, [pc, #132]	; (8009608 <USBD_LL_Init+0xac>)
 8009582:	2202      	movs	r2, #2
 8009584:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009586:	4b20      	ldr	r3, [pc, #128]	; (8009608 <USBD_LL_Init+0xac>)
 8009588:	2202      	movs	r2, #2
 800958a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800958c:	4b1e      	ldr	r3, [pc, #120]	; (8009608 <USBD_LL_Init+0xac>)
 800958e:	2200      	movs	r2, #0
 8009590:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009592:	4b1d      	ldr	r3, [pc, #116]	; (8009608 <USBD_LL_Init+0xac>)
 8009594:	2200      	movs	r2, #0
 8009596:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009598:	481b      	ldr	r0, [pc, #108]	; (8009608 <USBD_LL_Init+0xac>)
 800959a:	f7f9 fa55 	bl	8002a48 <HAL_PCD_Init>
 800959e:	4603      	mov	r3, r0
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d001      	beq.n	80095a8 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80095a4:	f7f7 fa38 	bl	8000a18 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 80095ae:	2318      	movs	r3, #24
 80095b0:	2200      	movs	r2, #0
 80095b2:	2100      	movs	r1, #0
 80095b4:	f7fa feeb 	bl	800438e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 80095be:	2358      	movs	r3, #88	; 0x58
 80095c0:	2200      	movs	r2, #0
 80095c2:	2180      	movs	r1, #128	; 0x80
 80095c4:	f7fa fee3 	bl	800438e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 80095ce:	23c0      	movs	r3, #192	; 0xc0
 80095d0:	2200      	movs	r2, #0
 80095d2:	2181      	movs	r1, #129	; 0x81
 80095d4:	f7fa fedb 	bl	800438e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 80095de:	f44f 7388 	mov.w	r3, #272	; 0x110
 80095e2:	2200      	movs	r2, #0
 80095e4:	2101      	movs	r1, #1
 80095e6:	f7fa fed2 	bl	800438e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 80095f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80095f4:	2200      	movs	r2, #0
 80095f6:	2182      	movs	r1, #130	; 0x82
 80095f8:	f7fa fec9 	bl	800438e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80095fc:	2300      	movs	r3, #0
}
 80095fe:	4618      	mov	r0, r3
 8009600:	3708      	adds	r7, #8
 8009602:	46bd      	mov	sp, r7
 8009604:	bd80      	pop	{r7, pc}
 8009606:	bf00      	nop
 8009608:	20000ebc 	.word	0x20000ebc
 800960c:	40005c00 	.word	0x40005c00

08009610 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009610:	b580      	push	{r7, lr}
 8009612:	b084      	sub	sp, #16
 8009614:	af00      	add	r7, sp, #0
 8009616:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009618:	2300      	movs	r3, #0
 800961a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800961c:	2300      	movs	r3, #0
 800961e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8009626:	4618      	mov	r0, r3
 8009628:	f7f9 faee 	bl	8002c08 <HAL_PCD_Start>
 800962c:	4603      	mov	r3, r0
 800962e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009630:	7bfb      	ldrb	r3, [r7, #15]
 8009632:	4618      	mov	r0, r3
 8009634:	f000 f944 	bl	80098c0 <USBD_Get_USB_Status>
 8009638:	4603      	mov	r3, r0
 800963a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800963c:	7bbb      	ldrb	r3, [r7, #14]
}
 800963e:	4618      	mov	r0, r3
 8009640:	3710      	adds	r7, #16
 8009642:	46bd      	mov	sp, r7
 8009644:	bd80      	pop	{r7, pc}

08009646 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009646:	b580      	push	{r7, lr}
 8009648:	b084      	sub	sp, #16
 800964a:	af00      	add	r7, sp, #0
 800964c:	6078      	str	r0, [r7, #4]
 800964e:	4608      	mov	r0, r1
 8009650:	4611      	mov	r1, r2
 8009652:	461a      	mov	r2, r3
 8009654:	4603      	mov	r3, r0
 8009656:	70fb      	strb	r3, [r7, #3]
 8009658:	460b      	mov	r3, r1
 800965a:	70bb      	strb	r3, [r7, #2]
 800965c:	4613      	mov	r3, r2
 800965e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009660:	2300      	movs	r3, #0
 8009662:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009664:	2300      	movs	r3, #0
 8009666:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800966e:	78bb      	ldrb	r3, [r7, #2]
 8009670:	883a      	ldrh	r2, [r7, #0]
 8009672:	78f9      	ldrb	r1, [r7, #3]
 8009674:	f7f9 fbe7 	bl	8002e46 <HAL_PCD_EP_Open>
 8009678:	4603      	mov	r3, r0
 800967a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800967c:	7bfb      	ldrb	r3, [r7, #15]
 800967e:	4618      	mov	r0, r3
 8009680:	f000 f91e 	bl	80098c0 <USBD_Get_USB_Status>
 8009684:	4603      	mov	r3, r0
 8009686:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009688:	7bbb      	ldrb	r3, [r7, #14]
}
 800968a:	4618      	mov	r0, r3
 800968c:	3710      	adds	r7, #16
 800968e:	46bd      	mov	sp, r7
 8009690:	bd80      	pop	{r7, pc}

08009692 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009692:	b580      	push	{r7, lr}
 8009694:	b084      	sub	sp, #16
 8009696:	af00      	add	r7, sp, #0
 8009698:	6078      	str	r0, [r7, #4]
 800969a:	460b      	mov	r3, r1
 800969c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800969e:	2300      	movs	r3, #0
 80096a0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096a2:	2300      	movs	r3, #0
 80096a4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80096ac:	78fa      	ldrb	r2, [r7, #3]
 80096ae:	4611      	mov	r1, r2
 80096b0:	4618      	mov	r0, r3
 80096b2:	f7f9 fc25 	bl	8002f00 <HAL_PCD_EP_Close>
 80096b6:	4603      	mov	r3, r0
 80096b8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80096ba:	7bfb      	ldrb	r3, [r7, #15]
 80096bc:	4618      	mov	r0, r3
 80096be:	f000 f8ff 	bl	80098c0 <USBD_Get_USB_Status>
 80096c2:	4603      	mov	r3, r0
 80096c4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80096c6:	7bbb      	ldrb	r3, [r7, #14]
}
 80096c8:	4618      	mov	r0, r3
 80096ca:	3710      	adds	r7, #16
 80096cc:	46bd      	mov	sp, r7
 80096ce:	bd80      	pop	{r7, pc}

080096d0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b084      	sub	sp, #16
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
 80096d8:	460b      	mov	r3, r1
 80096da:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096dc:	2300      	movs	r3, #0
 80096de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096e0:	2300      	movs	r3, #0
 80096e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80096ea:	78fa      	ldrb	r2, [r7, #3]
 80096ec:	4611      	mov	r1, r2
 80096ee:	4618      	mov	r0, r3
 80096f0:	f7f9 fccd 	bl	800308e <HAL_PCD_EP_SetStall>
 80096f4:	4603      	mov	r3, r0
 80096f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80096f8:	7bfb      	ldrb	r3, [r7, #15]
 80096fa:	4618      	mov	r0, r3
 80096fc:	f000 f8e0 	bl	80098c0 <USBD_Get_USB_Status>
 8009700:	4603      	mov	r3, r0
 8009702:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009704:	7bbb      	ldrb	r3, [r7, #14]
}
 8009706:	4618      	mov	r0, r3
 8009708:	3710      	adds	r7, #16
 800970a:	46bd      	mov	sp, r7
 800970c:	bd80      	pop	{r7, pc}

0800970e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800970e:	b580      	push	{r7, lr}
 8009710:	b084      	sub	sp, #16
 8009712:	af00      	add	r7, sp, #0
 8009714:	6078      	str	r0, [r7, #4]
 8009716:	460b      	mov	r3, r1
 8009718:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800971a:	2300      	movs	r3, #0
 800971c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800971e:	2300      	movs	r3, #0
 8009720:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8009728:	78fa      	ldrb	r2, [r7, #3]
 800972a:	4611      	mov	r1, r2
 800972c:	4618      	mov	r0, r3
 800972e:	f7f9 fd00 	bl	8003132 <HAL_PCD_EP_ClrStall>
 8009732:	4603      	mov	r3, r0
 8009734:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009736:	7bfb      	ldrb	r3, [r7, #15]
 8009738:	4618      	mov	r0, r3
 800973a:	f000 f8c1 	bl	80098c0 <USBD_Get_USB_Status>
 800973e:	4603      	mov	r3, r0
 8009740:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009742:	7bbb      	ldrb	r3, [r7, #14]
}
 8009744:	4618      	mov	r0, r3
 8009746:	3710      	adds	r7, #16
 8009748:	46bd      	mov	sp, r7
 800974a:	bd80      	pop	{r7, pc}

0800974c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800974c:	b480      	push	{r7}
 800974e:	b085      	sub	sp, #20
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
 8009754:	460b      	mov	r3, r1
 8009756:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800975e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009760:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009764:	2b00      	cmp	r3, #0
 8009766:	da0c      	bge.n	8009782 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009768:	78fb      	ldrb	r3, [r7, #3]
 800976a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800976e:	68f9      	ldr	r1, [r7, #12]
 8009770:	1c5a      	adds	r2, r3, #1
 8009772:	4613      	mov	r3, r2
 8009774:	009b      	lsls	r3, r3, #2
 8009776:	4413      	add	r3, r2
 8009778:	00db      	lsls	r3, r3, #3
 800977a:	440b      	add	r3, r1
 800977c:	3302      	adds	r3, #2
 800977e:	781b      	ldrb	r3, [r3, #0]
 8009780:	e00b      	b.n	800979a <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009782:	78fb      	ldrb	r3, [r7, #3]
 8009784:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009788:	68f9      	ldr	r1, [r7, #12]
 800978a:	4613      	mov	r3, r2
 800978c:	009b      	lsls	r3, r3, #2
 800978e:	4413      	add	r3, r2
 8009790:	00db      	lsls	r3, r3, #3
 8009792:	440b      	add	r3, r1
 8009794:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8009798:	781b      	ldrb	r3, [r3, #0]
  }
}
 800979a:	4618      	mov	r0, r3
 800979c:	3714      	adds	r7, #20
 800979e:	46bd      	mov	sp, r7
 80097a0:	bc80      	pop	{r7}
 80097a2:	4770      	bx	lr

080097a4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80097a4:	b580      	push	{r7, lr}
 80097a6:	b084      	sub	sp, #16
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	6078      	str	r0, [r7, #4]
 80097ac:	460b      	mov	r3, r1
 80097ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097b0:	2300      	movs	r3, #0
 80097b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097b4:	2300      	movs	r3, #0
 80097b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80097be:	78fa      	ldrb	r2, [r7, #3]
 80097c0:	4611      	mov	r1, r2
 80097c2:	4618      	mov	r0, r3
 80097c4:	f7f9 fb1a 	bl	8002dfc <HAL_PCD_SetAddress>
 80097c8:	4603      	mov	r3, r0
 80097ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80097cc:	7bfb      	ldrb	r3, [r7, #15]
 80097ce:	4618      	mov	r0, r3
 80097d0:	f000 f876 	bl	80098c0 <USBD_Get_USB_Status>
 80097d4:	4603      	mov	r3, r0
 80097d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80097d8:	7bbb      	ldrb	r3, [r7, #14]
}
 80097da:	4618      	mov	r0, r3
 80097dc:	3710      	adds	r7, #16
 80097de:	46bd      	mov	sp, r7
 80097e0:	bd80      	pop	{r7, pc}

080097e2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80097e2:	b580      	push	{r7, lr}
 80097e4:	b086      	sub	sp, #24
 80097e6:	af00      	add	r7, sp, #0
 80097e8:	60f8      	str	r0, [r7, #12]
 80097ea:	607a      	str	r2, [r7, #4]
 80097ec:	461a      	mov	r2, r3
 80097ee:	460b      	mov	r3, r1
 80097f0:	72fb      	strb	r3, [r7, #11]
 80097f2:	4613      	mov	r3, r2
 80097f4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097f6:	2300      	movs	r3, #0
 80097f8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097fa:	2300      	movs	r3, #0
 80097fc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8009804:	893b      	ldrh	r3, [r7, #8]
 8009806:	7af9      	ldrb	r1, [r7, #11]
 8009808:	687a      	ldr	r2, [r7, #4]
 800980a:	f7f9 fc09 	bl	8003020 <HAL_PCD_EP_Transmit>
 800980e:	4603      	mov	r3, r0
 8009810:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009812:	7dfb      	ldrb	r3, [r7, #23]
 8009814:	4618      	mov	r0, r3
 8009816:	f000 f853 	bl	80098c0 <USBD_Get_USB_Status>
 800981a:	4603      	mov	r3, r0
 800981c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800981e:	7dbb      	ldrb	r3, [r7, #22]
}
 8009820:	4618      	mov	r0, r3
 8009822:	3718      	adds	r7, #24
 8009824:	46bd      	mov	sp, r7
 8009826:	bd80      	pop	{r7, pc}

08009828 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009828:	b580      	push	{r7, lr}
 800982a:	b086      	sub	sp, #24
 800982c:	af00      	add	r7, sp, #0
 800982e:	60f8      	str	r0, [r7, #12]
 8009830:	607a      	str	r2, [r7, #4]
 8009832:	461a      	mov	r2, r3
 8009834:	460b      	mov	r3, r1
 8009836:	72fb      	strb	r3, [r7, #11]
 8009838:	4613      	mov	r3, r2
 800983a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800983c:	2300      	movs	r3, #0
 800983e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009840:	2300      	movs	r3, #0
 8009842:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800984a:	893b      	ldrh	r3, [r7, #8]
 800984c:	7af9      	ldrb	r1, [r7, #11]
 800984e:	687a      	ldr	r2, [r7, #4]
 8009850:	f7f9 fb9e 	bl	8002f90 <HAL_PCD_EP_Receive>
 8009854:	4603      	mov	r3, r0
 8009856:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009858:	7dfb      	ldrb	r3, [r7, #23]
 800985a:	4618      	mov	r0, r3
 800985c:	f000 f830 	bl	80098c0 <USBD_Get_USB_Status>
 8009860:	4603      	mov	r3, r0
 8009862:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009864:	7dbb      	ldrb	r3, [r7, #22]
}
 8009866:	4618      	mov	r0, r3
 8009868:	3718      	adds	r7, #24
 800986a:	46bd      	mov	sp, r7
 800986c:	bd80      	pop	{r7, pc}

0800986e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800986e:	b580      	push	{r7, lr}
 8009870:	b082      	sub	sp, #8
 8009872:	af00      	add	r7, sp, #0
 8009874:	6078      	str	r0, [r7, #4]
 8009876:	460b      	mov	r3, r1
 8009878:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8009880:	78fa      	ldrb	r2, [r7, #3]
 8009882:	4611      	mov	r1, r2
 8009884:	4618      	mov	r0, r3
 8009886:	f7f9 fbb4 	bl	8002ff2 <HAL_PCD_EP_GetRxCount>
 800988a:	4603      	mov	r3, r0
}
 800988c:	4618      	mov	r0, r3
 800988e:	3708      	adds	r7, #8
 8009890:	46bd      	mov	sp, r7
 8009892:	bd80      	pop	{r7, pc}

08009894 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009894:	b480      	push	{r7}
 8009896:	b083      	sub	sp, #12
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800989c:	4b02      	ldr	r3, [pc, #8]	; (80098a8 <USBD_static_malloc+0x14>)
}
 800989e:	4618      	mov	r0, r3
 80098a0:	370c      	adds	r7, #12
 80098a2:	46bd      	mov	sp, r7
 80098a4:	bc80      	pop	{r7}
 80098a6:	4770      	bx	lr
 80098a8:	200011a8 	.word	0x200011a8

080098ac <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80098ac:	b480      	push	{r7}
 80098ae:	b083      	sub	sp, #12
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]

}
 80098b4:	bf00      	nop
 80098b6:	370c      	adds	r7, #12
 80098b8:	46bd      	mov	sp, r7
 80098ba:	bc80      	pop	{r7}
 80098bc:	4770      	bx	lr
	...

080098c0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80098c0:	b480      	push	{r7}
 80098c2:	b085      	sub	sp, #20
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	4603      	mov	r3, r0
 80098c8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098ca:	2300      	movs	r3, #0
 80098cc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80098ce:	79fb      	ldrb	r3, [r7, #7]
 80098d0:	2b03      	cmp	r3, #3
 80098d2:	d817      	bhi.n	8009904 <USBD_Get_USB_Status+0x44>
 80098d4:	a201      	add	r2, pc, #4	; (adr r2, 80098dc <USBD_Get_USB_Status+0x1c>)
 80098d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098da:	bf00      	nop
 80098dc:	080098ed 	.word	0x080098ed
 80098e0:	080098f3 	.word	0x080098f3
 80098e4:	080098f9 	.word	0x080098f9
 80098e8:	080098ff 	.word	0x080098ff
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80098ec:	2300      	movs	r3, #0
 80098ee:	73fb      	strb	r3, [r7, #15]
    break;
 80098f0:	e00b      	b.n	800990a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80098f2:	2302      	movs	r3, #2
 80098f4:	73fb      	strb	r3, [r7, #15]
    break;
 80098f6:	e008      	b.n	800990a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80098f8:	2301      	movs	r3, #1
 80098fa:	73fb      	strb	r3, [r7, #15]
    break;
 80098fc:	e005      	b.n	800990a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80098fe:	2302      	movs	r3, #2
 8009900:	73fb      	strb	r3, [r7, #15]
    break;
 8009902:	e002      	b.n	800990a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009904:	2302      	movs	r3, #2
 8009906:	73fb      	strb	r3, [r7, #15]
    break;
 8009908:	bf00      	nop
  }
  return usb_status;
 800990a:	7bfb      	ldrb	r3, [r7, #15]
}
 800990c:	4618      	mov	r0, r3
 800990e:	3714      	adds	r7, #20
 8009910:	46bd      	mov	sp, r7
 8009912:	bc80      	pop	{r7}
 8009914:	4770      	bx	lr
 8009916:	bf00      	nop

08009918 <usb_callback>:
uint8_t EarLPulsesD = 0;
uint32_t tdelay = 0;
uint8_t EarRPulsesD = 0;


void usb_callback(uint8_t *arr, uint16_t len){
 8009918:	b580      	push	{r7, lr}
 800991a:	b08a      	sub	sp, #40	; 0x28
 800991c:	af00      	add	r7, sp, #0
 800991e:	6078      	str	r0, [r7, #4]
 8009920:	460b      	mov	r3, r1
 8009922:	807b      	strh	r3, [r7, #2]


	////////////
	// DEV INFO
	// (STANDART COMMAND)
	if(arr[0] == 0 ){
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	781b      	ldrb	r3, [r3, #0]
 8009928:	2b00      	cmp	r3, #0
 800992a:	d120      	bne.n	800996e <usb_callback+0x56>

		uint16_t *idBase0 = (uint16_t*)(UID_BASE);
 800992c:	4b82      	ldr	r3, [pc, #520]	; (8009b38 <usb_callback+0x220>)
 800992e:	61fb      	str	r3, [r7, #28]
		uint16_t *idBase1 = (uint16_t*)(UID_BASE + 0x02);
 8009930:	4b82      	ldr	r3, [pc, #520]	; (8009b3c <usb_callback+0x224>)
 8009932:	61bb      	str	r3, [r7, #24]
		uint32_t *idBase2 = (uint32_t*)(UID_BASE + 0x04);
 8009934:	4b82      	ldr	r3, [pc, #520]	; (8009b40 <usb_callback+0x228>)
 8009936:	617b      	str	r3, [r7, #20]
		uint32_t *idBase3 = (uint32_t*)(UID_BASE + 0x08);
 8009938:	4b82      	ldr	r3, [pc, #520]	; (8009b44 <usb_callback+0x22c>)
 800993a:	613b      	str	r3, [r7, #16]

		usb_rst_cursor();
 800993c:	f000 fabe 	bl	8009ebc <usb_rst_cursor>
		usb_add_uint8(0x00);
 8009940:	2000      	movs	r0, #0
 8009942:	f000 f9fd 	bl	8009d40 <usb_add_uint8>
		usb_add_uint16(idBase0);
 8009946:	69f8      	ldr	r0, [r7, #28]
 8009948:	f000 fa1e 	bl	8009d88 <usb_add_uint16>
		usb_add_uint16(idBase1);
 800994c:	69b8      	ldr	r0, [r7, #24]
 800994e:	f000 fa1b 	bl	8009d88 <usb_add_uint16>
		usb_add_uint32(idBase2);
 8009952:	6978      	ldr	r0, [r7, #20]
 8009954:	f000 fa52 	bl	8009dfc <usb_add_uint32>
		usb_add_uint32(idBase3);
 8009958:	6938      	ldr	r0, [r7, #16]
 800995a:	f000 fa4f 	bl	8009dfc <usb_add_uint32>

		usb_add_uint16((uint8_t)DEVICE_CODE);
 800995e:	20ff      	movs	r0, #255	; 0xff
 8009960:	f000 fa12 	bl	8009d88 <usb_add_uint16>
		usb_add_uint8((uint8_t)DEVICE_VER);
 8009964:	2000      	movs	r0, #0
 8009966:	f000 f9eb 	bl	8009d40 <usb_add_uint8>

		usb_send_buff();
 800996a:	f000 fab3 	bl	8009ed4 <usb_send_buff>

	}


	////////////////Ear L Digital
	if(arr[0] == 0x01 ){
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	781b      	ldrb	r3, [r3, #0]
 8009972:	2b01      	cmp	r3, #1
 8009974:	d11a      	bne.n	80099ac <usb_callback+0x94>

		uint8_t state = arr[1];
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	785b      	ldrb	r3, [r3, #1]
 800997a:	73fb      	strb	r3, [r7, #15]
		if(state>0){
 800997c:	7bfb      	ldrb	r3, [r7, #15]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d005      	beq.n	800998e <usb_callback+0x76>
			HAL_GPIO_WritePin(L1_GPIO_Port, L1_Pin, 1);
 8009982:	2201      	movs	r2, #1
 8009984:	2180      	movs	r1, #128	; 0x80
 8009986:	4870      	ldr	r0, [pc, #448]	; (8009b48 <usb_callback+0x230>)
 8009988:	f7f9 f82c 	bl	80029e4 <HAL_GPIO_WritePin>
 800998c:	e004      	b.n	8009998 <usb_callback+0x80>
		}else{
			HAL_GPIO_WritePin(L1_GPIO_Port, L1_Pin, 0);
 800998e:	2200      	movs	r2, #0
 8009990:	2180      	movs	r1, #128	; 0x80
 8009992:	486d      	ldr	r0, [pc, #436]	; (8009b48 <usb_callback+0x230>)
 8009994:	f7f9 f826 	bl	80029e4 <HAL_GPIO_WritePin>
		}


		usb_rst_cursor();
 8009998:	f000 fa90 	bl	8009ebc <usb_rst_cursor>
		usb_add_uint8(0x01);
 800999c:	2001      	movs	r0, #1
 800999e:	f000 f9cf 	bl	8009d40 <usb_add_uint8>
		usb_add_uint8(0x00);
 80099a2:	2000      	movs	r0, #0
 80099a4:	f000 f9cc 	bl	8009d40 <usb_add_uint8>

		usb_send_buff();
 80099a8:	f000 fa94 	bl	8009ed4 <usb_send_buff>
	}

	////////////////Ear R Digital
	if(arr[0] == 0x02 ){
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	781b      	ldrb	r3, [r3, #0]
 80099b0:	2b02      	cmp	r3, #2
 80099b2:	d11a      	bne.n	80099ea <usb_callback+0xd2>


		uint8_t state = arr[1];
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	785b      	ldrb	r3, [r3, #1]
 80099b8:	73bb      	strb	r3, [r7, #14]
		if(state>0){
 80099ba:	7bbb      	ldrb	r3, [r7, #14]
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d005      	beq.n	80099cc <usb_callback+0xb4>
			HAL_GPIO_WritePin(L2_GPIO_Port, L2_Pin, 1);
 80099c0:	2201      	movs	r2, #1
 80099c2:	2140      	movs	r1, #64	; 0x40
 80099c4:	4860      	ldr	r0, [pc, #384]	; (8009b48 <usb_callback+0x230>)
 80099c6:	f7f9 f80d 	bl	80029e4 <HAL_GPIO_WritePin>
 80099ca:	e004      	b.n	80099d6 <usb_callback+0xbe>
		}else{
			HAL_GPIO_WritePin(L2_GPIO_Port, L2_Pin, 0);
 80099cc:	2200      	movs	r2, #0
 80099ce:	2140      	movs	r1, #64	; 0x40
 80099d0:	485d      	ldr	r0, [pc, #372]	; (8009b48 <usb_callback+0x230>)
 80099d2:	f7f9 f807 	bl	80029e4 <HAL_GPIO_WritePin>
		}


		usb_rst_cursor();
 80099d6:	f000 fa71 	bl	8009ebc <usb_rst_cursor>
		usb_add_uint8(0x02);
 80099da:	2002      	movs	r0, #2
 80099dc:	f000 f9b0 	bl	8009d40 <usb_add_uint8>
		usb_add_uint8(0x00);
 80099e0:	2000      	movs	r0, #0
 80099e2:	f000 f9ad 	bl	8009d40 <usb_add_uint8>

		usb_send_buff();
 80099e6:	f000 fa75 	bl	8009ed4 <usb_send_buff>
	}

	////////////////Ear L Analog
	if(arr[0] == 0x03 ){
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	781b      	ldrb	r3, [r3, #0]
 80099ee:	2b03      	cmp	r3, #3
 80099f0:	d124      	bne.n	8009a3c <usb_callback+0x124>


		uint32_t pwr = arr[1]<<16 | arr[2]<<8 | arr[3];
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	3301      	adds	r3, #1
 80099f6:	781b      	ldrb	r3, [r3, #0]
 80099f8:	041a      	lsls	r2, r3, #16
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	3302      	adds	r3, #2
 80099fe:	781b      	ldrb	r3, [r3, #0]
 8009a00:	021b      	lsls	r3, r3, #8
 8009a02:	4313      	orrs	r3, r2
 8009a04:	687a      	ldr	r2, [r7, #4]
 8009a06:	3203      	adds	r2, #3
 8009a08:	7812      	ldrb	r2, [r2, #0]
 8009a0a:	4313      	orrs	r3, r2
 8009a0c:	627b      	str	r3, [r7, #36]	; 0x24


		if(pwr>4095){
 8009a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a14:	d302      	bcc.n	8009a1c <usb_callback+0x104>
			pwr = 4095;
 8009a16:	f640 73ff 	movw	r3, #4095	; 0xfff
 8009a1a:	627b      	str	r3, [r7, #36]	; 0x24
		}

		HAL_DAC_SetValue(&hdac, DAC1_CHANNEL_1, DAC_ALIGN_12B_R, pwr);
 8009a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a1e:	2200      	movs	r2, #0
 8009a20:	2100      	movs	r1, #0
 8009a22:	484a      	ldr	r0, [pc, #296]	; (8009b4c <usb_callback+0x234>)
 8009a24:	f7f8 fa26 	bl	8001e74 <HAL_DAC_SetValue>



		usb_rst_cursor();
 8009a28:	f000 fa48 	bl	8009ebc <usb_rst_cursor>
		usb_add_uint8(0x03);
 8009a2c:	2003      	movs	r0, #3
 8009a2e:	f000 f987 	bl	8009d40 <usb_add_uint8>
		usb_add_uint8(0x00);
 8009a32:	2000      	movs	r0, #0
 8009a34:	f000 f984 	bl	8009d40 <usb_add_uint8>

		usb_send_buff();
 8009a38:	f000 fa4c 	bl	8009ed4 <usb_send_buff>
	}

	////////////////Ear R Analog
	if(arr[0] == 0x04 ){
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	781b      	ldrb	r3, [r3, #0]
 8009a40:	2b04      	cmp	r3, #4
 8009a42:	d124      	bne.n	8009a8e <usb_callback+0x176>

		uint32_t pwr = arr[1]<<16 | arr[2]<<8 | arr[3];
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	3301      	adds	r3, #1
 8009a48:	781b      	ldrb	r3, [r3, #0]
 8009a4a:	041a      	lsls	r2, r3, #16
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	3302      	adds	r3, #2
 8009a50:	781b      	ldrb	r3, [r3, #0]
 8009a52:	021b      	lsls	r3, r3, #8
 8009a54:	4313      	orrs	r3, r2
 8009a56:	687a      	ldr	r2, [r7, #4]
 8009a58:	3203      	adds	r2, #3
 8009a5a:	7812      	ldrb	r2, [r2, #0]
 8009a5c:	4313      	orrs	r3, r2
 8009a5e:	623b      	str	r3, [r7, #32]


		if(pwr>4095){
 8009a60:	6a3b      	ldr	r3, [r7, #32]
 8009a62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a66:	d302      	bcc.n	8009a6e <usb_callback+0x156>
			pwr = 4095;
 8009a68:	f640 73ff 	movw	r3, #4095	; 0xfff
 8009a6c:	623b      	str	r3, [r7, #32]
		}

		HAL_DAC_SetValue(&hdac, DAC1_CHANNEL_2, DAC_ALIGN_12B_R, pwr);
 8009a6e:	6a3b      	ldr	r3, [r7, #32]
 8009a70:	2200      	movs	r2, #0
 8009a72:	2110      	movs	r1, #16
 8009a74:	4835      	ldr	r0, [pc, #212]	; (8009b4c <usb_callback+0x234>)
 8009a76:	f7f8 f9fd 	bl	8001e74 <HAL_DAC_SetValue>




		usb_rst_cursor();
 8009a7a:	f000 fa1f 	bl	8009ebc <usb_rst_cursor>
		usb_add_uint8(0x04);
 8009a7e:	2004      	movs	r0, #4
 8009a80:	f000 f95e 	bl	8009d40 <usb_add_uint8>
		usb_add_uint8(0x00);
 8009a84:	2000      	movs	r0, #0
 8009a86:	f000 f95b 	bl	8009d40 <usb_add_uint8>

		usb_send_buff();
 8009a8a:	f000 fa23 	bl	8009ed4 <usb_send_buff>
	}

	//////////////// Leda
	if(arr[0] == 0x05 ){
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	781b      	ldrb	r3, [r3, #0]
 8009a92:	2b05      	cmp	r3, #5
 8009a94:	d14c      	bne.n	8009b30 <usb_callback+0x218>
		uint8_t leds = arr[1];
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	785b      	ldrb	r3, [r3, #1]
 8009a9a:	737b      	strb	r3, [r7, #13]
		if((leds & 0b00000001) > 0){
 8009a9c:	7b7b      	ldrb	r3, [r7, #13]
 8009a9e:	f003 0301 	and.w	r3, r3, #1
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	dd05      	ble.n	8009ab2 <usb_callback+0x19a>
			HAL_GPIO_WritePin(L1_GPIO_Port, L1_Pin, 1);
 8009aa6:	2201      	movs	r2, #1
 8009aa8:	2180      	movs	r1, #128	; 0x80
 8009aaa:	4827      	ldr	r0, [pc, #156]	; (8009b48 <usb_callback+0x230>)
 8009aac:	f7f8 ff9a 	bl	80029e4 <HAL_GPIO_WritePin>
 8009ab0:	e004      	b.n	8009abc <usb_callback+0x1a4>
		} else {
			HAL_GPIO_WritePin(L1_GPIO_Port, L1_Pin, 0);
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	2180      	movs	r1, #128	; 0x80
 8009ab6:	4824      	ldr	r0, [pc, #144]	; (8009b48 <usb_callback+0x230>)
 8009ab8:	f7f8 ff94 	bl	80029e4 <HAL_GPIO_WritePin>
		}
		if((leds & 0b00000010) > 0){
 8009abc:	7b7b      	ldrb	r3, [r7, #13]
 8009abe:	f003 0302 	and.w	r3, r3, #2
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	dd05      	ble.n	8009ad2 <usb_callback+0x1ba>
			HAL_GPIO_WritePin(L2_GPIO_Port, L2_Pin, 1);
 8009ac6:	2201      	movs	r2, #1
 8009ac8:	2140      	movs	r1, #64	; 0x40
 8009aca:	481f      	ldr	r0, [pc, #124]	; (8009b48 <usb_callback+0x230>)
 8009acc:	f7f8 ff8a 	bl	80029e4 <HAL_GPIO_WritePin>
 8009ad0:	e004      	b.n	8009adc <usb_callback+0x1c4>
		} else {
			HAL_GPIO_WritePin(L2_GPIO_Port, L2_Pin, 0);
 8009ad2:	2200      	movs	r2, #0
 8009ad4:	2140      	movs	r1, #64	; 0x40
 8009ad6:	481c      	ldr	r0, [pc, #112]	; (8009b48 <usb_callback+0x230>)
 8009ad8:	f7f8 ff84 	bl	80029e4 <HAL_GPIO_WritePin>
		}
		if((leds & 0b00000100) > 0){
 8009adc:	7b7b      	ldrb	r3, [r7, #13]
 8009ade:	f003 0304 	and.w	r3, r3, #4
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	dd05      	ble.n	8009af2 <usb_callback+0x1da>
			HAL_GPIO_WritePin(L3_GPIO_Port, L3_Pin, 1);
 8009ae6:	2201      	movs	r2, #1
 8009ae8:	2120      	movs	r1, #32
 8009aea:	4817      	ldr	r0, [pc, #92]	; (8009b48 <usb_callback+0x230>)
 8009aec:	f7f8 ff7a 	bl	80029e4 <HAL_GPIO_WritePin>
 8009af0:	e004      	b.n	8009afc <usb_callback+0x1e4>
		} else {
			HAL_GPIO_WritePin(L3_GPIO_Port, L3_Pin, 0);
 8009af2:	2200      	movs	r2, #0
 8009af4:	2120      	movs	r1, #32
 8009af6:	4814      	ldr	r0, [pc, #80]	; (8009b48 <usb_callback+0x230>)
 8009af8:	f7f8 ff74 	bl	80029e4 <HAL_GPIO_WritePin>
		}
		if((leds & 0b00001000) > 0){
 8009afc:	7b7b      	ldrb	r3, [r7, #13]
 8009afe:	f003 0308 	and.w	r3, r3, #8
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	dd05      	ble.n	8009b12 <usb_callback+0x1fa>
			HAL_GPIO_WritePin(L4_GPIO_Port, L4_Pin, 1);
 8009b06:	2201      	movs	r2, #1
 8009b08:	2110      	movs	r1, #16
 8009b0a:	480f      	ldr	r0, [pc, #60]	; (8009b48 <usb_callback+0x230>)
 8009b0c:	f7f8 ff6a 	bl	80029e4 <HAL_GPIO_WritePin>
 8009b10:	e004      	b.n	8009b1c <usb_callback+0x204>
		} else {
			HAL_GPIO_WritePin(L4_GPIO_Port, L4_Pin, 0);
 8009b12:	2200      	movs	r2, #0
 8009b14:	2110      	movs	r1, #16
 8009b16:	480c      	ldr	r0, [pc, #48]	; (8009b48 <usb_callback+0x230>)
 8009b18:	f7f8 ff64 	bl	80029e4 <HAL_GPIO_WritePin>
		}



		usb_rst_cursor();
 8009b1c:	f000 f9ce 	bl	8009ebc <usb_rst_cursor>
		usb_add_uint8(0x05);
 8009b20:	2005      	movs	r0, #5
 8009b22:	f000 f90d 	bl	8009d40 <usb_add_uint8>
		usb_add_uint8(0x00);
 8009b26:	2000      	movs	r0, #0
 8009b28:	f000 f90a 	bl	8009d40 <usb_add_uint8>

		usb_send_buff();
 8009b2c:	f000 f9d2 	bl	8009ed4 <usb_send_buff>
	}



}
 8009b30:	bf00      	nop
 8009b32:	3728      	adds	r7, #40	; 0x28
 8009b34:	46bd      	mov	sp, r7
 8009b36:	bd80      	pop	{r7, pc}
 8009b38:	1ff80050 	.word	0x1ff80050
 8009b3c:	1ff80052 	.word	0x1ff80052
 8009b40:	1ff80054 	.word	0x1ff80054
 8009b44:	1ff80058 	.word	0x1ff80058
 8009b48:	40020400 	.word	0x40020400
 8009b4c:	20000234 	.word	0x20000234

08009b50 <calc_voltage_raw>:
	adc_2 	= vref_adc / ADC_MAX * adc_2;
	adc_3 	= vref_adc / ADC_MAX * adc_3;
}
*/
void calc_voltage_raw()
{
 8009b50:	b480      	push	{r7}
 8009b52:	b083      	sub	sp, #12
 8009b54:	af00      	add	r7, sp, #0
	for(uint8_t i=0; i<12; i++){
 8009b56:	2300      	movs	r3, #0
 8009b58:	71fb      	strb	r3, [r7, #7]
 8009b5a:	e007      	b.n	8009b6c <calc_voltage_raw+0x1c>
		adc_data_raw[i] = 0;
 8009b5c:	79fb      	ldrb	r3, [r7, #7]
 8009b5e:	4a22      	ldr	r2, [pc, #136]	; (8009be8 <calc_voltage_raw+0x98>)
 8009b60:	2100      	movs	r1, #0
 8009b62:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(uint8_t i=0; i<12; i++){
 8009b66:	79fb      	ldrb	r3, [r7, #7]
 8009b68:	3301      	adds	r3, #1
 8009b6a:	71fb      	strb	r3, [r7, #7]
 8009b6c:	79fb      	ldrb	r3, [r7, #7]
 8009b6e:	2b0b      	cmp	r3, #11
 8009b70:	d9f4      	bls.n	8009b5c <calc_voltage_raw+0xc>
	}

	for (uint8_t i = 0; i < 12*8; i = i + 12) {
 8009b72:	2300      	movs	r3, #0
 8009b74:	71bb      	strb	r3, [r7, #6]
 8009b76:	e01b      	b.n	8009bb0 <calc_voltage_raw+0x60>
		for(uint8_t j=0; j<12; j++){
 8009b78:	2300      	movs	r3, #0
 8009b7a:	717b      	strb	r3, [r7, #5]
 8009b7c:	e012      	b.n	8009ba4 <calc_voltage_raw+0x54>
				adc_data_raw[i] += adc_data[i+j];
 8009b7e:	79bb      	ldrb	r3, [r7, #6]
 8009b80:	4a19      	ldr	r2, [pc, #100]	; (8009be8 <calc_voltage_raw+0x98>)
 8009b82:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8009b86:	79ba      	ldrb	r2, [r7, #6]
 8009b88:	797b      	ldrb	r3, [r7, #5]
 8009b8a:	4413      	add	r3, r2
 8009b8c:	4a17      	ldr	r2, [pc, #92]	; (8009bec <calc_voltage_raw+0x9c>)
 8009b8e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8009b92:	79bb      	ldrb	r3, [r7, #6]
 8009b94:	440a      	add	r2, r1
 8009b96:	b291      	uxth	r1, r2
 8009b98:	4a13      	ldr	r2, [pc, #76]	; (8009be8 <calc_voltage_raw+0x98>)
 8009b9a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(uint8_t j=0; j<12; j++){
 8009b9e:	797b      	ldrb	r3, [r7, #5]
 8009ba0:	3301      	adds	r3, #1
 8009ba2:	717b      	strb	r3, [r7, #5]
 8009ba4:	797b      	ldrb	r3, [r7, #5]
 8009ba6:	2b0b      	cmp	r3, #11
 8009ba8:	d9e9      	bls.n	8009b7e <calc_voltage_raw+0x2e>
	for (uint8_t i = 0; i < 12*8; i = i + 12) {
 8009baa:	79bb      	ldrb	r3, [r7, #6]
 8009bac:	330c      	adds	r3, #12
 8009bae:	71bb      	strb	r3, [r7, #6]
 8009bb0:	79bb      	ldrb	r3, [r7, #6]
 8009bb2:	2b5f      	cmp	r3, #95	; 0x5f
 8009bb4:	d9e0      	bls.n	8009b78 <calc_voltage_raw+0x28>
		}

	}

	for(uint8_t i=0; i<12; i++){
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	713b      	strb	r3, [r7, #4]
 8009bba:	e00c      	b.n	8009bd6 <calc_voltage_raw+0x86>
		adc_data_raw[i] = (int) adc_data_raw[i] / 8;
 8009bbc:	793b      	ldrb	r3, [r7, #4]
 8009bbe:	4a0a      	ldr	r2, [pc, #40]	; (8009be8 <calc_voltage_raw+0x98>)
 8009bc0:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8009bc4:	793b      	ldrb	r3, [r7, #4]
 8009bc6:	08d2      	lsrs	r2, r2, #3
 8009bc8:	b291      	uxth	r1, r2
 8009bca:	4a07      	ldr	r2, [pc, #28]	; (8009be8 <calc_voltage_raw+0x98>)
 8009bcc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(uint8_t i=0; i<12; i++){
 8009bd0:	793b      	ldrb	r3, [r7, #4]
 8009bd2:	3301      	adds	r3, #1
 8009bd4:	713b      	strb	r3, [r7, #4]
 8009bd6:	793b      	ldrb	r3, [r7, #4]
 8009bd8:	2b0b      	cmp	r3, #11
 8009bda:	d9ef      	bls.n	8009bbc <calc_voltage_raw+0x6c>
	}

}
 8009bdc:	bf00      	nop
 8009bde:	bf00      	nop
 8009be0:	370c      	adds	r7, #12
 8009be2:	46bd      	mov	sp, r7
 8009be4:	bc80      	pop	{r7}
 8009be6:	4770      	bx	lr
 8009be8:	20001488 	.word	0x20001488
 8009bec:	200013c8 	.word	0x200013c8

08009bf0 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b082      	sub	sp, #8
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]

    if(hadc->Instance == ADC1)
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	4a09      	ldr	r2, [pc, #36]	; (8009c24 <HAL_ADC_ConvCpltCallback+0x34>)
 8009bfe:	4293      	cmp	r3, r2
 8009c00:	d10c      	bne.n	8009c1c <HAL_ADC_ConvCpltCallback+0x2c>
    {
    	adc_conv_flag = 1;
 8009c02:	4b09      	ldr	r3, [pc, #36]	; (8009c28 <HAL_ADC_ConvCpltCallback+0x38>)
 8009c04:	2201      	movs	r2, #1
 8009c06:	701a      	strb	r2, [r3, #0]
        HAL_ADC_Stop_DMA(hadc); // это необязательно
 8009c08:	6878      	ldr	r0, [r7, #4]
 8009c0a:	f7f7 fb71 	bl	80012f0 <HAL_ADC_Stop_DMA>
        calc_voltage_raw();
 8009c0e:	f7ff ff9f 	bl	8009b50 <calc_voltage_raw>
        HAL_ADC_Start_DMA(hadc, (uint32_t*)&adc_data, 4*8);
 8009c12:	2220      	movs	r2, #32
 8009c14:	4905      	ldr	r1, [pc, #20]	; (8009c2c <HAL_ADC_ConvCpltCallback+0x3c>)
 8009c16:	6878      	ldr	r0, [r7, #4]
 8009c18:	f7f7 face 	bl	80011b8 <HAL_ADC_Start_DMA>
    }
}
 8009c1c:	bf00      	nop
 8009c1e:	3708      	adds	r7, #8
 8009c20:	46bd      	mov	sp, r7
 8009c22:	bd80      	pop	{r7, pc}
 8009c24:	40012400 	.word	0x40012400
 8009c28:	200014a0 	.word	0x200014a0
 8009c2c:	200013c8 	.word	0x200013c8

08009c30 <kernel_init>:
/////////////////////////////////////////////////////////////////////////////////
// INIT
/////////////////////////////////////////////////////////////////////////////////


void kernel_init() {
 8009c30:	b580      	push	{r7, lr}
 8009c32:	af00      	add	r7, sp, #0

	usb_set_callback(&usb_callback);
 8009c34:	4839      	ldr	r0, [pc, #228]	; (8009d1c <kernel_init+0xec>)
 8009c36:	f000 f9d5 	bl	8009fe4 <usb_set_callback>
    //////////////////////////////////

	HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8009c3a:	2100      	movs	r1, #0
 8009c3c:	4838      	ldr	r0, [pc, #224]	; (8009d20 <kernel_init+0xf0>)
 8009c3e:	f7f8 f8b7 	bl	8001db0 <HAL_DAC_Start>
	HAL_DAC_Start(&hdac, DAC_CHANNEL_2);
 8009c42:	2110      	movs	r1, #16
 8009c44:	4836      	ldr	r0, [pc, #216]	; (8009d20 <kernel_init+0xf0>)
 8009c46:	f7f8 f8b3 	bl	8001db0 <HAL_DAC_Start>

	HAL_DAC_SetValue(&hdac, DAC1_CHANNEL_1, DAC_ALIGN_12B_R, 0);
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	2200      	movs	r2, #0
 8009c4e:	2100      	movs	r1, #0
 8009c50:	4833      	ldr	r0, [pc, #204]	; (8009d20 <kernel_init+0xf0>)
 8009c52:	f7f8 f90f 	bl	8001e74 <HAL_DAC_SetValue>
	HAL_DAC_SetValue(&hdac, DAC1_CHANNEL_1, DAC_ALIGN_12B_R, 0);
 8009c56:	2300      	movs	r3, #0
 8009c58:	2200      	movs	r2, #0
 8009c5a:	2100      	movs	r1, #0
 8009c5c:	4830      	ldr	r0, [pc, #192]	; (8009d20 <kernel_init+0xf0>)
 8009c5e:	f7f8 f909 	bl	8001e74 <HAL_DAC_SetValue>

	HAL_Delay(2000);
 8009c62:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8009c66:	f7f6 ffe5 	bl	8000c34 <HAL_Delay>

	HAL_GPIO_WritePin(L1_GPIO_Port, L1_Pin, 1);
 8009c6a:	2201      	movs	r2, #1
 8009c6c:	2180      	movs	r1, #128	; 0x80
 8009c6e:	482d      	ldr	r0, [pc, #180]	; (8009d24 <kernel_init+0xf4>)
 8009c70:	f7f8 feb8 	bl	80029e4 <HAL_GPIO_WritePin>
	HAL_Delay(300);
 8009c74:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8009c78:	f7f6 ffdc 	bl	8000c34 <HAL_Delay>
	HAL_GPIO_WritePin(L1_GPIO_Port, L1_Pin, 0);
 8009c7c:	2200      	movs	r2, #0
 8009c7e:	2180      	movs	r1, #128	; 0x80
 8009c80:	4828      	ldr	r0, [pc, #160]	; (8009d24 <kernel_init+0xf4>)
 8009c82:	f7f8 feaf 	bl	80029e4 <HAL_GPIO_WritePin>

	HAL_Delay(300);
 8009c86:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8009c8a:	f7f6 ffd3 	bl	8000c34 <HAL_Delay>
	HAL_GPIO_WritePin(L2_GPIO_Port, L2_Pin, 1);
 8009c8e:	2201      	movs	r2, #1
 8009c90:	2140      	movs	r1, #64	; 0x40
 8009c92:	4824      	ldr	r0, [pc, #144]	; (8009d24 <kernel_init+0xf4>)
 8009c94:	f7f8 fea6 	bl	80029e4 <HAL_GPIO_WritePin>
	HAL_Delay(300);
 8009c98:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8009c9c:	f7f6 ffca 	bl	8000c34 <HAL_Delay>
	HAL_GPIO_WritePin(L2_GPIO_Port, L2_Pin, 0);
 8009ca0:	2200      	movs	r2, #0
 8009ca2:	2140      	movs	r1, #64	; 0x40
 8009ca4:	481f      	ldr	r0, [pc, #124]	; (8009d24 <kernel_init+0xf4>)
 8009ca6:	f7f8 fe9d 	bl	80029e4 <HAL_GPIO_WritePin>

	HAL_Delay(300);
 8009caa:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8009cae:	f7f6 ffc1 	bl	8000c34 <HAL_Delay>
	HAL_GPIO_WritePin(L3_GPIO_Port, L3_Pin, 1);
 8009cb2:	2201      	movs	r2, #1
 8009cb4:	2120      	movs	r1, #32
 8009cb6:	481b      	ldr	r0, [pc, #108]	; (8009d24 <kernel_init+0xf4>)
 8009cb8:	f7f8 fe94 	bl	80029e4 <HAL_GPIO_WritePin>
	HAL_Delay(300);
 8009cbc:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8009cc0:	f7f6 ffb8 	bl	8000c34 <HAL_Delay>
	HAL_GPIO_WritePin(L3_GPIO_Port, L3_Pin, 0);
 8009cc4:	2200      	movs	r2, #0
 8009cc6:	2120      	movs	r1, #32
 8009cc8:	4816      	ldr	r0, [pc, #88]	; (8009d24 <kernel_init+0xf4>)
 8009cca:	f7f8 fe8b 	bl	80029e4 <HAL_GPIO_WritePin>

	HAL_Delay(300);
 8009cce:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8009cd2:	f7f6 ffaf 	bl	8000c34 <HAL_Delay>
	HAL_GPIO_WritePin(L4_GPIO_Port, L4_Pin, 1);
 8009cd6:	2201      	movs	r2, #1
 8009cd8:	2110      	movs	r1, #16
 8009cda:	4812      	ldr	r0, [pc, #72]	; (8009d24 <kernel_init+0xf4>)
 8009cdc:	f7f8 fe82 	bl	80029e4 <HAL_GPIO_WritePin>
	HAL_Delay(300);
 8009ce0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8009ce4:	f7f6 ffa6 	bl	8000c34 <HAL_Delay>
	HAL_GPIO_WritePin(L4_GPIO_Port, L4_Pin, 0);
 8009ce8:	2200      	movs	r2, #0
 8009cea:	2110      	movs	r1, #16
 8009cec:	480d      	ldr	r0, [pc, #52]	; (8009d24 <kernel_init+0xf4>)
 8009cee:	f7f8 fe79 	bl	80029e4 <HAL_GPIO_WritePin>
	HAL_Delay(300);
 8009cf2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8009cf6:	f7f6 ff9d 	bl	8000c34 <HAL_Delay>

	if(HAL_ADC_Start_DMA(&hadc, (uint32_t*)&adc_data,  4*8) != HAL_OK){
 8009cfa:	2220      	movs	r2, #32
 8009cfc:	490a      	ldr	r1, [pc, #40]	; (8009d28 <kernel_init+0xf8>)
 8009cfe:	480b      	ldr	r0, [pc, #44]	; (8009d2c <kernel_init+0xfc>)
 8009d00:	f7f7 fa5a 	bl	80011b8 <HAL_ADC_Start_DMA>
 8009d04:	4603      	mov	r3, r0
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d000      	beq.n	8009d0c <kernel_init+0xdc>
			while(1){}
 8009d0a:	e7fe      	b.n	8009d0a <kernel_init+0xda>
	}
	HAL_GPIO_WritePin(L4_GPIO_Port, L4_Pin, 1);
 8009d0c:	2201      	movs	r2, #1
 8009d0e:	2110      	movs	r1, #16
 8009d10:	4804      	ldr	r0, [pc, #16]	; (8009d24 <kernel_init+0xf4>)
 8009d12:	f7f8 fe67 	bl	80029e4 <HAL_GPIO_WritePin>


}
 8009d16:	bf00      	nop
 8009d18:	bd80      	pop	{r7, pc}
 8009d1a:	bf00      	nop
 8009d1c:	08009919 	.word	0x08009919
 8009d20:	20000234 	.word	0x20000234
 8009d24:	40020400 	.word	0x40020400
 8009d28:	200013c8 	.word	0x200013c8
 8009d2c:	2000019c 	.word	0x2000019c

08009d30 <kernel_main>:
// MAIN
/////////////////////////////////////////////////////////////////////////////////



void kernel_main() {
 8009d30:	b580      	push	{r7, lr}
 8009d32:	af00      	add	r7, sp, #0

	kernel_init();
 8009d34:	f7ff ff7c 	bl	8009c30 <kernel_init>



    while(1){

    	HAL_Delay(1);
 8009d38:	2001      	movs	r0, #1
 8009d3a:	f7f6 ff7b 	bl	8000c34 <HAL_Delay>
 8009d3e:	e7fb      	b.n	8009d38 <kernel_main+0x8>

08009d40 <usb_add_uint8>:
USBD_StatusTypeDef last_statius = USBD_FAIL;

//////////////////////////////////////////////
// int val
//////////////////////////////////////////////
uint8_t usb_add_uint8(uint8_t data){
 8009d40:	b480      	push	{r7}
 8009d42:	b083      	sub	sp, #12
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	4603      	mov	r3, r0
 8009d48:	71fb      	strb	r3, [r7, #7]
	usb_buff[usb_cursor] = data;
 8009d4a:	4b0c      	ldr	r3, [pc, #48]	; (8009d7c <usb_add_uint8+0x3c>)
 8009d4c:	781b      	ldrb	r3, [r3, #0]
 8009d4e:	4619      	mov	r1, r3
 8009d50:	4a0b      	ldr	r2, [pc, #44]	; (8009d80 <usb_add_uint8+0x40>)
 8009d52:	79fb      	ldrb	r3, [r7, #7]
 8009d54:	5453      	strb	r3, [r2, r1]
	usb_cursor++;
 8009d56:	4b09      	ldr	r3, [pc, #36]	; (8009d7c <usb_add_uint8+0x3c>)
 8009d58:	781b      	ldrb	r3, [r3, #0]
 8009d5a:	3301      	adds	r3, #1
 8009d5c:	b2da      	uxtb	r2, r3
 8009d5e:	4b07      	ldr	r3, [pc, #28]	; (8009d7c <usb_add_uint8+0x3c>)
 8009d60:	701a      	strb	r2, [r3, #0]
	usb_len++;
 8009d62:	4b08      	ldr	r3, [pc, #32]	; (8009d84 <usb_add_uint8+0x44>)
 8009d64:	881b      	ldrh	r3, [r3, #0]
 8009d66:	3301      	adds	r3, #1
 8009d68:	b29a      	uxth	r2, r3
 8009d6a:	4b06      	ldr	r3, [pc, #24]	; (8009d84 <usb_add_uint8+0x44>)
 8009d6c:	801a      	strh	r2, [r3, #0]
	return usb_cursor; //return next byte number
 8009d6e:	4b03      	ldr	r3, [pc, #12]	; (8009d7c <usb_add_uint8+0x3c>)
 8009d70:	781b      	ldrb	r3, [r3, #0]
}
 8009d72:	4618      	mov	r0, r3
 8009d74:	370c      	adds	r7, #12
 8009d76:	46bd      	mov	sp, r7
 8009d78:	bc80      	pop	{r7}
 8009d7a:	4770      	bx	lr
 8009d7c:	200014a1 	.word	0x200014a1
 8009d80:	200014a4 	.word	0x200014a4
 8009d84:	200014a2 	.word	0x200014a2

08009d88 <usb_add_uint16>:
uint8_t usb_add_uint16(uint16_t data){
 8009d88:	b480      	push	{r7}
 8009d8a:	b083      	sub	sp, #12
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	4603      	mov	r3, r0
 8009d90:	80fb      	strh	r3, [r7, #6]
	usb_buff[usb_cursor] = data & 0xFF;
 8009d92:	4b17      	ldr	r3, [pc, #92]	; (8009df0 <usb_add_uint16+0x68>)
 8009d94:	781b      	ldrb	r3, [r3, #0]
 8009d96:	461a      	mov	r2, r3
 8009d98:	88fb      	ldrh	r3, [r7, #6]
 8009d9a:	b2d9      	uxtb	r1, r3
 8009d9c:	4b15      	ldr	r3, [pc, #84]	; (8009df4 <usb_add_uint16+0x6c>)
 8009d9e:	5499      	strb	r1, [r3, r2]
	usb_cursor++;
 8009da0:	4b13      	ldr	r3, [pc, #76]	; (8009df0 <usb_add_uint16+0x68>)
 8009da2:	781b      	ldrb	r3, [r3, #0]
 8009da4:	3301      	adds	r3, #1
 8009da6:	b2da      	uxtb	r2, r3
 8009da8:	4b11      	ldr	r3, [pc, #68]	; (8009df0 <usb_add_uint16+0x68>)
 8009daa:	701a      	strb	r2, [r3, #0]
	usb_len++;
 8009dac:	4b12      	ldr	r3, [pc, #72]	; (8009df8 <usb_add_uint16+0x70>)
 8009dae:	881b      	ldrh	r3, [r3, #0]
 8009db0:	3301      	adds	r3, #1
 8009db2:	b29a      	uxth	r2, r3
 8009db4:	4b10      	ldr	r3, [pc, #64]	; (8009df8 <usb_add_uint16+0x70>)
 8009db6:	801a      	strh	r2, [r3, #0]
	usb_buff[usb_cursor] = data >> 8;
 8009db8:	88fb      	ldrh	r3, [r7, #6]
 8009dba:	0a1b      	lsrs	r3, r3, #8
 8009dbc:	b299      	uxth	r1, r3
 8009dbe:	4b0c      	ldr	r3, [pc, #48]	; (8009df0 <usb_add_uint16+0x68>)
 8009dc0:	781b      	ldrb	r3, [r3, #0]
 8009dc2:	461a      	mov	r2, r3
 8009dc4:	b2c9      	uxtb	r1, r1
 8009dc6:	4b0b      	ldr	r3, [pc, #44]	; (8009df4 <usb_add_uint16+0x6c>)
 8009dc8:	5499      	strb	r1, [r3, r2]
	usb_cursor++;
 8009dca:	4b09      	ldr	r3, [pc, #36]	; (8009df0 <usb_add_uint16+0x68>)
 8009dcc:	781b      	ldrb	r3, [r3, #0]
 8009dce:	3301      	adds	r3, #1
 8009dd0:	b2da      	uxtb	r2, r3
 8009dd2:	4b07      	ldr	r3, [pc, #28]	; (8009df0 <usb_add_uint16+0x68>)
 8009dd4:	701a      	strb	r2, [r3, #0]
	usb_len++;
 8009dd6:	4b08      	ldr	r3, [pc, #32]	; (8009df8 <usb_add_uint16+0x70>)
 8009dd8:	881b      	ldrh	r3, [r3, #0]
 8009dda:	3301      	adds	r3, #1
 8009ddc:	b29a      	uxth	r2, r3
 8009dde:	4b06      	ldr	r3, [pc, #24]	; (8009df8 <usb_add_uint16+0x70>)
 8009de0:	801a      	strh	r2, [r3, #0]
	return usb_cursor;
 8009de2:	4b03      	ldr	r3, [pc, #12]	; (8009df0 <usb_add_uint16+0x68>)
 8009de4:	781b      	ldrb	r3, [r3, #0]
}
 8009de6:	4618      	mov	r0, r3
 8009de8:	370c      	adds	r7, #12
 8009dea:	46bd      	mov	sp, r7
 8009dec:	bc80      	pop	{r7}
 8009dee:	4770      	bx	lr
 8009df0:	200014a1 	.word	0x200014a1
 8009df4:	200014a4 	.word	0x200014a4
 8009df8:	200014a2 	.word	0x200014a2

08009dfc <usb_add_uint32>:
uint8_t usb_add_uint32(uint32_t data){
 8009dfc:	b480      	push	{r7}
 8009dfe:	b083      	sub	sp, #12
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	6078      	str	r0, [r7, #4]
	usb_buff[usb_cursor] = data 		& 0xFF;
 8009e04:	4b2a      	ldr	r3, [pc, #168]	; (8009eb0 <usb_add_uint32+0xb4>)
 8009e06:	781b      	ldrb	r3, [r3, #0]
 8009e08:	461a      	mov	r2, r3
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	b2d9      	uxtb	r1, r3
 8009e0e:	4b29      	ldr	r3, [pc, #164]	; (8009eb4 <usb_add_uint32+0xb8>)
 8009e10:	5499      	strb	r1, [r3, r2]
	usb_cursor++;
 8009e12:	4b27      	ldr	r3, [pc, #156]	; (8009eb0 <usb_add_uint32+0xb4>)
 8009e14:	781b      	ldrb	r3, [r3, #0]
 8009e16:	3301      	adds	r3, #1
 8009e18:	b2da      	uxtb	r2, r3
 8009e1a:	4b25      	ldr	r3, [pc, #148]	; (8009eb0 <usb_add_uint32+0xb4>)
 8009e1c:	701a      	strb	r2, [r3, #0]
	usb_len++;
 8009e1e:	4b26      	ldr	r3, [pc, #152]	; (8009eb8 <usb_add_uint32+0xbc>)
 8009e20:	881b      	ldrh	r3, [r3, #0]
 8009e22:	3301      	adds	r3, #1
 8009e24:	b29a      	uxth	r2, r3
 8009e26:	4b24      	ldr	r3, [pc, #144]	; (8009eb8 <usb_add_uint32+0xbc>)
 8009e28:	801a      	strh	r2, [r3, #0]
	usb_buff[usb_cursor] = (data >> 8 )	& 0xFF;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	0a19      	lsrs	r1, r3, #8
 8009e2e:	4b20      	ldr	r3, [pc, #128]	; (8009eb0 <usb_add_uint32+0xb4>)
 8009e30:	781b      	ldrb	r3, [r3, #0]
 8009e32:	461a      	mov	r2, r3
 8009e34:	b2c9      	uxtb	r1, r1
 8009e36:	4b1f      	ldr	r3, [pc, #124]	; (8009eb4 <usb_add_uint32+0xb8>)
 8009e38:	5499      	strb	r1, [r3, r2]
	usb_cursor++;
 8009e3a:	4b1d      	ldr	r3, [pc, #116]	; (8009eb0 <usb_add_uint32+0xb4>)
 8009e3c:	781b      	ldrb	r3, [r3, #0]
 8009e3e:	3301      	adds	r3, #1
 8009e40:	b2da      	uxtb	r2, r3
 8009e42:	4b1b      	ldr	r3, [pc, #108]	; (8009eb0 <usb_add_uint32+0xb4>)
 8009e44:	701a      	strb	r2, [r3, #0]
	usb_len++;
 8009e46:	4b1c      	ldr	r3, [pc, #112]	; (8009eb8 <usb_add_uint32+0xbc>)
 8009e48:	881b      	ldrh	r3, [r3, #0]
 8009e4a:	3301      	adds	r3, #1
 8009e4c:	b29a      	uxth	r2, r3
 8009e4e:	4b1a      	ldr	r3, [pc, #104]	; (8009eb8 <usb_add_uint32+0xbc>)
 8009e50:	801a      	strh	r2, [r3, #0]
	usb_buff[usb_cursor] = (data >> 16)	& 0xFF;
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	0c19      	lsrs	r1, r3, #16
 8009e56:	4b16      	ldr	r3, [pc, #88]	; (8009eb0 <usb_add_uint32+0xb4>)
 8009e58:	781b      	ldrb	r3, [r3, #0]
 8009e5a:	461a      	mov	r2, r3
 8009e5c:	b2c9      	uxtb	r1, r1
 8009e5e:	4b15      	ldr	r3, [pc, #84]	; (8009eb4 <usb_add_uint32+0xb8>)
 8009e60:	5499      	strb	r1, [r3, r2]
	usb_cursor++;
 8009e62:	4b13      	ldr	r3, [pc, #76]	; (8009eb0 <usb_add_uint32+0xb4>)
 8009e64:	781b      	ldrb	r3, [r3, #0]
 8009e66:	3301      	adds	r3, #1
 8009e68:	b2da      	uxtb	r2, r3
 8009e6a:	4b11      	ldr	r3, [pc, #68]	; (8009eb0 <usb_add_uint32+0xb4>)
 8009e6c:	701a      	strb	r2, [r3, #0]
	usb_len++;
 8009e6e:	4b12      	ldr	r3, [pc, #72]	; (8009eb8 <usb_add_uint32+0xbc>)
 8009e70:	881b      	ldrh	r3, [r3, #0]
 8009e72:	3301      	adds	r3, #1
 8009e74:	b29a      	uxth	r2, r3
 8009e76:	4b10      	ldr	r3, [pc, #64]	; (8009eb8 <usb_add_uint32+0xbc>)
 8009e78:	801a      	strh	r2, [r3, #0]
	usb_buff[usb_cursor] = data >> 24;
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	0e19      	lsrs	r1, r3, #24
 8009e7e:	4b0c      	ldr	r3, [pc, #48]	; (8009eb0 <usb_add_uint32+0xb4>)
 8009e80:	781b      	ldrb	r3, [r3, #0]
 8009e82:	461a      	mov	r2, r3
 8009e84:	b2c9      	uxtb	r1, r1
 8009e86:	4b0b      	ldr	r3, [pc, #44]	; (8009eb4 <usb_add_uint32+0xb8>)
 8009e88:	5499      	strb	r1, [r3, r2]
	usb_cursor++;
 8009e8a:	4b09      	ldr	r3, [pc, #36]	; (8009eb0 <usb_add_uint32+0xb4>)
 8009e8c:	781b      	ldrb	r3, [r3, #0]
 8009e8e:	3301      	adds	r3, #1
 8009e90:	b2da      	uxtb	r2, r3
 8009e92:	4b07      	ldr	r3, [pc, #28]	; (8009eb0 <usb_add_uint32+0xb4>)
 8009e94:	701a      	strb	r2, [r3, #0]
	usb_len++;
 8009e96:	4b08      	ldr	r3, [pc, #32]	; (8009eb8 <usb_add_uint32+0xbc>)
 8009e98:	881b      	ldrh	r3, [r3, #0]
 8009e9a:	3301      	adds	r3, #1
 8009e9c:	b29a      	uxth	r2, r3
 8009e9e:	4b06      	ldr	r3, [pc, #24]	; (8009eb8 <usb_add_uint32+0xbc>)
 8009ea0:	801a      	strh	r2, [r3, #0]
	return usb_cursor;
 8009ea2:	4b03      	ldr	r3, [pc, #12]	; (8009eb0 <usb_add_uint32+0xb4>)
 8009ea4:	781b      	ldrb	r3, [r3, #0]
}
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	370c      	adds	r7, #12
 8009eaa:	46bd      	mov	sp, r7
 8009eac:	bc80      	pop	{r7}
 8009eae:	4770      	bx	lr
 8009eb0:	200014a1 	.word	0x200014a1
 8009eb4:	200014a4 	.word	0x200014a4
 8009eb8:	200014a2 	.word	0x200014a2

08009ebc <usb_rst_cursor>:
		usb_len++;
	}
	return usb_cursor;
}

void usb_rst_cursor(){
 8009ebc:	b480      	push	{r7}
 8009ebe:	af00      	add	r7, sp, #0
	usb_cursor = 0;
 8009ec0:	4b03      	ldr	r3, [pc, #12]	; (8009ed0 <usb_rst_cursor+0x14>)
 8009ec2:	2200      	movs	r2, #0
 8009ec4:	701a      	strb	r2, [r3, #0]
}
 8009ec6:	bf00      	nop
 8009ec8:	46bd      	mov	sp, r7
 8009eca:	bc80      	pop	{r7}
 8009ecc:	4770      	bx	lr
 8009ece:	bf00      	nop
 8009ed0:	200014a1 	.word	0x200014a1

08009ed4 <usb_send_buff>:
}

//////////////////////////////////////////////
// send buffer
//////////////////////////////////////////////
USBD_StatusTypeDef usb_send_buff(){
 8009ed4:	b580      	push	{r7, lr}
 8009ed6:	b0c4      	sub	sp, #272	; 0x110
 8009ed8:	af00      	add	r7, sp, #0
	//////////////////////////////////////////////
	// generate log packet
		uint16_t data_len = 0;
 8009eda:	2300      	movs	r3, #0
 8009edc:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
		uint8_t data_packet[260];
		uint16_t len = 0;
 8009ee0:	2300      	movs	r3, #0
 8009ee2:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
		if(usb_cursor == 0){
 8009ee6:	4b36      	ldr	r3, [pc, #216]	; (8009fc0 <usb_send_buff+0xec>)
 8009ee8:	781b      	ldrb	r3, [r3, #0]
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d104      	bne.n	8009ef8 <usb_send_buff+0x24>
			len = 256;
 8009eee:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009ef2:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
 8009ef6:	e003      	b.n	8009f00 <usb_send_buff+0x2c>
		}else{
			len = usb_cursor;
 8009ef8:	4b31      	ldr	r3, [pc, #196]	; (8009fc0 <usb_send_buff+0xec>)
 8009efa:	781b      	ldrb	r3, [r3, #0]
 8009efc:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
		}
		//uint8_t	data_crc = 0;
		data_len = 0;
 8009f00:	2300      	movs	r3, #0
 8009f02:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		//preamp
		data_packet[0] = 0xAA;
 8009f06:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009f0a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8009f0e:	22aa      	movs	r2, #170	; 0xaa
 8009f10:	701a      	strb	r2, [r3, #0]
		data_len++;
 8009f12:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8009f16:	3301      	adds	r3, #1
 8009f18:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
		//lenH;
		data_len++;
 8009f1c:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8009f20:	3301      	adds	r3, #1
 8009f22:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
		//lenL;
		data_len++;
 8009f26:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8009f2a:	3301      	adds	r3, #1
 8009f2c:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		/////////////fill packet
		for (uint16_t i = 0; i < len; i++) {
 8009f30:	2300      	movs	r3, #0
 8009f32:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 8009f36:	e014      	b.n	8009f62 <usb_send_buff+0x8e>
			data_packet[data_len] = usb_buff[i];
 8009f38:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8009f3c:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8009f40:	4920      	ldr	r1, [pc, #128]	; (8009fc4 <usb_send_buff+0xf0>)
 8009f42:	5c89      	ldrb	r1, [r1, r2]
 8009f44:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8009f48:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8009f4c:	54d1      	strb	r1, [r2, r3]
			data_len++;
 8009f4e:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8009f52:	3301      	adds	r3, #1
 8009f54:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
		for (uint16_t i = 0; i < len; i++) {
 8009f58:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 8009f5c:	3301      	adds	r3, #1
 8009f5e:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 8009f62:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8009f66:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 8009f6a:	429a      	cmp	r2, r3
 8009f6c:	d3e4      	bcc.n	8009f38 <usb_send_buff+0x64>
		}

		data_packet[1] = data_len>>8;
 8009f6e:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8009f72:	0a1b      	lsrs	r3, r3, #8
 8009f74:	b29b      	uxth	r3, r3
 8009f76:	b2da      	uxtb	r2, r3
 8009f78:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009f7c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8009f80:	705a      	strb	r2, [r3, #1]
		data_packet[2] = data_len & 0xFF;
 8009f82:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8009f86:	b2da      	uxtb	r2, r3
 8009f88:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009f8c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8009f90:	709a      	strb	r2, [r3, #2]
		//data_packet[data_len] = crc8Maxim(data_packet, data_len-1);  //uart sync crc
		data_len++;
 8009f92:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8009f96:	3301      	adds	r3, #1
 8009f98:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		// [0xAA][len][rssi][snr][data...][crc]
		// в длину пакета crc не входит
		last_statius = CDC_Transmit_FS(data_packet, data_len);
 8009f9c:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8009fa0:	1d3b      	adds	r3, r7, #4
 8009fa2:	4611      	mov	r1, r2
 8009fa4:	4618      	mov	r0, r3
 8009fa6:	f7ff f8c5 	bl	8009134 <CDC_Transmit_FS>
 8009faa:	4603      	mov	r3, r0
 8009fac:	461a      	mov	r2, r3
 8009fae:	4b06      	ldr	r3, [pc, #24]	; (8009fc8 <usb_send_buff+0xf4>)
 8009fb0:	701a      	strb	r2, [r3, #0]
		return last_statius;
 8009fb2:	4b05      	ldr	r3, [pc, #20]	; (8009fc8 <usb_send_buff+0xf4>)
 8009fb4:	781b      	ldrb	r3, [r3, #0]
}
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8009fbc:	46bd      	mov	sp, r7
 8009fbe:	bd80      	pop	{r7, pc}
 8009fc0:	200014a1 	.word	0x200014a1
 8009fc4:	200014a4 	.word	0x200014a4
 8009fc8:	2000017a 	.word	0x2000017a

08009fcc <usb_def_callback>:
uint8_t usb_rx[256];

uint8_t usb_ln = 0;
uint8_t usb_stp = 0;

void usb_def_callback(uint8_t *arr, uint8_t len){
 8009fcc:	b480      	push	{r7}
 8009fce:	b083      	sub	sp, #12
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	6078      	str	r0, [r7, #4]
 8009fd4:	460b      	mov	r3, r1
 8009fd6:	70fb      	strb	r3, [r7, #3]

}
 8009fd8:	bf00      	nop
 8009fda:	370c      	adds	r7, #12
 8009fdc:	46bd      	mov	sp, r7
 8009fde:	bc80      	pop	{r7}
 8009fe0:	4770      	bx	lr
	...

08009fe4 <usb_set_callback>:





void usb_set_callback(void (*func)(uint8_t *, uint8_t)){
 8009fe4:	b480      	push	{r7}
 8009fe6:	b083      	sub	sp, #12
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	6078      	str	r0, [r7, #4]
	f_rx = func;
 8009fec:	4a03      	ldr	r2, [pc, #12]	; (8009ffc <usb_set_callback+0x18>)
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	6013      	str	r3, [r2, #0]
}
 8009ff2:	bf00      	nop
 8009ff4:	370c      	adds	r7, #12
 8009ff6:	46bd      	mov	sp, r7
 8009ff8:	bc80      	pop	{r7}
 8009ffa:	4770      	bx	lr
 8009ffc:	2000017c 	.word	0x2000017c

0800a000 <usb_recv>:
  return (USBD_OK);
  / USER CODE END 6 /
}
************************************************************/

void usb_recv(uint8_t b){
 800a000:	b580      	push	{r7, lr}
 800a002:	b082      	sub	sp, #8
 800a004:	af00      	add	r7, sp, #0
 800a006:	4603      	mov	r3, r0
 800a008:	71fb      	strb	r3, [r7, #7]
	//preamp
	if(usb_stp == 0){
 800a00a:	4b2b      	ldr	r3, [pc, #172]	; (800a0b8 <usb_recv+0xb8>)
 800a00c:	781b      	ldrb	r3, [r3, #0]
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d10d      	bne.n	800a02e <usb_recv+0x2e>
		if(b == 0xAA ){
 800a012:	79fb      	ldrb	r3, [r7, #7]
 800a014:	2baa      	cmp	r3, #170	; 0xaa
 800a016:	d106      	bne.n	800a026 <usb_recv+0x26>
			usb_stp++;
 800a018:	4b27      	ldr	r3, [pc, #156]	; (800a0b8 <usb_recv+0xb8>)
 800a01a:	781b      	ldrb	r3, [r3, #0]
 800a01c:	3301      	adds	r3, #1
 800a01e:	b2da      	uxtb	r2, r3
 800a020:	4b25      	ldr	r3, [pc, #148]	; (800a0b8 <usb_recv+0xb8>)
 800a022:	701a      	strb	r2, [r3, #0]
		}else{
			usb_stp = 0;
		}
		return;
 800a024:	e045      	b.n	800a0b2 <usb_recv+0xb2>
			usb_stp = 0;
 800a026:	4b24      	ldr	r3, [pc, #144]	; (800a0b8 <usb_recv+0xb8>)
 800a028:	2200      	movs	r2, #0
 800a02a:	701a      	strb	r2, [r3, #0]
		return;
 800a02c:	e041      	b.n	800a0b2 <usb_recv+0xb2>
	}
	//len
	if(usb_stp == 1){
 800a02e:	4b22      	ldr	r3, [pc, #136]	; (800a0b8 <usb_recv+0xb8>)
 800a030:	781b      	ldrb	r3, [r3, #0]
 800a032:	2b01      	cmp	r3, #1
 800a034:	d110      	bne.n	800a058 <usb_recv+0x58>
		usb_ln = b;
 800a036:	4a21      	ldr	r2, [pc, #132]	; (800a0bc <usb_recv+0xbc>)
 800a038:	79fb      	ldrb	r3, [r7, #7]
 800a03a:	7013      	strb	r3, [r2, #0]
		usb_stp++;
 800a03c:	4b1e      	ldr	r3, [pc, #120]	; (800a0b8 <usb_recv+0xb8>)
 800a03e:	781b      	ldrb	r3, [r3, #0]
 800a040:	3301      	adds	r3, #1
 800a042:	b2da      	uxtb	r2, r3
 800a044:	4b1c      	ldr	r3, [pc, #112]	; (800a0b8 <usb_recv+0xb8>)
 800a046:	701a      	strb	r2, [r3, #0]
		if(usb_ln == 0){
 800a048:	4b1c      	ldr	r3, [pc, #112]	; (800a0bc <usb_recv+0xbc>)
 800a04a:	781b      	ldrb	r3, [r3, #0]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d12d      	bne.n	800a0ac <usb_recv+0xac>
			usb_stp = 0;
 800a050:	4b19      	ldr	r3, [pc, #100]	; (800a0b8 <usb_recv+0xb8>)
 800a052:	2200      	movs	r2, #0
 800a054:	701a      	strb	r2, [r3, #0]
			return;
 800a056:	e02c      	b.n	800a0b2 <usb_recv+0xb2>
		}
		return;
	}
	//data
	if(usb_stp < usb_ln+2){
 800a058:	4b18      	ldr	r3, [pc, #96]	; (800a0bc <usb_recv+0xbc>)
 800a05a:	781b      	ldrb	r3, [r3, #0]
 800a05c:	3301      	adds	r3, #1
 800a05e:	4a16      	ldr	r2, [pc, #88]	; (800a0b8 <usb_recv+0xb8>)
 800a060:	7812      	ldrb	r2, [r2, #0]
 800a062:	4293      	cmp	r3, r2
 800a064:	db1e      	blt.n	800a0a4 <usb_recv+0xa4>
		usb_rx[usb_stp - 2] = b;
 800a066:	4b14      	ldr	r3, [pc, #80]	; (800a0b8 <usb_recv+0xb8>)
 800a068:	781b      	ldrb	r3, [r3, #0]
 800a06a:	3b02      	subs	r3, #2
 800a06c:	4914      	ldr	r1, [pc, #80]	; (800a0c0 <usb_recv+0xc0>)
 800a06e:	79fa      	ldrb	r2, [r7, #7]
 800a070:	54ca      	strb	r2, [r1, r3]
		usb_stp++;
 800a072:	4b11      	ldr	r3, [pc, #68]	; (800a0b8 <usb_recv+0xb8>)
 800a074:	781b      	ldrb	r3, [r3, #0]
 800a076:	3301      	adds	r3, #1
 800a078:	b2da      	uxtb	r2, r3
 800a07a:	4b0f      	ldr	r3, [pc, #60]	; (800a0b8 <usb_recv+0xb8>)
 800a07c:	701a      	strb	r2, [r3, #0]

		if(usb_stp == usb_ln+2){
 800a07e:	4b0e      	ldr	r3, [pc, #56]	; (800a0b8 <usb_recv+0xb8>)
 800a080:	781b      	ldrb	r3, [r3, #0]
 800a082:	461a      	mov	r2, r3
 800a084:	4b0d      	ldr	r3, [pc, #52]	; (800a0bc <usb_recv+0xbc>)
 800a086:	781b      	ldrb	r3, [r3, #0]
 800a088:	3302      	adds	r3, #2
 800a08a:	429a      	cmp	r2, r3
 800a08c:	d110      	bne.n	800a0b0 <usb_recv+0xb0>
			usb_stp = 0;
 800a08e:	4b0a      	ldr	r3, [pc, #40]	; (800a0b8 <usb_recv+0xb8>)
 800a090:	2200      	movs	r2, #0
 800a092:	701a      	strb	r2, [r3, #0]
			f_rx(usb_rx, usb_ln);
 800a094:	4b0b      	ldr	r3, [pc, #44]	; (800a0c4 <usb_recv+0xc4>)
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	4a08      	ldr	r2, [pc, #32]	; (800a0bc <usb_recv+0xbc>)
 800a09a:	7812      	ldrb	r2, [r2, #0]
 800a09c:	4611      	mov	r1, r2
 800a09e:	4808      	ldr	r0, [pc, #32]	; (800a0c0 <usb_recv+0xc0>)
 800a0a0:	4798      	blx	r3
			//usb_callback();
		}
		return;
 800a0a2:	e005      	b.n	800a0b0 <usb_recv+0xb0>
	}else{
		//crc (not used)
		usb_stp = 0;
 800a0a4:	4b04      	ldr	r3, [pc, #16]	; (800a0b8 <usb_recv+0xb8>)
 800a0a6:	2200      	movs	r2, #0
 800a0a8:	701a      	strb	r2, [r3, #0]
 800a0aa:	e002      	b.n	800a0b2 <usb_recv+0xb2>
		return;
 800a0ac:	bf00      	nop
 800a0ae:	e000      	b.n	800a0b2 <usb_recv+0xb2>
		return;
 800a0b0:	bf00      	nop
	}
}
 800a0b2:	3708      	adds	r7, #8
 800a0b4:	46bd      	mov	sp, r7
 800a0b6:	bd80      	pop	{r7, pc}
 800a0b8:	200016a5 	.word	0x200016a5
 800a0bc:	200016a4 	.word	0x200016a4
 800a0c0:	200015a4 	.word	0x200015a4
 800a0c4:	2000017c 	.word	0x2000017c

0800a0c8 <__libc_init_array>:
 800a0c8:	b570      	push	{r4, r5, r6, lr}
 800a0ca:	2600      	movs	r6, #0
 800a0cc:	4d0c      	ldr	r5, [pc, #48]	; (800a100 <__libc_init_array+0x38>)
 800a0ce:	4c0d      	ldr	r4, [pc, #52]	; (800a104 <__libc_init_array+0x3c>)
 800a0d0:	1b64      	subs	r4, r4, r5
 800a0d2:	10a4      	asrs	r4, r4, #2
 800a0d4:	42a6      	cmp	r6, r4
 800a0d6:	d109      	bne.n	800a0ec <__libc_init_array+0x24>
 800a0d8:	f000 f822 	bl	800a120 <_init>
 800a0dc:	2600      	movs	r6, #0
 800a0de:	4d0a      	ldr	r5, [pc, #40]	; (800a108 <__libc_init_array+0x40>)
 800a0e0:	4c0a      	ldr	r4, [pc, #40]	; (800a10c <__libc_init_array+0x44>)
 800a0e2:	1b64      	subs	r4, r4, r5
 800a0e4:	10a4      	asrs	r4, r4, #2
 800a0e6:	42a6      	cmp	r6, r4
 800a0e8:	d105      	bne.n	800a0f6 <__libc_init_array+0x2e>
 800a0ea:	bd70      	pop	{r4, r5, r6, pc}
 800a0ec:	f855 3b04 	ldr.w	r3, [r5], #4
 800a0f0:	4798      	blx	r3
 800a0f2:	3601      	adds	r6, #1
 800a0f4:	e7ee      	b.n	800a0d4 <__libc_init_array+0xc>
 800a0f6:	f855 3b04 	ldr.w	r3, [r5], #4
 800a0fa:	4798      	blx	r3
 800a0fc:	3601      	adds	r6, #1
 800a0fe:	e7f2      	b.n	800a0e6 <__libc_init_array+0x1e>
 800a100:	0800a334 	.word	0x0800a334
 800a104:	0800a334 	.word	0x0800a334
 800a108:	0800a334 	.word	0x0800a334
 800a10c:	0800a338 	.word	0x0800a338

0800a110 <memset>:
 800a110:	4603      	mov	r3, r0
 800a112:	4402      	add	r2, r0
 800a114:	4293      	cmp	r3, r2
 800a116:	d100      	bne.n	800a11a <memset+0xa>
 800a118:	4770      	bx	lr
 800a11a:	f803 1b01 	strb.w	r1, [r3], #1
 800a11e:	e7f9      	b.n	800a114 <memset+0x4>

0800a120 <_init>:
 800a120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a122:	bf00      	nop
 800a124:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a126:	bc08      	pop	{r3}
 800a128:	469e      	mov	lr, r3
 800a12a:	4770      	bx	lr

0800a12c <_fini>:
 800a12c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a12e:	bf00      	nop
 800a130:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a132:	bc08      	pop	{r3}
 800a134:	469e      	mov	lr, r3
 800a136:	4770      	bx	lr
